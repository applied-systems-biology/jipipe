[
{
	"uri": "https://www.jipipe.org/documentation/basic-concepts/",
	"title": "Basic concepts",
	"tags": [],
	"description": "",
	"content": "This section explains some basic concepts that are helpful to understand if you want to use JIPipe.\n Visual programming\nExplains the basics of visual programming.\n\r Batch processing\nExplains basic concepts about how data is processed within JIPipe. We really recommend to take a look at this documentation.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/",
	"title": "Creating pipelines",
	"tags": [],
	"description": "",
	"content": "This section explains the JIPipe user interface, how to create an analysis pipeline, and some concepts behind how analysis pipelines work.\n Pipeline editor\nExplains the graph editor user interface, how to create a pipeline, and additional features like the algorithm finder tool.\n\r Parameters\nExplains advanced parameter features.\n\r Mathematical expressions\nExplains the expression parameter type language that is often used for filtering or generating numbers.\n\r Graph compartments\nExplains the concept of graph compartments that allow easy organization of the analysis pipeline into functional units.\n\r Group nodes\nExplains the group node feature.\n\r Loop nodes\nExplains the loop node feature.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/",
	"title": "Running pipelines",
	"tags": [],
	"description": "",
	"content": "This section contains documentation that explains how to run a pipeline and review the results. For example, you can run the whole workflow or make use of the cache feature to run single nodes.\n Running the whole pipeline\nExplains the Quick Run feature that allows to test and compare different algorithm parameters without recalculating the whole pipeline.\n\r Review results\nExplains how to review results.\n\r Use results in external software\nJIPipe stores outputs in a standardized format that can be easily read with third-party software. The output folder of always contains a file project.jip, which is the project that generated the output. This folder contains sub-folders named according to the graph compartment. The ID is the unique ID of the graph compartment and can be looked up in the project.jip file or the compartment graph editor. Each of these compartment folders contains a set of additional sub-folders based on unique ID of the node (also visible in the graph editor).\n\r Running a single node\nExplains the Quick Run feature that allows to test and compare different algorithm parameters without recalculating the whole pipeline.\n\r Data caching\nExplains the how JIPipe caches intermediate results and how to access them.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.77.x/",
	"title": "Version 1.77.x (current version)",
	"tags": [],
	"description": "Changelog of JIPipe version 1.77.x",
	"content": "Table Of Contents\r 1.77.0  \r 1.77.0  new Archive functionality for projects (Project \u0026gt; Archive project ...) that collects all files and generates a directory or ZIP containing the project and all its data new Node \u0026ldquo;Replace label values by table\u0026rdquo; (mapping labels) new Node \u0026ldquo;Table column to image\u0026rdquo; (convert a table column into a 1px wide image with height = number of rows; allows to apply image operations on table columns) new Node \u0026ldquo;Image to table column\u0026rdquo; (put image back into a table column) new Image viewer measurement tool now measures physical sizes fixed Crash on starting JIPipe with a fresh Fiji installation fixed Previews of RGB images were changing the image fixed Freeze caused by updating certain parameters improved Rename \u0026ldquo;Integrate table columns\u0026rdquo; to \u0026ldquo;Summarize table\u0026rdquo; improved Performance of previews improved Expression-based hyperstack slicer now has custom variables improved \u0026ldquo;Set annotations\u0026rdquo; now has access to the number of rows in the data table  "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.76.x/",
	"title": "Version 1.76.x",
	"tags": [],
	"description": "Changelog of JIPipe version 1.76.x",
	"content": "Table Of Contents\r 1.76.0  \r 1.76.0  improved Layout manager: do not move nodes (by default) improved \u0026ldquo;Add table columns\u0026rdquo; now supports annotations and custom variables improved \u0026ldquo;Add table columns\u0026rdquo; now allows to ensure a minimum number of rows improved \u0026ldquo;Split ROI into individual ROI lists\u0026rdquo;: support for custom annotation value new Cache manager: saving/loading all cached data from directory/zip new Node \u0026ldquo;Draw scale bar ROI\u0026rdquo; new Node \u0026ldquo;Combine ROI lists\u0026rdquo; (like Merge ROI lists but with strict ordering) new Node \u0026ldquo;Pull annotations from data tables\u0026rdquo; new Node \u0026ldquo;Annotate with data table properties\u0026rdquo; new Node \u0026ldquo;Push annotations into data tables\u0026rdquo; improved UX of the cache manager button in the menu bar improved \u0026ldquo;Reduce \u0026amp; split stacks (slice)\u0026rdquo; now supports annotations improved UX of the task/process manager button in the menu bar (now can cancel enqueued tasks) fixed Draw ROI nodes not applying ROI properties improved Cache cleanup performance improved Image viewer: minima and maxima for calibration are now sourced from all slices fixed Comment nodes: crash if icon is null improved Organization of annotation nodes (now in sub-menus that indicate the type of addressed data) improved UX of \u0026ldquo;Add slots\u0026rdquo;/\u0026ldquo;Edit slots\u0026rdquo;  "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.75.x/",
	"title": "Version 1.75.x",
	"tags": [],
	"description": "Changelog of JIPipe version 1.75.x",
	"content": "Table Of Contents\r 1.75.2 1.75.1  \r 1.75.2  fixed Convolution nodes now behave exactly as the convolution operations from ImageJ improved Expressions are now marked more clearly in the parameter UI  1.75.1  fixed Critical bug where enum parameters could not be initialized  "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.75.0/",
	"title": "Version 1.75.0 ",
	"tags": [],
	"description": "Changelog of JIPipe version 1.75.0",
	"content": "Table Of Contents\r 1.75.1 Image processing Data processing Expressions User interface Bugfixes and small improvements Known issues  \r 1.75.1  fixed Critical bug where enum parameters could not be initialized  Image processing Various nodes that generate statistics on labels\n new Node \u0026ldquo;Merge 2D slices into hyperstack\u0026rdquo; (inverse operation of \u0026ldquo;Split into 2D slices\u0026rdquo;). Intended for more advanced filtering of hyperstack slices. new Node \u0026ldquo;Merge small labels\u0026rdquo; (merges labels with a low number of pixels into a neighboring label index) new Node \u0026ldquo;Key/Value Histogram 5D\u0026rdquo; new Node \u0026ldquo;Key/Value threshold statistics 5D\u0026rdquo; new Node \u0026ldquo;Key/Value statistics 5D (fast averages)\u0026rdquo; new Node \u0026ldquo;Key/Value threshold statistics 5D (fast averages)\u0026rdquo; improved Convolve operators now have normalization parameter improved Convolve operators now support RGB images (same behavior as ImageJ)  Data processing  new Node \u0026ldquo;Filter by annotation\u0026rdquo; (more compact version of \u0026ldquo;Split \u0026amp; filter by annotation\u0026rdquo; that applies the same operation)  Expressions  new New function STRING_FORMAT (C-style string formatting) new New function NUM (Alternative to TO_NUMBER) improved Expressions that return numbers: valid numeric strings are automatically converted to numbers (before there was an exception if not a Number type is returned) fixed Escaping of expressions did not work as expected (errors if sub-strings contained spaces)  User interface  improved New \u0026ldquo;Memory\u0026rdquo; menu in the status bar that contains all memory-related operations (before was only a gear icon) improved \u0026ldquo;Reduce memory\u0026rdquo; moved into the \u0026ldquo;Memory\u0026rdquo; menu fixed Number editor behaved erratically in non-english locales (now uses the advanced number parser capable of parsing NA and infinity)  Bugfixes and small improvements Please refer to the commits in the JIPipe GitHub repository to find a list of all bugfixes and improvements.\n\r improved Various expression-based nodes now support custom expression variables: Filter labels by statistics, Filter ROI by statistics, Change ROI properties (Expression), Set ROI metadata by statistics (expression), Sort ROI list (expression) fixed Numeric function expression now appropriately sets the default variable fixed Crop 2D node: expression variables are now all annotated fixed \u0026ldquo;Examples\u0026rdquo; panel now always shown fixed Data processing: empty data batches are removed/ignored (only affects nodes with optional inputs) fixed Various exceptions caused by the \u0026ldquo;Data batches\u0026rdquo; panel fixed Image viewer: Movie/sequence export was not adhering to magnification level (cut-off images) fixed Users were able to enable ROI/Mask for \u0026ldquo;Bright spots segmentation 2D\u0026rdquo;, \u0026ldquo;Hessian segmentation 2D\u0026rdquo; and \u0026ldquo;Internal gradient segmentation 2D\u0026rdquo;. Users are now advised to build a custom set of nodes (documentation was added)  Known issues  issue Links within the HTML editor are currently not clickable issue Omnipose: we were so far not able to train an Omnipose model  "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.74.0/",
	"title": "Version 1.74.0",
	"tags": [],
	"description": "Changelog of JIPipe version 1.74.0 (Overhaul 1)",
	"content": "Table Of Contents\r Plugin manager Environment EasyInstaller TrackMate integration (Beta) Cellpose integration Omnipose integration (Beta) Image processing  ROI processing Coloc2 integration   Table processing Plotting General data processing Parameters Expressions Node examples User interface  Project management Parameters Graph editor Compartment editor Cache browser / Results viewer ImageJ alias menu Image viewer  ROI manager Measurement tool / mask drawer / ROI drawer   Plot editor Table editor Dependency management Node templates   Data management Data API Bugfixes and small improvements Known issues  \r Plugin manager In older JIPipe versions, all extensions are automatically loaded during the JIPipe startup. This was changed to reduce the number of dependencies by letting the users decide which extensions should be loaded (excluding core extensions that are mandatory).\n New installations will come with the following extensions enabled: Annotations, Filesystem, Forms, ImageJ algorithms, ImageJ integration, Plots, Python, R, Strings, Table operations, Tools, Utils, ImageJ2 integration, Multi-parameter algorithms Existing installations will enable the following extensions: Annotations, Filesystem, Forms, ImageJ algorithms, ImageJ integration, Plots, Python, R, Strings, Table operations, Tools, Utils, ImageJ2 integration, Multi-parameter algorithms, Cellpose, CLIJ2 integration, Multi-Template matching, Weka, OMERO  Environment EasyInstaller In older JIPipe versions, external environments (Python, Cellpose, R, \u0026hellip;) can be installed via prepackaged installation scripts that replicate the installation procedure that would be applied by a user. We were made aware of issues that are caused by updated to the software or differences in the system configuration. To simplify the installation of various environments, JIPipe now provides ready-to-used installation packages that can be simply downloaded and extracted via a user-friendly interface termed \u0026ldquo;EasyInstaller\u0026rdquo;.\nFollowing EasyInstaller packages are available:\n Cellpose 2.x (Windows, Linux, macOS) CPU/GPU Omnipose (Windows, Linux, macOS) CPU/GPU Python with skimage, pandas, \u0026hellip; (Windows, Linux, macOS) R (Windows)  TrackMate integration (Beta) Requires manual activation\r\rThe TrackMate integration needs to be activated via the extensions manager. Go to \u0026#39;Plugins \u0026gt; Manage JIPipe plugins\u0026#39; and activate the TrackMate extension.\r\r  new The feature set of TrackMate was integrated into JIPipe info The functions are split across multiple nodes to ensure maximum flexibility info TrackMate plugins (e.g., Cellpose spot detector) are automatically incorporated   Using the TrackMate nodes\rsmall size\rtracking\rsimple\rtutorial\r\rA small example showcasing how to utilize the TrackMate nodes.\rProject \u0026#43; Data\rDataset\r\r\r Cellpose integration The Cellpose integration was rewritten to make use of the improved Cellpose CLI.\n improved New nodes designed for Cellpose 2.x deprecated Old Cellpose nodes will still work but are deprecated new Cellpose EasyInstaller that provides prepacked versions of Cellpose  Omnipose integration (Beta) Requires manual activation\r\rThe Omnipose integration needs to be activated via the extensions manager. Go to \u0026#39;Plugins \u0026gt; Manage JIPipe plugins\u0026#39; and activate the Omnipose extension.\r\r Based on the improved Cellpose integration, Omnipose was integrated using dedicated nodes. Please note that Omnipose is based on Cellpose 1.x and requires a dedicated environment.\n new Omnipose segmentation and training nodes new Cellpose EasyInstaller that provides prepacked versions of Cellpose   Using the Omnipose segmentation nodes\rsmall size\rsegmentation\rdeep learning\rsimple\rtutorial\r\rA small example showcasing how to utilize the Omnipose nodes.\rProject \u0026#43; Data\rDataset\r\r\r Image processing  improved \u0026ldquo;Set physical dimensions\u0026rdquo;/\u0026ldquo;Set physical dimensions from expressions\u0026rdquo; now can set the time and value units new Node \u0026ldquo;Set physical dimensions from annotations\u0026rdquo; new Node \u0026ldquo;Render overlay\u0026rdquo; (Renders the overlay ROI of an image) new Node \u0026ldquo;Slice ROI list\u0026rdquo; new Node \u0026ldquo;Sort and extract ROI by statistics\u0026rdquo; new Node \u0026ldquo;Sort ROI list (expression)\u0026rdquo; new Node \u0026ldquo;Object-based iterative thresholding 2D\u0026rdquo; (finds an optimal threshold based on the properties of the detected object; criteria are defined via expressions) new Node \u0026ldquo;Flood fill\u0026rdquo; (flood fill starting at ROI locations) new Node \u0026ldquo;Convert to centroid\u0026rdquo; (converts ROI to point ROI that contain its centroid) new Node \u0026ldquo;Detect lines 2D (Hough)\u0026rdquo; improved New node for splitting channels (\u0026ldquo;Split channels\u0026rdquo;) that fully replicates the behavior of ImageJ\u0026rsquo;s channel splitter deprecated The old \u0026ldquo;Split channels\u0026rdquo; node was deprecated improved \u0026ldquo;Morphological operation 2D\u0026rdquo;: option to add border around the image before processing (border is then removed; to avoid artifacts) improved New node \u0026ldquo;Z-Project\u0026rdquo; that can properly handle 5D images and can also apply C-Project and T-Project deprecated The old \u0026ldquo;Z-Project\u0026rdquo; node was deprecated new \u0026ldquo;Outline ROI\u0026rdquo; now can generate minimum bounding rectangle new Node \u0026ldquo;Key/Value Histogram 5D\u0026rdquo; new Node \u0026ldquo;Round float image\u0026rdquo; improved \u0026ldquo;Voronoi 2D\u0026rdquo; can now binarize the output improved \u0026ldquo;Image calculator 2D\u0026rdquo; is now properly creating Float32 output if requested new Node \u0026ldquo;Blend images\u0026rdquo; (Blends multiple images as in an image editor) deprecated The \u0026ldquo;Overlay images\u0026rdquo; node was deprecated (replaced by \u0026ldquo;Blend images\u0026rdquo;) new Node \u0026ldquo;Threshold/Value statistics 5D (fast, average)\u0026rdquo; new Node \u0026ldquo;Threshold/Value statistics 5D (fast)\u0026rdquo; new Node \u0026ldquo;Threshold/Value statistics 5D\u0026rdquo; new Node \u0026ldquo;Draw scale bar\u0026rdquo;  ROI processing There were various ROI-generating nodes with different feature sets. A new set of nodes was developed that make use of modern JIPipe API features. All nodes consume two optional inputs:\n ROI: Connect an existing ROI list to append to it. If left unconnected, a new ROI list is generated Reference: Connect an image to position ROI according to the image dimensions. If nothing is connected, the boundaries of the ROI provided by ROI is used, otherwise the width and height is assumed to be zero.   new Node \u0026ldquo;Draw oval ROI\u0026rdquo; new Node \u0026ldquo;Draw rectangular ROI\u0026rdquo; new Node \u0026ldquo;Draw text ROI\u0026rdquo; deprecated Append rectangular ROI, Define rectangular ROI, Append rectangular ROI (referenced), Define rectangular ROI (referenced)  Coloc2 integration  new The functionality of Coloc2 was integrated into a node \u0026ldquo;Coloc2\u0026rdquo;.   Using the Coloc2 nodes\rsmall size\rcolocalization\rsimple\rtutorial\r\rA small example showcasing how to utilize the Coloc2 nodes.\rProject \u0026#43; Data\rDataset\r\r\r Table processing  new Node \u0026ldquo;Add missing rows (series)\u0026rdquo; new Node for importing tables from XLSX improved Export tables now allows export to XLSX new Node \u0026ldquo;Table to histogram\u0026rdquo; improved \u0026ldquo;Apply expression per row\u0026rdquo; now has access to other column values improved \u0026ldquo;Apply expression to columns\u0026rdquo; now has access to other column values new Node \u0026ldquo;Annotate data with table values\u0026rdquo;  Plotting  improved New plotting nodes that are generated for each plotting type deprecated Node \u0026ldquo;Plot tables\u0026rdquo; was deprecated  General data processing  new Node \u0026ldquo;Sort data rows (Expression)\u0026rdquo; new Node \u0026ldquo;Override annotations\u0026rdquo; improved \u0026ldquo;Loop start\u0026rdquo;: if set to \u0026ldquo;Pass through\u0026rdquo;, the loop mode is set to \u0026ldquo;Pass through\u0026rdquo;  Parameters  new Node \u0026ldquo;Generate parameters from expression\u0026rdquo; improved The parameter table editor (\u0026ldquo;Define multiple parameters\u0026rdquo;) was redesigned and simplified   new Adaptive parameters and multi-parameter settings were moved into a dedicated panel \u0026ldquo;Advanced parameters\u0026rdquo; info The \u0026ldquo;Advanced parameters\u0026rdquo; panel comes with documentation that explains how the features work  Expressions  new Escape operator to simplify the creation of functions. Example ${x + \u0026quot;y\u0026quot;} will evaluate to \u0026quot;x + \\\u0026quot;y\\\u0026quot;\u0026quot; new Pair operator x: y which evaluates to PAIR(x, y) new Custom expression variables: various nodes allow users to define custom variables based on annotations or other properties of the processed data new Function IF_ELSE_EXPR (lazy IF_ELSE) new Function FUNCTION to define new user functions new Function RUN_FUNCTION to run a user function improved Existing RUN_FUNCTION was renamed to APPLY_FUNCTION_TO_ARRAY new Function SET_VARIABLES new Function STRING_TRUNCATE new Function SUMMARIZE_ANNOTATIONS_MAP new Function ROUNDD (Round to specific number of decimals) new Quantity conversion functions support new units: inch, foot, yard, mile, Dalton, ounce, pound new Function SLICE for slicing arrays/lists new Function MAKE_SEQUENCE_EXPR improved GET_ITEM can handle negative indices (accessing the -nth last item) new Function TRANSFORM_ARRAY_CUMULATIVE new Function TRANSFORM_ARRAY  Node examples In previous JIPipe versions, various nodes included a \u0026ldquo;Load example\u0026rdquo; button that allowed users to learn about how to utilize the node. An issue with this functionality is that it cannot be easily discovered by users, e.g., via the search box. Additionally, examples cannot be created and distributed by users due to the reliance on Java code. The new version of JIPipe introduces a standardized node example system that can dynamically load examples from files, JAR resources, and node templates.\n new Node examples that can be accessed via the \u0026ldquo;Examples\u0026rdquo; tab on selecting a node improved Search box / available nodes were improved to include node examples new Examples for various existing nodes removed Old examples (\u0026ldquo;Load example\u0026rdquo;) were migrated to new example API  User interface Project management  new An online-repository system was implemented that allows to download template projects from the web (if you want to add your own project as downloadable example, file a pull request to https://github.com/applied-systems-biology/JIPipe-Repositories/blob/main/project-templates/project-templates.json)  By default, JIPipe uses the repository https://raw.githubusercontent.com/applied-systems-biology/JIPipe-Repositories/main/project-templates/project-templates.json. Feel free to configure the repository list within Project \u0026gt; Application settings \u0026gt; General \u0026gt; Projects \u0026gt; Template downloader repositories\n\rParameters In older JIPipe versions, the help of a parameter was displayed upon hovering the item via the mouse. This lead to issues with usability, as well as a slowdown of the interface due to the involvement of performance-intensive Java functions. Since this version, the parameter documentation can be opened by clicking the ? icon next to the entry.\n improved Parameter help now is displayed by clicking the ? button improved General node parameters are now separated from node-specific settings improved All list parameter editors were improved improved The \u0026ldquo;Add parameter\u0026rdquo; dialog was redesigned improved Custom/dynamic parameters now are added via a dedicated parameter editor dialog improved The parameter reference editor was redesigned  Graph editor  new Double-click compartment inputs to navigate to the associated compartment fixed Overlapping nodes could not always be dragged improved Creating edges is now smarter: if there is only one input/output, it is sufficient to drag a line to the node (before: needed to drag a line to the slot). Dragged edges now \u0026ldquo;snap\u0026rdquo; to the last output. fixed Resolved slow redraw on Linux improved Slots can be right-clicked to open the slot menu improved Edges are now displayed with arrow heads new \u0026ldquo;Isolate\u0026rdquo; now has a hotkey  \nCompartment editor  new Compartments now can be \u0026ldquo;executed\u0026rdquo; by clicking the play button. This will update the cache / execute a quick-run for the compartment output fixed Pasting compartments did not preserve the locations of the contained nodes improved Compartments now can reference parameters from their nodes  Cache browser / Results viewer  improved The UI was redesigned with a Ribbon and greatly simplified new Annotations of selected data rows can be opened as table  ImageJ alias menu To facility the transition from ImageJ, a function was introduced to organize JIPipe functionality into different menu locations (alias). Various existing JIPipe nodes were organized into a menu \u0026ldquo;IJ\u0026rdquo; that follows the structure of the ImageJ menu. For example, Images \u0026gt; Threshold \u0026gt; Auto Threshold 2D is also organized into IJ \u0026gt; Image \u0026gt; Adjust \u0026gt; Auto threshold ....\n new Node menu IJ that follows the structure of ImageJ improved Aliases are displayed and searchable via the search box / available nodes search improved Aliases are displayed in the algorithm compendium  Image viewer  improved Increased animation speed for channel/frame/depth slider improved Enhanced ROI rendering via a standardized component based on the \u0026ldquo;Convert ROI to RGB\u0026rdquo; node., Users have full control over many aspects of ROI rendering. improved ROI rendering as overlay (as done in ImageJ). This means that ROI renders will not pixelate on zooming into images improved Improved zooming behavior (new formula)  ROI manager  new The UI was redesigned by implementing a Ribbon interface new The ROI manager now can measure the selected ROI new ROI can now be selected via a mouse selection tool (\u0026ldquo;Pick\u0026rdquo;)  Measurement tool / mask drawer / ROI drawer  new The UI was redesigned by implementing a Ribbon interface  Plot editor  improved The plot editor now saves ZIP files instead of directories (easier to handle)  Table editor  improved The table editor was redesigned with a Ribbon UI  Dependency management On loading pipelines with missing dependencies, users are prompted with dialogs to indicate that extensions are missing.\n new Redesigned \u0026ldquo;Missing dependencies\u0026rdquo; dialog that allows to enable the missing extensions directly within the dialog new Users are now informed about missing environments (Cellpose, \u0026hellip;) on loading a project  Node templates  improved You can now right-click entries in the node template editor  Data management Due to the improved data exporter interface, some parameters were deleted. Please evaluate the parameters of \u0026ldquo;Export data\u0026rdquo;/\u0026ldquo;Export images\u0026rdquo;/\u0026ldquo;Export table\u0026rdquo;\n\r improved Greatly simplified data exporter interface (for example used in \u0026ldquo;Export data\u0026rdquo; node): functions for automated name generation were removed and merged into expressions new Exporting data tables to *.zip new Importing data tables from *.zip new Tables can now exported to XLSX (table editor/cache browser/\u0026hellip;) new ImageJ images now save ROI overlays  Data API  new The standardized output format now saves thumbnails, thus avoiding the loading of data in the result preview window new New API to simplify the handling of streamed storage (ZIP etc.)  Bugfixes and small improvements Please refer to the commits in the JIPipe GitHub repository to find a list of all bugfixes and improvements.\n\r improved Default to 1 compartment projects (requested by users) improved Measurements: default to generate all available measurements improved Better detection of R improved Added various color maps from ImageJ improved The application settings UI was improved fixed Various measurement nodes (\u0026ldquo;Extract ROI statistics\u0026rdquo;, \u0026ldquo;Find particles 2D\u0026rdquo;, \u0026ldquo;Extract image statistics\u0026rdquo;, \u0026hellip;) did not support the measurement with physical units. A toggle was added (defaults to enabled) that instructs ImageJ to measure with physical sizes. fixed Local threshold were no applied to stacks fixed \u0026ldquo;Reorder dimensions\u0026rdquo; and \u0026ldquo;Set Hyperstack dimensions\u0026rdquo; now behave as expected fixed OMERO data could not be imported due to missing default constructor deprecated Cellpose Miniconda installer is now deprecated due to unintended side effects that are introduced by the Miniconda installer fixed Backups are now sorted properly in the \u0026ldquo;Restore backup\u0026rdquo; dialog fixed \u0026ldquo;IO interface\u0026rdquo;: Pass through works as expected  Known issues  issue Links within the HTML editor are currently not clickable issue Omnipose: we were so far not able to train an Omnipose model  "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.73.0/",
	"title": "Version 1.73.0",
	"tags": [],
	"description": "Changelog of JIPipe version 1.73.0 (Weka update)",
	"content": "Table Of Contents\r Trainable Weka Segmentation nodes  Example   Skeletons  Example   ROIs and labels  \r Trainable Weka Segmentation nodes JIPipe nodes and data types encapsulating the Trainable Weka Segmentation were added, making it possible to utilize these without the Macro node.\n new Data type “Weka model” (saves classifier, data, and metadata of the segmenter) new Node “Import Weka model” (allows to import existing models) new Node “Train Weka model from ROI (2D)” new Node “Train Weka model from ROI (3D)” new Node “Train Weka model from mask (2D)” new Node “Train Weka model from labels (2D)” new Node “Weka classifier 2D” new Node “Weka classifier 3D”  Example  Using the Weka segmentation nodes\rsmall size\rweka\rsimple\rtutorial\r\rA small example showcasing how to utilize the Trainable Weka Segmentation nodes.\rProject \u0026#43; Data\rDataset\r\r\r Skeletons It was requested to include “Analyze skeleton 2D/3D” as node, so the user did not have to utilize the Macro node.\n new Node “Analyze skeleton 2D/3D” (tip: Use the “Outputs” parameter section to enable more outputs) new Node \u0026quot; Morphological skeletonize 3D\u0026quot;  Example  Using the Analyze skeleton 2D/3D\rsmall size\rsimple\rtutorial\r\rA small example showcasing how to utilize the Analyze skeleton 2D/3D node.\rProject \u0026#43; Data\r\r\r ROIs and labels New nodes were added that simplify the processing of ROI lists and label images\n new Node “ROI to labels (Expression)” (the label value is assigned via a custom expression) new Node “ROI to labels (by name)” (the label value is assigned by the name of the ROI) new Node “Labels to ROI” (based on https://labelstorois.github.io) new Node “Color ROI by name” (tip: if you want to color by statistics, there is “Color ROI by statistics”)   Conversion between ROIs and labels\rsmall size\rsimple\rtutorial\r\rA small example showcasing nodes for conversion between labels and ROIs and vice versa.\rProject \u0026#43; Data\r\r\r "
},
{
	"uri": "https://www.jipipe.org/download/changelog/1.72.x/",
	"title": "Version 1.72.x",
	"tags": [],
	"description": "Changelog of JIPipe version 1.72.0 and its patches",
	"content": "Version 1.72.0  This is the first public release of JIPipe  Version 1.72.x  Mostly changes to make JIPipe compatible to SciJava Maven and cleanup new Node “Reduce \u0026amp; split hyperstack” (allows the slicing of Hyperstacks by indices; a more simple alternative to “Reduce \u0026amp; split hyperstack (Expression)”) new Node “Draw/modify ROIs” (interactive editing of ROI; it works but is currently incomplete and subject to change)  "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/loops/step1/",
	"title": "About loops",
	"tags": [],
	"description": "",
	"content": "JIPipe processes data so that each node completes all its tasks on all incoming data before the next step is executed. For large data sets, this can cause issues with RAM capacity.\nTo resolve this, JIPipe comes with loop control nodes that allow to setup a workflow where a set of nodes is repeatedly executed on a single input. Loops are a syntactic sugar around group nodes that also have loop capabilities, but lack cache support for the internal nodes. Loops are placed in the current pipeline and support the review of intermediate results.\n👉 But loading cached intermediate results to reduce runtime is not supported inside loops\nTo create a loop, place a Loop start node in before the memory-heavy workload as shown in the figure. To end a loop, use the Loop end node.\nPlease read the following notes:\n Loops are still in beta-testing; please provide us with information if you have issues You can disable the loop behavior of Loop start by setting its Iteration mode parameter to Pass data Loops can theoretically be nested Loop end is not necessary. JIPipe will generate loop ends automatically. The same happens if you cache an intermediate result within a loop; JIPipe automatically marks the node as Loop end internally  "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/python/step1/",
	"title": "About Python nodes",
	"tags": [],
	"description": "",
	"content": "Load the example pipeline. When additional processing is necessary, e.g., with the results table, Python code can also be applied.\nAs an example, add the Python script (iterating) node (red arrow 1) to the pipeline and connect it to the Find particles node. The Script field (red rectangle 2) will, e.g., print the table into the Log window of JIPipe (red arrow 3), and puts the table into the node’s output slot (red arrow 4).\nPython (and also R) nodes are currently under heavy development and beta-testing. Please report any issue you encounter.\nExtensive changes are planned with the introduction of improved data management features.\n\r"
},
{
	"uri": "https://www.jipipe.org/faq/general/",
	"title": "General questions",
	"tags": [],
	"description": "General questions about JIPipe",
	"content": "Where do I find documentation? You can find all documentation pages in the Help  menu at the top right.\nThere are also context-based documentations available if you select a node in the graph. Hover your mouse over a parameter to show documentations for this parameter only.\nDoes JIPipe have a backup function? Yes. By default, JIPipe creates a backup every 3 minutes. You can recover it via Project \u0026gt; Restore Backup.\nCan I make the startup faster? Many JIPipe extensions rely on other ImageJ plugins to work. That is why JIPipe always checks if all necessary ImageJ plugins are available. This will only happen during the first startup, or if the ImageJ plugin database is not present/corrupt. If you have persisting issues, run the ImageJ updater from within ImageJ/Fiji or via Plugins \u0026gt; Run ImageJ updater\nCan I remember the settings of one or multiple nodes for later re-use? Yes. Select the nodes of interest, right-click a node and select Create node template. You can save the parameters and even connections if you have multiple nodes into the current project or globally. You can find them in the Node templates list.\nCan I bookmark specific nodes? Yes. Right-click the node and set it as bookmark. The list is available in any project graph editor and in the project info screen.\nCan I expose a set of specific parameters for collaborators? Yes. You can do this via the Project \u0026gt; Project settings \u0026gt; Parameters. They will be available in Project \u0026gt; Project overview, alongside the description that can be set in Project \u0026gt; Project settings \u0026gt; General.\nCan I add my author information to a project? Yes. Go to Project \u0026gt; Project settings \u0026gt; General. Here you can add multiple authors (including affiliation), provide a citation, license, and website, as well as cite other projects.\nWhere should I place files if I want to make the project portable? JIPipe automatically relativizes file paths if you place data files in the same folder as the project (or in a subfolder). This allows you to compress the project and share it with other without breaking anything.\nThis is the recommended way to do share your projects if you have multiple operating systems.\nHow can I copy / delete the global settings? JIPipe places a file jipipe.properties.json into your ImageJ directory. You can delete it to reset all settings to their defaults or copy it to another JIPipe instance.\n"
},
{
	"uri": "https://www.jipipe.org/_header/",
	"title": "Header",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "JIPipe comes with various features that help lecturers to setup exercises where students can have hands-on experience and first achievements in creating image analysis workflows.\nThe following features will be explained:\n Graph compartments as means to structure the analysis into units with a clear purpose The project overview tab that allows to provide the list of tasks and explanations directly within the project file Comment nodes to annotate specific areas or nodes within a pipeline Node templates and its associated menu can be utilized to provide students with a selection of nodes to be used in a project A project permission system to prevent students from applying accidental modifications  "
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/step1/",
	"title": "Loading: Step 1",
	"tags": [],
	"description": "",
	"content": " If you downloaded a *.zip file, please extract it first Open JIPipe Navigate to Project \u0026gt; Open  "
},
{
	"uri": "https://www.jipipe.org/installation/third-party/cellpose/",
	"title": "Setup Cellpose integration",
	"tags": [],
	"description": "",
	"content": "Table Of Contents\r Quick setup Selecting an existing Conda environment Installing Cellpose from scratch (automatically)  \r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Quick setup JIPipe features an integration of Cellpose version 2.x. This software is not part of ImageJ and its update site ecosystem and thus requires additional installation steps. These steps are generally only necessary if JIPipe notifies you about the missing installation of the third-party software.\n\rNotification: Cellpose not configured\rIf JIPipe was not yet configured with a Cellpose Python environment, you will be notified on opening the application. Click the notifications button and select the \"Install Cellpose\" option and follow the instructions or choose \"Configure Python\".\rYou can always change the Python environment by navigating to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Cellpose if you clicked away the notification or if you want to make further changes.\r\r\r\r\rInstall Cellpose (prepackaged)\rOn selecting the \"Install Cellpose\" option, JIPipe will provide you with a pre-made environment that is installed into the ImageJ directory. Choose any of the supported packages. If you already have existing Python environments with Cellpose installed, please follow the other tutorials on this page.\rMacOS: We were not yet successful in generating a pre-packaged GPU-accelerated version of Cellpose for MacOS.\r\rGPU accelerated versions: We created the packages with Pytorch for CUDA 10.2. Your system might require a different setup (see pytorch documentation). In this case, please install Cellpose via our automated installer or follow the official Cellpose installation tutorial to create a Conda environment that can be selected within JIPipe.\r\r\r\r\rSelecting an existing Conda environment Cellpose utilizes JIPipe's Python environment system and is compatible to the existing installation options provided by the Python integration.\r\r\r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Cellpose.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose Additional compatible installers \u0026gt; Select existing Conda environment.\r\r\r\r2. Select the Conda executable and environment\rProvide the path to the Conda executable and the environment name.\rCommon locations for the executable are:\r\rWindows: C:/Users/User/anaconda3/Scripts/conda.exe (adapt to your user name)\rLinux: /home/user/anaconda3/bin/conda (adapt to your user name) \rMacOS: /Users/user/opt/anaconda3/bin/conda (adapt to your user name) \r\rTypically, Cellpose will be installed into an environment cellpose. Adapt the \"Environment name\" setting accordingly.\rConfirm the configuration by clicking \"OK\".\r\r\r\rInstalling Cellpose from scratch (automatically) \r1. Open the Python integration settings and select the installer\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Cellpose.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose any of the following installation routines:\r\rPython: Download \u0026amp; install Cellpose (CPU) Will download a portable Python distribution and installs all components of Cellpose via pip. This will install the CPU version of Cellpose. \rPython: Download \u0026amp; install Cellpose (GPU) Will download a portable Python distribution and installs all components of Cellpose via pip. This will install the GPU-accelerated version of Cellpose (please carefully check the pytorch pip package in the configuration dialog that will open) \rMiniconda: Download \u0026amp; install Cellpose (CPU) Will download a Miniconda distribution and installs all components of Cellpose. This will install the CPU version of Cellpose. Currently not actively maintained.\rMiniconda: Download \u0026amp; install Cellpose (GPU) Will download a Miniconda distribution and installs all components of Cellpose. This will install the GPU-accelerated version of Cellpose. Currently not actively maintained. \r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": " If you downloaded a *.zip file, please extract it first Open JIPipe Navigate to Project \u0026gt; Open analysis output  "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "\r👉 This tutorial requires that you have installed node template Import images.\nIf you do not have the template, you can download it via Manage \u0026gt; Download more templates or by importing the Templates.json file that is provided in the data package. If you do not know how to download or import node templates, please check out our tutorial.\n\rCreate a new project with one compartment.\nDrag the data folder of the tutorial to the UI.\nAdd the Import images template from the node templates list. Connect the output of the Folder list node to Import images.\nAdd an ImageJ Macro node to the UI (red arrow 1).\nHere you could add a new input slot (red arrow 2) and configure the node manually, but we will instead load an example for convenience reasons.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "From the main GUI. Type a keyword into the search bar (red arrow 1), e.g., looking for way to add a file to the pipeline at the beginning. Then choose the desired node, in this case we go for adding a file (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotating-data-with-measurements/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the example tutorial project.\nAdd the Merge table columns (simple) node (red arrow 1) and connect it to the two nodes above (red arrow 2, 3).\nRun the node and in its cache browser (red arrow 4) open the cache entry (red arrow 5) in a viewer (red arrow 6).\nScroll to the end of the table and observe that the AVG Density column now appears in the table (red arrow 7)\nMerge table columns (simple) merges the column set of all incoming tables, generating a table that has all information of the input tables.\n\rMerge table columns (simple) is not required to annotate data with measurements, but it produces a singular table with all information.\n\rYou might have noticed that all AVG Density values except the first one are zero in the merged table. You can change this behavior by setting the Row normalization parameter of the node to Last value.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the project file of this tutorial into JIPipe.\nSelect the Import image node (red arrow 1), we will use the image properties provided by this node to annotate the data. Use the Annotations tab (red arrow 2) to seek the necessary node in the Annotations \u0026gt; Generate menu (red arrow 3).\nAdd the node Annotate with image properties (red arrow 4).\nThe node Annotate with image properties can create JIPipe-managed annotations from properties (width, height, physical sizes, \u0026hellip;) of an image. As annotations are preserved during all processing steps, this allows to apply a multitude of powerful operations in later steps.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the pipeline of the tutorial, select the Split \u0026amp; filter by annotations node (red arrow 1) and observe the ➕ (Add slot) button (red arrow 2) and the Slots tab in the right (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "In this tutorial we will work with a generated image, which is a quick and convenient way to test various features.\nBegin by adding the node Add data \u0026gt; Image \u0026gt; Generate from math expression\nGenerate from math expression generates an image with a user-defined size and generates the value via a custom math expression.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the example pipeline.\nGo to the Compartments tab and update the cache directly from there. This can be achieved with the compartment nodes the same way as with regular nodes. Use the green arrow on the Processing compartment (red arrow 1) and choose the Cache intermediate results option to save the cache for all nodes (red arrow 2).\nNote that the method of updating the cache from the compartments works only if the output node of the compartment is connected! See the previous tutorials on setting up the output nodes of compartments.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "\rWe assume that you have followed the previous tutorial\n\rLoad the example pipeline.\nGo to the Compartments tab and update the cache directly from there. This can be achieved with the compartment nodes the same way as with regular nodes. Use the green arrow on the Processing compartment (red arrow 1) and choose the Cache intermediate results option to save the cache for all nodes (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/comment-nodes/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the project file and run the bottom node Import image (red arrow 1). Chose the Cache intermediate results option to see the outcome from all nodes. Observe the cache (red arrow 2) and notice that the image has multiple channels (red arrow 3). In order to split the channels, search for a suitable node (red arrow 4) with the keyword split (red arrow 5). Choose the Split channels node (red arrow 6) and add it to the pipeline (red arrow 7).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the example pipeline. The output of the workflow is the three channels of the FluorescentCells image, and the single channel of the blobs image.\nBefore we start processing these images, we shall separate the processing nodes from the preprocessing nodes. The latter includes the steps that we have entered until now: folder structure, annotations, image import, image filtering based on annotations, and channel splitting (if necessary). It is easier to organize the pipeline if we now start a new work place as introduced earlier when we discussed compartments.\nCompartments segment the pipeline into organizational units. The difference between groups and compartments is that groups are separate pipelines and thus subject to limitations.\nCompartments on the other hand are are feature of the JIPipe GUI to segment the main project pipeline.\n\rBegin by navigating to the Compartments tab (red arrow 1) and renaming the Analysis compartment (red arrow 2) to Preprocessing (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "\rPlease ensure that you have followed the tutorial Compartments I: Creating and connecting\n\rNavigate to the Processing compartment.\nWe start with segmenting the blob image. We can use the node search triangle (red arrow 1) to find matching nodes (red arrow 2). Search for gaussian blur (red arrow 3) and select the Gaussian blur 2D node (red arrow 4).\nAdd the node to the pipeline (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the example project Tutorial_B22-1_Part1.jip and navigate to the Export compartment (red arrow 1).\nUpdate the cache using the output node’s Cache intermediate results option (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the example project and navigate to the Export compartment (red arrow 1).\nUpdate the cache using the output node’s Cache intermediate results option (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Click on the node to activate it \u0026hellip;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Search for nodes by name. Use the search bar for this purpose. To import the image file as ImageJ image, search for a node called Import image.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "To add a new node by drag and drop, none of the nodes must be selected; this can be achieved by clicking on the white are of the GUI (red arrow 1). The right side now shows the Available nodes tab (red arrow 2), where one can scroll down to find a node, or use the search bar (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Create a new JIPipe project (red arrow 1) using a template (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the example pipeline, go to the Compartments tab (red arrow 1) and run the Process compartment (red arrow 2). Use the Cache intermediate results method (red arrow 3) to be able to see the cache content of all nodes in both compartments (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Create a new project file based on the one-compartment template and go to the Analysis compartment (red arrow 1). In the system file explorer, navigate to the tutorial folder after downloading it (red arrow 2) and find the data folder (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the project file from the tutorial Importing a directory of images I and navigate to the Analysis compartment (red arrow 1). Run the last node (red arrow 2) with the Cache intermediate results option (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the project file and run the bottom node Import image (red arrow 1). Chose the Cache intermediate results option to see the outcome from all nodes.\nObserve the cache (red arrow 2) and notice that the image has multiple channels (red arrow 3). In order to split the channels, search for a suitable node (red arrow 4) with the keyword split (red arrow 5). Choose the Split channels node (red arrow 6) and add it to the pipeline (red arrow 7).\nThe Split channels node behaves exactly as its equivalent from ImageJ (channel splitter).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Add a new node to the pipeline to carry out Gaussian blurring. E.g., use the search bar as described before (red arrow 1) and choose the proper node Gaussian Blur 2D (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the example pipeline.\nIn the Processing compartment, disconnect the output node from the Auto threshold 2D node (red arrow 1).\nLocate the particle finder node by searching with keywords (red arrow 2, e.g., in the Find matching algorithm window. Chose the Find particles 2D node (red arrow 3) and add it to the pipeline (red arrow 4).\nThe Find particles 2D node is the JIPipe equivalent of the ImageJ command Analyze \u0026gt; Analyze Particles....\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Create a new JIPipe project (red arrow 1) using a template (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load a 1-compartment template into JIPipe and add the data folder of the tutorial to the UI (red arrow 1).\n👉 This tutorial requires that you have installed node template Import images.\nIf you do not have the template, you can download it via Manage \u0026gt; Download more templates or by importing the Templates.json file that is provided in the data package. If you do not know how to download or import node templates, please check out our tutorial.\n\rDrag the Import images template node from the Node templates list to the UI and connect it to the Folders node (red arrows 2). Run this node and observe that cache browser (red arrow 3) that now shows 20 images of the droplet example (red rectangle 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Load the example pipeline.\nAdd a second compartment, name it Train Cellpose (red arrow 1) and open it in a tab by double-clicking it (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open the project file assigned to this tutorial.\nOn the GUI, draw around a group of nodes using the mouse with the left button down (red arrow 1), resulting in the nodes inside the dotted rectangle to be selected (first selected node: red arrow 2, last selected node: red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "\rThis guide assumes that you have followed the tutorial \u0026ldquo;Creating node groups I\u0026rdquo;\n\rIn order to see the content of the group node, double-click on the node (red arrow 1), which will open the content of the group in a new tab (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Nodes with a specific set of parameters, or nodes that are formed into a Group (see previous tutorial) can be saved as Templates, in order to make them available for easy reuse. The template nodes can be made accessible either globally (i.e., by other projects as well), or locally, where only the current project can have access to them.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "\rMany JIPipe nodes have the ability to apply multiple parameter sets. The following steps will guide you through how this feature is used.\n\r👉 This tutorial requires that you have installed node template Import images.\nIf you do not have the template, you can download it via Manage \u0026gt; Download more templates or by importing the Templates.json file that is provided in the data package. If you do not know how to download or import node templates, please check out our tutorial.\n\rCreate a new project from the one-compartment template (red arrow 1), open the Analysis compartment (red arrow 2).\nDownload and extract the data package for this tutorial and drag the data directory into the Analysis compartment.\nClick anywhere in the white area of the UI (red arrow 3) and select the Node templates tab (red arrow 4).\nSelect the Import images group node (red arrow 5) and drag it to the UI (red arrow 6). Connect Folder list to the Import images input.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/change-temp-directory/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Navigate to the Project menu (red arrow 1), followed by the Applications settings option (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Open an image in a pipeline (red arrow 1), double-click on the output in the Cache (red arrow 2) and examine the pop-up Image Viewer (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/node-examples/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Add a new node with prefilled example parameters of script is easy. Navigate to the main search bar and type in the word “example” (red arrow 1). Browse through the list and select the example that is need (red arrow 2). Please note that not all nodes are available as examples!\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-backups/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "Projects are regularly saved automatically as a backup. These can be easily recovered by going to the Project tab (red arrow 1) and choosing Restore backup (red arrow 2) The location of the backups can be decided by the user.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "In the JIPipe GUI, select Project -\u0026gt; New from template (red arrow).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "In the JIPipe GUI, select Project -\u0026gt; New from template (red arrow).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-open/step1/",
	"title": "Step 1",
	"tags": [],
	"description": "",
	"content": "From the Project menu, select Recent projects, and choose one of the preexisting JIPipe file (red arrow 1 and red arrow 2). If you have no recent projects, you can also navigate to Project \u0026gt; Open and select the *.jip file.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/step1/",
	"title": "Where are the node templates?",
	"tags": [],
	"description": "",
	"content": "Begin by starting JIPipe and navigating into a compartment (by default tab Analysis).\nClick an empty area to deselect all nodes.\nYou should see a tab Node templates that reveals a list of all existing node templates.\nIn the figure, we already have two templates that are stored application-wide (meaning that they are accessible from all projects). There is also the option to only store specific templates into the current project.\n\rThere are three options to add more templates into the list:\n Create a new node template (click here for a tutorial) Import templates from a *.json file (usually provided via a Templates.json file in our tutorials) Download templates from our online repository  This guide will explain options 2 and 3:\n Importing a JSON file Downloading templates  "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step1.5/",
	"title": "Alterative to Step 1",
	"tags": [],
	"description": "",
	"content": "Alternatively, select the group node (red arrow 1), go to Parameters (red arrow 2) and select Edit graph (red arrow 3).\nThe new tab will contain the content of the group, similarly to the previous viewing method.\n"
},
{
	"uri": "https://www.jipipe.org/faq/issues/",
	"title": "Common issues",
	"tags": [],
	"description": "Solutions to common issues",
	"content": "JIPipe does not load. There can be multiple causes for issues:\n\r\rError\rCause\rSolution\r\r\r\rSplash screen says \"Module threw error\". Various ImageJ errors.\r\r\rA dependency might be missing. \r\rPlease check if all JIPipe dependencies are installed. Please do not hesitate to contact us. Provide us a screenshot, and ideally the full set of error messages.\r\r\r\r\rSplash screen says \"Module threw error\". ImageJ error says \"Caused by: java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonParser.getReadCapabilities()\"\r\r\rA plugin interferes with a software library. ImageJ and JIPipe want a newer version, but the plugin contains a copy of an older version that is loaded first. This also interferes with some ImageJ functions!\r\r\rIf you installed OMERO Insight, try to update it. Otherwise, get help from a developer who can debug the ImageJ instance. Provide the developer with this link: https://stackoverflow.com/a/42865557\r\r\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/json1/",
	"title": "Importing from JSON: Step 1",
	"tags": [],
	"description": "",
	"content": "Navigate to Mange \u0026gt; Import from file and select the template JSON file (usually Templates.json).\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/step2/",
	"title": "Loading: Step 2",
	"tags": [],
	"description": "",
	"content": " Select a file that ends with *.jip Click Open  *.jip files are typically located either directly in the root directory of the package, or within a subdirectory ProtocolAndData.\n\r"
},
{
	"uri": "https://www.jipipe.org/installation/third-party/omnipose/",
	"title": "Setup Omnipose integration",
	"tags": [],
	"description": "",
	"content": "Table Of Contents\r Quick setup Selecting an existing Conda environment  \r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Quick setup JIPipe features an integration of Omnipose. This software is not part of ImageJ and its update site ecosystem and thus requires additional installation steps. These steps are generally only necessary if JIPipe notifies you about the missing installation of the third-party software.\n\rNotification: Omnipose not configured\rIf JIPipe was not yet configured with a Omnipose Python environment, you will be notified on opening the application. Click the notifications button and select the \"Install Omnipose\" option and follow the instructions or choose \"Configure Python\".\rYou can always change the Python environment by navigating to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Omnipose if you clicked away the notification or if you want to make further changes.\r\r\r\r\rInstall Omnipose (prepackaged)\rOn selecting the \"Install Omnipose\" option, JIPipe will provide you with a pre-made environment that is installed into the ImageJ directory. Choose any of the supported packages. If you already have existing Python environments with Omnipose installed, please follow the other tutorials on this page.\rMacOS: We were not yet successful in generating a pre-packaged GPU-accelerated version of Omnipose for MacOS.\r\rGPU accelerated versions: We created the packages with Pytorch for CUDA 10.2. Your system might require a different setup (see pytorch documentation). In this case, please install Omnipose manually or follow the official Omnipose installation tutorial to create a Conda environment that can be selected within JIPipe.\r\r\r\r\rSelecting an existing Conda environment Cellpose utilizes JIPipe's Python environment system and is compatible to the existing installation options provided by the Python integration.\r\r\r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Omnipose.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose Additional compatible installers \u0026gt; Select existing Conda environment.\r\r\r\r2. Select the Conda executable and environment\rProvide the path to the Conda executable and the environment name.\rCommon locations for the executable are:\r\rWindows: C:/Users/User/anaconda3/Scripts/conda.exe (adapt to your user name)\rLinux: /home/user/anaconda3/bin/conda (adapt to your user name) \rMacOS: /Users/user/opt/anaconda3/bin/conda (adapt to your user name) \r\rTypically, Omnipose will be installed into an environment cellpose. Adapt the \"Environment name\" setting accordingly.\rConfirm the configuration by clicking \"OK\".\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/installation/third-party/python/",
	"title": "Setup Python integration",
	"tags": [],
	"description": "",
	"content": "Table Of Contents\r Quick setup Selecting an existing Conda environment Selecting an existing virtual environment (venv) Selecting an existing Python distribution (general) Advanced configuration  \r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Quick setup JIPipe features an (experimental and still under heavy development) integration of the Python script language. This software is not part of ImageJ and its update site ecosystem and thus requires additional installation steps. These steps are generally only necessary if JIPipe notifies you about the missing installation of the third-party software.\n\rNotification: Python not configured\rIf JIPipe was not yet configured with a Python environment, you will be notified on opening the application. Click the notifications button and select the \"Install Python\" option and follow the instructions or choose \"Configure Python\".\rYou can always change the Python environment by navigating to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration if you clicked away the notification or if you want to make further changes.\r\r\r\r\rInstall Python\rOn selecting the \"Install Python\" option, JIPipe will provide you with a pre-made environment that is installed into the ImageJ directory. Choose any of the supported packages. If you already have existing Python environments, please follow the other tutorials on this page.\r\r\r\rSelecting an existing Conda environment \r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose \"Select existing Conda environment\".\r\r\r\r2. Select the Conda executable\rProvide the path to the Conda executable and the environment name.\rCommon locations for the executable are:\r\rWindows: C:/Users/User/anaconda3/Scripts/conda.exe (adapt to your user name)\rLinux: /home/user/anaconda3/bin/conda (adapt to your user name) \rMacOS: /Users/user/opt/anaconda3/bin/conda (adapt to your user name) \r\rConfirm the configuration by clicking \"OK\".\r\r\r\rSelecting an existing virtual environment (venv) \r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose \"Select existing Conda environment\".\r\r\r\r2. Select the virtual environment directory\rProvide the path to the virtual environment directory. I contains a file pyvenv.cfg.\rConfirm the configuration by clicking \"OK\".\r\r\r\rSelecting an existing Python distribution (general) \r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration.\rClick the \"Select/Install\" button in the \"Python environment\" setting and choose \"Select existing Conda environment\".\r\r\r\r2. Select the Python executable\rProvide the path to the Python executable. Common locations for the executable are:\r\rWindows: %appdata%..\\Local\\Programs\\Python\\PythonXX\\python.exe (XX being the Python version)\rLinux/MacOS: /usr/local/bin/python\r\rConfirm the configuration by clicking \"OK\".\r\r\r\rAdvanced configuration \r1. Open the Python integration settings\rUnless you clicked \"Configure Python\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration.\rClick the \"Edit\" button in the \"Python environment\" setting.\r\r\r\r2. Change the configuration\rIn the environment editor you can change the following settings:\r\rArguments: An expression that returns an array of the parameters that are provided to the Python/Conda executable. Click the \"Edit\" button to list all available functions and variables. Example: ARRAY(\"-u\", script_file) would run Python with python -u [script file]\rEnvironment type: Indicates the type of Python environment. Set it to \"System\" if none of the available options match your settings\rExecutable path: Path to the executable (usually Python or Conda)\rEnvironment variables: Allows to set environment variables based on expressions\r\rConfirm the configuration by clicking \"OK\".\r\r\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": " Select the results directory Click Open  Result directories contain a file project.jip and a log file log.txt. In our examples, the are usually folders ProjectAndCache.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "In the macro node (red arrow 1), choose the Examples tab (red arrow 2) and select the option Input and output an image (red arrow 3).\nIt will auto-configure the node with one image input and one image output, as well as provide a convenient scaffold for adding custom macro code.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Now the new File node will appear on the work area.\nThe File nodes contains information where JIPipe should look for files. It is related to Folder (a directory) and Path (a file or directory).\nIf you want to reference multiple files/directories/paths, you can also use File list/Folder list/Path list.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotating-data-with-measurements/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Add the node Annotate data with table values to the UI (red arrow 1).\nIn the Parameters tab (red arrow 2) add the average density as an image annotation (red arrows 3 and 4).\nEach annotation consists of two parts:\n The Name is the name of the annotation. Set it to \u0026quot;Density\u0026quot;. Please note that this is an expression (as the text is colored) and text should be put into quotes. The Value setting generates the annotation value. It has access to all incoming annotations and variables that contain all values of each table column. Set it to `FIRST_OF($\u0026ldquo;AVG density\u0026rdquo;)  The Value setting is provided with access to the annotations of the data (for example you can access the #Filename annotation), as well as variables that contain all values of the column with the same name.\nIn our case, we have a input table column AVG density. The AVG density variable inside the expression will be a list that contains all the AVG density values:\nAVG density = [ 1.06705, 0, 0, 0, 0, ... ]\rAll other columns will also be available:\nSolidity = [ 0.91845, 0.94189, 0.97469, ... ]\rSliceZ = [ 0, 0, 0, ...]\rSliceC = [ 0, 0, 0, ...]\r...\rIf we type in AVG density into the expression, it fails because of the space character. This is why the variable is accessed via $\u0026quot;AVG density\u0026quot;, which is a special operator designed to handle such issues.\nThe valid expression then would be\n$\u0026quot;AVG density\u0026quot;\rThis will create an annotation with the name Density and the value [ 1.06705, 0, 0, 0, 0, ... ], as there are multiple values in a column. To only access the first of these items, we used FIRST_OF:\nFIRST_OF($\u0026quot;AVG density\u0026quot;)\rDepending on your project, you might want other integration functions, e.g., SUM($\u0026quot;AVG density\u0026quot;), MEAN($\u0026quot;AVG density\u0026quot;), or access the second number via GET_ITEM($\u0026quot;AVG density\u0026quot;, 1).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "To add a new slot, click the ➕ button (red arrow 1) and use the Add slot window (red arrow 2) to add an Image slot (red arrow 3). Name the new slot accordingly (red arrow 4) and add it to the node (red arrow 5).\nThe Split \u0026amp; filter by annotations node has a configurable number of outputs. The ➕ allows the addition of new slots with a specified name and data type. If you are unsure about the data type, you can always choose the generic type Data in the Add slot dialog.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Adding the node Annotate by image statistics (Expression) and configure the Generated annotations parameter in its parameter tab as following:\n Set Generator to stat_mean (the mean intensity value; click Edit to find out more about variables) Set Column name to MeanIntensity (the column name refers to the name of the generated annotation)  If you run the node via Update cache, you will see a new annotation MeanIntensity.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "The same cache options are of course available directly from inside the Processing node.\nTo run all the nodes and save their results in cache, use the green arrow in the bottom-most node (Processing output, red arrow 1) and choose the Cache intermediate results option (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "In the Cache browser tab (red arrow 1), the presented results can be filtered via the search field (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/comment-nodes/step4/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "This image is from the standard ImageJ samples, described in ImageJ as follows:\n\r\rThis image is made from a Molecular Probes demo slide:\rCells: bovine pulmonary arthery endothelial cells\rBlue: nucleus stained with DAPI\rGreen: Tubulin stained with Bodipy FL goat anti-mouse IgG\rRed: F-Actin stained with Texas Red X-Phalloidin\r\r\rWe can add this information as a comment to the pipeline. Use the search bar (red arrow 1) to find the Comment node (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Click on the Add new compartment button (red arrow 1) and use the Input window (red arrow 2) to add a new compartment Processing (red arrow 3).\nClick OK to add the new compartment to the GUI (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Select the newly added node (red arrow 1) and go to Parameter (red arrow 2).\nExperiment with the node by setting the Sigma (X) parameter (red arrow 3) to various value by running the node and examining the cache content.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "In the Cache browser switch to the Import/Export tab (red arrow 1). Here you can manually export data into a JIPipe-compatible format. You have two options:\n Exporting the the currently viewed table of data (red arrow 2) as ZIP or directory Exporting the cache of the whole node (red arrow 3) as directory  The difference between these options is that the cache export ensures that you can later load in the result back into the current node via the Import function in the Cache section. To enable this, JIPipe saves multiple tables and additional metadata.\n👉 Try to export the table as ZIP and directory, as well as exporting the cache.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "In the Cache browser switch to the Import/Export tab (red arrow 1). Here you can manually export data into a list of files based on the existing annotations.\nClick the As files button in the Data category.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "\u0026hellip; and click on the grey downwards arrowhead at the bottom right of the node (red arrow 1) to activate the node connection menu (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Scroll down the list of matching node names till the proper node is found.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "The search option works based on keywords, providing the closest matches. Using Import image (red arrow 1) will produce the proper node close to the top results (red arrow 2), from where the node can simply be dragged to the GUI with the mouse, left button down (red arrow 3).\nThe node Import image consumes a JIPipe-managed File data and passes it into ImageJ for importing. The resulting ImageJ image is packaged into a JIPipe-managed image type.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Chose a template with one compartment.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Open the example pipeline, go to the Compartments tab (red arrow 1) and run the Process compartment (red arrow 2). Use the Cache intermediate results method (red arrow 3) to be able to see the cache content of all nodes in both compartments (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Drag the data folder to the GUI (red arrow 1) and run the node (red arrow 2). Go to the Cache browser (red arrow 3) and observe the entry, which corresponds to the newly added folder. Double-clicking the cache entry will open the folder in the file explorer (red arrow 5).\nDragging one or multiple files/directories into a JIPipe pipeline will automatically create a File list/Folder list/Path list node at the mouse location. The node is automatically configured to reference the dragged files.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Now we need to get a list of the image files in all the (sub)folders. Use the node finder (red arrow 1) and check for list nodes (red arrow 2). Choose the List files node (red arrow 3), making sure that node will be created (red arrow 4). Add the new node (red arrow 5).\nThe node List files consumes JIPipe-managed Folder data and produces the corresponding list of contained files/directories as output. Existing annotations of the input directory are preserved.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "The number of channels can be easily figured out from the image viewer. Double click on the image in the cache of the Import image node (red arrow 1) and note the three listed channels (red arrows 2, 3, 4).\nIn the image viewer, the channels can be selected via a slider (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Connect the new node to Import image (red arrow 1)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Select the Find particles 2D node (red arrow 1) and examine the Parameters tab (red arrow 2).\nIn addition to the name parameter (red arrow 3), the minimum and maximum values of the size and circularity (red arrows 4 to 7) can be controlled here, similarly to how it works in ImageJ.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Create a new JIPipe project (red arrow 1) using a template (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Add a Cellpose (2.x) node to the UI (red arrow 1) and connect it to the Import images node (red arrow 2).\nIn the Parameters tab (red arrow 3) observe the default annotation Diameter (which is the size guidance for the objects to be found; red arrow 4) and set the Average object diameter parameter to Enabled and its value to 120 (red arrow 5).\nSet the segmentation model to Cytoplasm (red arrow 6), which is one of the pre-trained models of Cellpose, and it should work well with the general circular shape of the droplets.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Drop the data folder on the UI (red arrow 1) and add the nodes List subfolders and Add path to annotations (red rectangle 2).\nConfigure the Add path to annotations to generate an annotation #Folder (red arrow 3). Note the # to make it recognizable by the data management system as mode to group data.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Right-click anywhere in the white area of the GUI (red arrow 1) and select the Group option (red arrow 2.)\nThe Group option will automatically add and configure a node of the type Group. You can also add node groups via already established means to add nodes.\nGroup nodes contain a dedicated pipeline that is automatically executed when the node itself is run.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Choose between having a global (red arrow 1) or local (red arrow 2) template. The former will make the new template available from any project, whereas the latter will restrict its availability to the current project.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Add a Gaussian blur 2D (red arrow 1) and an Auto threshold 2D node (red arrow 2), as well as a Find particles 2D node (red arrow 3) to the UI and connect them as shown in the figure.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/change-temp-directory/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Choose Runtime (red arrow 2), activate the Override temporary directory (red arrow 3), and select/create a new target directory (red arrow 4) for the temporary result files.\nThe settings are automatically saved.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "To draw ROIs, click on the ROI tab (red arrow 1), select to have ROIs as overlays (default!; red arrow 2), and click on More settings for further options (red arrow 3). Here the options to change the fill and line colors (red arrows 4 and 5, resp.), and to project the Z, the channel or the time dimension(s) are available (red arrows 6, 7, 8, resp.).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/node-examples/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Look for the example on Morphological operation 2D: internal gradient (red arrow 1), add it to the pipeline by dragging it on the GUI with the mouse (red arrow 2) and connect it to the previous node (red arrow 3). Now look for the example on ImageJ Macro: input and output an image (red arrow 4, drag it to the pipeline (red arrow 5) and connect it (red arrow 6).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-backups/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "The list will show the available backup files, the top one being the most recent (red arrow 1). The backup filename contains the original name of the JIPipe project (red line 2) for easy orientation.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "For the simplest option, choose a one-compartment model (red arrow 1) and click New project (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Choose the three-compartment model (red arrow 1) and click “New project” (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-open/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Choose to open the existing project either in the current window, or in a new window.\n"
},
{
	"uri": "https://www.jipipe.org/faq/user-interface/",
	"title": "User interface",
	"tags": [],
	"description": "Questions concerning the user interface",
	"content": "Does JIPipe have a dark mode? Yes, you can enable it in Project \u0026gt; Application settings \u0026gt; UI \u0026gt; General \u0026gt; Theme. Set the theme to Modern dark and restart JIPipe/ImageJ.\nThe nodes are so large. Can they be more compact? Yes, there are multiple view modes available, including a horizontal and compact vertical mode. See here for more info.\nHow can I make long connections without zooming out? Click the arrow button at the input/output slot. It lists all compatible sources/targets ordered by distance.\nWhy is the user interface suddenly messed up on Windows? This is a known issue with the open/save dialogs that are used on Windows. They cause to overwrite JIPipe\u0026rsquo;s design. We have not yet found a solution for this. We recommend to configure ImageJ to use the Java file dialogs, not the native Windows dialogs.\n"
},
{
	"uri": "https://www.jipipe.org/faq/data-processing/",
	"title": "Data processing",
	"tags": [],
	"description": "Questions about how data is processed",
	"content": "What are those compartments for? Imagine you have a large complicated pipeline. Most certainly, you could split it into multiple sub-pipelines like \u0026ldquo;preprocessing\u0026rdquo; or \u0026ldquo;segmentation\u0026rdquo;. Compartments allow you to do exactly this.\nWhat is the difference between groups and compartments? If you use compartments, JIPipe is still aware of the whole pipeline. This allows it to run all dependency nodes via Update cache or Quick run. Groups are independent pipelines that are not aware where they are used. You can only extract the final outputs, not intermediate steps.\nWhat happens if I put multiple inputs into a slot? Because each slot holds a table of data and metadata, those tables are merged row-wise.\n\rShow example\r\r\r\rWhy should I care to add those annotations? Annotations are optional for single data analyses or pipelines without multi-input nodes, but helpful anyways. They will allow you to quickly find out from which data set your data was generated.\nIf you have a multi-input node, you will need annotations, as JIPipe needs to figure out which data from which input belongs together.\nYou will find more information here.\nCan you give me an example of multi-input processing? \rShow example\r\r\rThe merge channels node has two inputs (one for each channel) and at some point needs to assign which of the input images belong together.\rThis assignment is here visualized as \"intermediate merged input table\".\rTo achieve this with multiple rows in the input tables, JIPipe utlizes the additional annotation columns (here #Dataset) to group the input rows by these columns.\r\r\r\rWhy do you create annotations with a \u0026lsquo;#\u0026rsquo;? There are two kinds of annotations: Ones that only you care about (e.g. the resolution) and the ones the JIPipe should care about. By default all JIPipe\u0026rsquo;s multi-input nodes are configured to only care about annotation columns that begin with #.\nYou can extensively configure this behavior in the node\u0026rsquo;s properties and also manually define which columns JIPipe should look at.\nWhat happens if a reference column is missing? JIPipe will assume an ANY for such columns.\n\rShow example\r\r\rIn this example, one set of images has a data set, while the other set has no such information. This is interpreted as \"any\".\r\r\r\rCan I preview what the multi-input processing will do without running the node? Yes, switch to the \u0026ldquo;Data batches\u0026rdquo; tab in the properties panel. It allows you to configure how JIPipe merges data together and previews the results.\nDo not forget to refresh after changing a setting.\nHow does JIPipe store its data during the analysis? JIPipe stores all necessary inputs and the outputs of each processing step. This means that any kind of large data set will be loaded into the memory at the same time if you set up an iteration.\nFor example, an Import image step will load all the images and then continue with the next steps.\nI have a very large data set. How can I prevent loading it at the same time? You have two options:\n Run a JIPipe project within a another Use a node group and set it to iterative mode  Nested JIPipe projects You can run JIPipe projects within other JIPipe projects. This will separate them and into individual runs that are iterated one-by-one. JIPipe comes with nodes to extract specific results from those outputs.\nCreate the analysis for only one data set and export project-wide parameters via its project settings. Those parameters will be later modified and should contain anything you need for the project setup. Save it into a *.jip project.\nThen create a separate project and add the nodes Run JIPipe project and Define JIPipe project parameters. In both nodes, you load the main analysis projects.\nIterative group nodes Group a set of nodes that contains functions with a large memory footprint. This will create a Group node. By default group nodes will just act as simple group and pass data from its slots to the wrapped graph. To reduce the memory footprint, set the Graph iteration mode to iterate/merge, which changes the behavior of the node: The code now will be repeated for each data batch, which prevents loading all data at once.\nPlease ensure that the wrapped nodes can handle this kind of iteration.\nI do not want to always put in the credentials into each OMERO node. What can I do? Go to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; OMERO and set your credentials there. Any OMERO node will supplement unset credentials by those settings.\nWhere can I find information about the formats used in JIPipe output? You will find information in the data type compendium. Concerning the standardized JIPipe output format, you will find information here\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/json2/",
	"title": "Importing from JSON: Step 2",
	"tags": [],
	"description": "",
	"content": "You will now have two options that determine where the loaded templates will be stored:\n Globally: the newly imported templates will be available in whole JIPipe (all projects) Inside project: the templates will be directly stored inside the project and thus only available within the project itself  Choose the option that is most convenient for you.\nYou can also move templates from/to global store into/from project storage via the Manage menu.\n\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/step3/",
	"title": "Loading: Step 3",
	"tags": [],
	"description": "",
	"content": "You will have two options:\n This window will open the project in the current window New window will create a new JIPipe window for the project  Choose the option that is most convenient for you.\nAfterwards, the project will be opened in the JIPipe editor.\nTo execute the pipeline, you have two options:\n Running the whole pipeline: 👉 this is recommended for running finalized pipelines on the full dataset Caching specific nodes or compartments: 👉 use this option if still want to modify the pipeline or want to review intermediate results  "
},
{
	"uri": "https://www.jipipe.org/installation/third-party/r/",
	"title": "Setup R integration",
	"tags": [],
	"description": "",
	"content": "Table Of Contents\r Quick setup Manual configuration of the R integration  \r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Quick setup JIPipe features an (experimental and still under heavy development) integration of the R script language. This software is not part of ImageJ and its update site ecosystem and thus requires additional installation steps. These steps are generally only necessary if JIPipe notifies you about the missing installation of the third-party software.\nMacOS/Linux: If you are using Linux or MacOS, JIPipe should automatically detected the installed R version by searching for /usr/bin/R and /usr/bin/RScript (Since JIPipe 1.74.x also /usr/local/bin/R and /usr/local/bin/RScript).It thus should be sufficient to just install R (Ubuntu/Debian: sudo apt install r-base, MacOS: https://www.r-project.org (for example via the RStudio mirror)). If the paths of these binaries is different, please configure the R integration manually (see below).\r\r\rNotification: R not configured\rIf R is missing, you will be notified on opening the application. Click the notifications button and select the \"Install R\" option (if available) and follow the instructions or choose \"Configure R\"\rIf \"Install R\" is not available or if you wish to select an existing installation of R, please follow the instructions below.\r\rYou can always change the R environment by navigating to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; R integration if you clicked away the notification or if you want to make further changes.\r\r\r\r\rManual configuration of the R integration Please ensure that R is installed on your system.\r\rWindows/MacOS: Download R from https://www.r-project.org (for example via the RStudio mirror). Installing RStudio is not sufficient.\rLinux: Install the appropriate package(s) (Ubuntu/Debian: sudo apt install r-base) or obtain a package from https://www.r-project.org (for example via the RStudio mirror)\r\r\rWindows:  Installing RStudio is not sufficient. Its distribution of R does not include the necessary executables.\r\r\r1. Open the R integration settings\rUnless you clicked \"Configure R\" in the notification panel, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; R integration.\rClick the \"Edit\" button in the \"R environment\" setting.\r\r\r\r2. Provide the R executables\rProvide the path to the R executable and the RScript executable.\rCommon locations are:\r\rWindows: C:/Program Files/R/R-4.2.1/bin/R.exe and C:/Program Files/R/R-4.2.1/bin/RScript.exe (adapt to the installed R version)\rLinux: /usr/bin/R and /usr/bin/RScript MacOS: /usr/local/bin/R and /usr/local/bin/RScript \rConfirm the configuration by clicking \"OK\".\r\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Position the Annotate with image properties node on the workspace (red arrow 1). Disconnect the Import image node from the Split channels node (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step2/",
	"title": "Step 2",
	"tags": [],
	"description": "",
	"content": "Parameters that belong to the member nodes of the group can be made accessible directly.\nActivate the group node (red arrow 1), go to Parameters (red arrow 2) and select Edit parameter references (red arrow 3).\nIn the new Edit parameters window (red arrow 4) select Add (red arrow 5 and choose Empty group (red arrow 6).\nThe second option, Node as group, will add all exportable parameters to the list. So, please be aware that there can be many parameters.\n\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "You will have two options:\n This window will open the project in the current window New window will create a new JIPipe window for the project  Choose the option that is most convenient for you.\nAfterwards, the project will be opened in the JIPipe editor.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Go back to Parameters (red arrow 1) and add the following macro code to the indicated place (red arrow 2) that needs to be executed here (red arrow 3):\nrun(\u0026quot;Auto Local Threshold\u0026quot;, \u0026quot;method=[Try all] radius=5 parameter_1=0 parameter_2=0 white\u0026quot;)\rThis example macro executes the 15 local thresholding methods of ImageJ on the blob image, using a radius of 5.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "When the new node is clicked on and activated, it will be surrounded by a dashed rectangle(red arrow 1). Make sure that the Parameters tab is active on the right side(red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotating-data-with-measurements/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Connect the node to the merged table (red arrow 1) and to the image (red arrow 2).\nRun the node and observe the Cache browser (red arrow 3). The average density now appears as a new annotation (red arrow 4, red rectangle 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Move the Split channels node lower and position the annotations node in between (red arrow 1). Connect the node to the Import image node above (red arrow 2) and the Split channels node below (red arrow 3)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "In the Slots tab (red arrow 1) we can also change the properties of the already present first output slot.\nTo do this, select the slot to be edited (red arrow 2). Here the data type can be changed if necessary (red arrow 3) and a new name can be entered (red arrow 4). When done editing, accept the changes (red arrow 5).\nYou can also modify/delete/re-arrange slots by either clicking the ▼ located on the node or by right-clicking the slot within the graph editor.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Add an Auto threshold 2D node and run it with Update cache.\nObserve that the set of annotations include both the calculated Threshold and the MeanIntensity value that was generated in the last step.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "When only the last node’s cache needs to be updated, e.g., after changing parameter(s) only in that node (red arrow 1), the option of Update cache can be used (red arrow 2). The pop-up explanation will also explain the action of the chosen option (red arrow 3).\nUpdate cache and Cache intermediate results have the same behavior. The only difference between these two caching options is whether intermediate results are stored.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "E.g., looking only for ROI data, we can use the search term ROI in the search field (red arrow 1), and see only the ROI results.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/comment-nodes/step5/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Add the Comment node to the GUI (red arrow 1). Link the node to the Folder list node (red arrow 2) (or to any node).\nThe Comment node does not execute any command, only stores additional information. The information can be text or image(s). We copy the text from the ImageJ info box into the node using the Description field (red arrow 3), using the text (red line 4) and the RGB-converted image from the image viewer of the Import image node (red arrow 5). The image can be added via the Image tab (red arrow 6), using e.g., the clipboard content (red arrow 7).\nHere we used the image viewer export function, after having converted the image into RGB, as described in another tutorial.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "The new compartment will now appear on the GUI (red arrow 1).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "With Sigma set to 5, the cache (red arrow 1) should show a blurred image as shown below (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "JIPipe comes with a node that allows the automated export of data into the standardized format.\nThis can be achieved by adding (red arrow 1) the node Export data table and connecting it to the output of any node (red arrow 2).\nFor example, we connected the node to the AVG density output of the Analysis output.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "We recommend to create an empty directory for the storage of the exported data (red arrows 1 and 2).\nThen choose the directory and click Open.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "This will show a list of compatible nodes, i.e., nodes that can accept the datatype from the active node. In this example node, which provides an image file location, the 2nd hit is the proper choice: Import image (red arrow 1)\nThe node Import image consumes a JIPipe-managed File data and passes it into ImageJ for importing. The resulting ImageJ image is packaged into a JIPipe-managed image type.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "This will add the new node to the GUI, but it will not be connected yet (red arrow 1).\nThe node will appear the the ⌖ icon. The location of the symbol is changed by clicking on the pipeline area.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "The new node will appear on the GUI (red arrow 1)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Locate the data folder that belongs to this tutorial (red arrow 1) and drop it on the UI (red arrow 2).\nClick somewhere on the white area of the UI (red arrow 3) and chose the Node templates tab (red arrow 4).\n👉 This tutorial requires that you have installed two node templates Split channels: three channels, R, G, B order and Import images.\nIf you do not have these templates, you can download them via Manage \u0026gt; Download more templates or by importing the Templates.json file that is provided in the data package. If you do not know how to download or import node templates, please check out our tutorial.\n\rSelect the pre-made Import images template from the list (red arrow 5) and drag it to the UI.\nConnect it to the Folder list node (red arrow 6) and run the Import images node via the Update cache command (red arrow 7.)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Look for nodes with the name extract (red arrow 1) and choose the Extract image statistics node (red arrow 2).\nExtract image statistics measures statistics on the whole image or an optional ROI. It is related to the node Extract ROI statistics that requires a ROI and optionally requires an image. Both nodes apply the same ImageJ measurement algorithm.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Use the Find matching algorithm option (red arrows 1 and 2) to look for annotation nodes (red arrow 3) that are compatible with the folder node, and choose the Annotate with path properties node (red arrow 4)\nThe node Annotate with path properties allows to annotate the incoming File/Folder/Path object with information that can be read by JIPipe. As annotations are preserved during the processing steps, this will enable a multitude of advanced operations .\nFor example, if an image file is annotated with some metadata, the annotation is still present if the image file is imported via Import image.\n\rThere is an alternative option to the Annotate with path properties node called Add path to annotations, which has fewer options, but requires no configuration in simple cases.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Go to Parameters of the new node (red arrow 1)and check Recursive (red arrow 2). Run the node (red arrow 3) with Update cache.\nBy default, the node will only list the direct children of the current path. Recursive ensures that also the N-th children are detected.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "The image contrast can be selected from a list (red arrow 1), using Auto (red arrow 2) is the default setting. The multichannel image can be converted into an RGB image (red arrow 3), whereas the zoom factor can be set via a +/- button set (red arrow 4). The resulting image can be exported or copied into the system cache as described before (red arrow 5).\nBasic information about the image (resolution, bit depth, etc.) can be found in the toolbar of the image viewer and within the \u0026ldquo;String representation\u0026rdquo; column in the cache browser.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Click on the Gaussian Blur 2D node to activate it (red arrow 1), and select the Parameters tab on the right (red arrow 2).\nThe interface will show the Sigma parameters of the Gaussian blur, separately for X and Y (red arrows 3 and 4, respectively).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Run the Find particles 2D node (red arrow 1), preferable with Cache intermediate results (red arrow 2). Examine the cache via the Cache browser (red arrow 3).\nThe identified regions of interest are measured (red arrow 4) and the ROIs are also saved (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Locate the data folder that belongs to this tutorial (red arrow 1) and drop it on the UI (red arrow 2).\nClick somewhere on the white area of the UI (red arrow 3) and chose the Node templates tab (red arrow 4).\n👉 This tutorial requires that you have installed node template Import images.\nIf you do not have the template, you can download it via Manage \u0026gt; Download more templates or by importing the Templates.json file that is provided in the data package. If you do not know how to download or import node templates, please check out our tutorial.\n\rSelect the pre-made Import images template from the list (red arrow 5) and drag it to the UI. Connect it to the Folder list node (red arrow 6) and run the Import images node (red arrow 7.)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Still in Parameters (red arrow 1), select the outputs of your choice.\nIn this example, we will chose the segmented areas as ROIs (red arrow 2), the flows (red arrow 3), and the probability map (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Note that the training dataset (red arrow 1) consists of subfolders (red arrow 2) with matching pairs of TIFF and ZIP files (note 3).\nThe latter contains the manually annotated objects as ROIs, designed to be used by the Cellpose trainer.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "The group dialogue window (red arrow 1) will allow to choose between keeping the original nodes (red arrow 2) or not; for now, we will keep the original nodes, so as to be able to compare the outcome of the group with that of the original node array.\nAnother reason to keep the original nodes is that the nodes inside a group DO NOT provide a cache, thus we can’t check the outcome of the individual nodes inside a group.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Use the newly opened Create template window (red arrow 1) to set the name of the template (red arrow 2), and to provide a description (red arrow 3). When done, click OK to save the new template (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Gaussian blurring and thresholding are both sensitive to their parameter settings.\nThus it is often useful to test multiple parameters for such nodes by connecting them up to a selection of parameters that can be tested within the same run of the project.\nIn JIPipe, multiple parameter sets are defined by a dedicated set of nodes, one of which is termed Define multiple parameters.\nBegin by adding Define multiple parameters into the pipeline (red arrow 1). Select the node and click the Edit parameters option in the node Parameters tab (reds arrow 2).\nDefine multiple parameters allows you to interactively design parameter sets that are represented as table.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Activate the Drawing tools (red arrow 1), and use the Ellipse, Polygon, Rectangle, and Pencil tools (red arrows 2, 3, 4, 5, resp.) to draw the corresponding shapes on the image (red labels 2, 3, 4, 5, resp.).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/node-examples/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Now run the project. The resulting image will be an outline of the blobs from the example image.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-backups/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "\rThe following steps are optional. By default, JIPipe will store backups into the Fiji.app/jipipe/backups directory.\n\rThe location of the backup files can be customized via going to the Project tab (red arrow 1) and choosing the Application settings tab (red arrow 2). This will open a new tab in the JIPipe main GUI (red arrow 3). Choose the backup tab (red arrow 4) to set a custom folder for the backup projects.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Select either “This window” (red arrow 1), the new project will take over the current active window) or “New window” (an additional window will open, useful if wanting to work or compare two projects; (red arrow 2). )\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Select either “This window” (red arrow 1), the new project will take over the current active window) or “New window” (an additional window will open, useful if wanting to work or compare two projects; (red arrow 2). )\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-open/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "Now the saved project will reopen, showing the compartment structure(s).\nJIPipe will always attempt to restore the UI configuration (tabs etc.) that was present during the saving of the project.\n\r"
},
{
	"uri": "https://www.jipipe.org/faq/imagej-integration/",
	"title": "ImageJ integration",
	"tags": [],
	"description": "Questions about the integration into ImageJ and popular plugins like OMERO",
	"content": "Can I use plugins from ImageJ in JIPipe? Yes. Either there is an integration available, or you just use the macro node and input the corresponding macro code that runs the plugin.\nCan I use existing ImageJ macros in JIPipe? Yes, use Images \u0026gt; ImageJ macro. The input slots are opened as image windows and can be addressed from within the macro with selectWindow(). You can also load an example that shows how to use the node.\nCan I use JIPipe from within ImageJ macros? Yes. You can use both pipelines and individual JIPipe algorithms from within ImageJ macros and the GUI.\nWhy are some JIPipe algorithms not available from within ImageJ? JIPipe has a very general data model that makes it possible to develop pipelines for processing any kind of data. The communication between JIPipe\u0026rsquo;s data types and ImageJ is handled by adapters that will handle the \u0026ldquo;translation\u0026rdquo; back \u0026amp; forth. For some of such data types, there is no adapter. The reason behind this is that ImageJ might not have an equivalent data type or feature.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/json3/",
	"title": "Importing from JSON: Step 3",
	"tags": [],
	"description": "",
	"content": "In this example, the option Inside project was chosen.\nYou can now see the newly added templates and use them by dragging them into the pipeline.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/running1/",
	"title": "Running the whole pipeline: Step 1",
	"tags": [],
	"description": "",
	"content": "To run the whole pipeline, click the Run button at the top right.\nRunning a pipeline will store the results to the hard drive. While the generated directory structure can be browsed by humans, it is mainly designed to be opened by the JIPipe result browser.\nIf you want to re-open a generated results directory, navigate to Project \u0026gt; Open analysis output\nIf you intend to export files in a form that is more suitable for humans, please check out our tutorials.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step3/",
	"title": "Step 3",
	"tags": [],
	"description": "",
	"content": "The new group parameters window (red arrow 1) can be (re)named (red arrow 2), and provided with a description (red arrow 3).\nThe description editor can be in compact, full or HTML mode (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "You will have two options:\n Load in new tab will open the results in a memory-efficient result browser Load into cache will load all results into the memory cache (Please be careful with this option if your data is very large)  Choose Load in new tab.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Go back to Parameters (red arrow 1) and add the following macro code to the indicated place (red arrow 2) that needs to be executed here (red arrow 3):\nrun(\u0026quot;Auto Local Threshold\u0026quot;, \u0026quot;method=[Try all] radius=5 parameter_1=0 parameter_2=0 white\u0026quot;)\rThis example macro executes the 15 local thresholding methods of ImageJ on the blob image, using a radius of 5.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "To choose a concrete file, click on the navigation tab (red arrow 1), navigate to the folder where the image file is (red arrow 2), and choose the image to be loaded (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Select the Annotate with image properties node (red arrow 1) and go to the Parameters tab (red arrow 2). Select as many image properties from the list as you like; as an example, we selected five properties as shown in the figure (red arrows 3 to 7).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "To activate the filtering function, select the Edit option for expressions (red arrow 1).\nIn the expression editor window (red arrow 2) look for a number conversion function (red arrow 3) and select the TO_NUMBER function (red arrow 4). Choose the Variable value type (red arrow 5) and paste in the name of the variable based on which the filtering will be done (here: Image composite channel count as seen in the previous tutorial, red arrow 6).\nInsert the new expression (red arrow 7) The editor field will now read:\nTO_NUMBER($\u0026quot;Image composite channel count\u0026quot;)\rAdapt the expression further to test for 3 channels via the comparison operator (red arrow 8):\nTO_NUMBER($\u0026quot;Image composite channel count\u0026quot;) == 3\rAccept the changes (red arrow 9).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s calculate the difference between the threshold and the mean image intensity.\nAdd a node Set/Edit annotations and navigate to its Annotations parameter.\n Set the Value to ABS(TO_NUMBER(MeanIntensity) - TO_NUMBER(Threshold)) Set the Name to ThresholdDiff  On running the node you should notice a new annotation ThresholdDiff that is set to the absolute difference between the threshold and mean image intensity.\n\rSet/Edit annotations allows you to create new annotations by setting their value and to combine existing annotations or apply operations on them.\n\rTO_NUMBER is required, as JIPipe annotations can only store text. Thus, they must be converted to numbers if you want to apply mathematical operations.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The next option in the menu (red arrow 1) is Run \u0026amp; show results (red arrow 2) that will calculate and save the results as explained on the UI (red arrow 3).\nUpdate cache and Cache intermediate results store the results into the RAM, while Run \u0026amp; show results amd Show intermediate results store all results to the hard drive into a temporary directory (also see the tutorial how to change this directory). Each option has different benefits and disadvantages:\n Caching to RAM:  Benefit: Fast, convenient to use, can be updated in-place (for testing parameters) Disadvantage: RAM space is limited   Saving to HDD:  Benefit: Lower RAM usage Disadvantage: Slow due to file loading process, some convenience-features not available    \r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Updating the cache of the specified node is also possible directly from here (red arrow 1) using the usual two options (red arrow 2 and 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Reposition the new node (red arrow 1) and connect it to the Preprocessing compartment (red arrow 2).\n👉 This connection will transfer the data from the Preprocessing compartment to the new Processing compartment via the built-in output and input nodes of the compartments. These still need to be set up, which we will do next.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "A simple segmentation can achieved by automatic thresholding. We search for such node e.g., via the Find matching algorithms option (red arrow 1) and searching for auto threshold (red arrow 2). Choose the matching node (Auto threshold 2D, red arrow 3) and add it to the pipeline (red arrow 4).\nThe Auto threshold 2D node is the JIPipe equivalent of the ImageJ command Image \u0026gt; Adjust \u0026gt; Auto threshold.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "By default, the Export data table node will store its output inside a automatically generated directory relative to the current output path (for cache runs it is in a temporary directory.\nAlternatively, you can provide a custom path or one that is relative to the project directory:\nTo do this, select the Export data table node and navigate to the Parameters tab (red arrow 1).\nProvide a relative output directory (i.e. does not start with / on macOS/Linux or with a drive letter on Windows; red arrow 2). Then enable the setting Output relative to project directory (red arrow 3).\nOutput relative to project directory only works if you loaded the project from a *.jip file or have saved it at least once.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Now JIPipe will give you options that determine how the file names should be generated. This is required, as JIPipe does not know anymore the name of the original input file unless it is stored in the annotations.\nThe most important setting is the File name expression that defaults to\nSUMMARIZE_ANNOTATIONS_MAP(annotations, \u0026quot;#\u0026quot;)\rThe expression is applied for each exported data item and returns the file name that should be used. The default method will take all known annotations that are marked with a # and form a filename based on the following pattern:\n[Annotation 1 name]=[Annotation 1 value]\rIf you want to know more about SUMMARIZE_ANNOTATIONS_MAP, please click Edit and search for the function in the function list.\nIn this case, you can leave the setting as-is.\nYou can build your custom filenames based on annotations. For example, if you just type in #Filename, the #Filename annotation will be utilized.\nYou can also create complex filenames by utilizing expression functions. For example, if you want a text overlay_ in front of all filenames, just type in\n\u0026quot;overlay_\u0026quot; + #FileName\r\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Clicking on the green arrowhead on the right (red arrow 1) \u0026hellip;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "To connect the Import image node to the File node, simply draw a line with the mouse, left button pushed, to connect the bottom white zone of the File node (red arrow 1) to the top white zone of the Import image node (red arrow 2).\nThe node Import image consumes a JIPipe-managed File data and passes it into ImageJ for importing. The resulting ImageJ image is packaged into a JIPipe-managed image type.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "To connect the Import node to the File node, simply draw a line with the mouse, left button pushed, to connect the bottom white zone of the File node (red arrow 1) to the top white zone of the Import image node (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The Cache browser (red arrow 1) will now show the fluorescence image (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Drag the new node to the UI and position it below the Find particles 2D node (red arrow 1). For convenience, rearrange to input slots of the new node by moving its right-side node to the left (red arrow 2) by clicking the ▼ button on the ROI slot and selecting Move to the left.\nYou can also right-click a slot to open the slot settings menu.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "In the Parameters tab (red arrow 1) a description can be added to clarify the role of the node (red arrow 2), and the path properties that need to be added to the annotations can be chosen (red arrow 3). The checkboxes are all set by default. The parameter names are listed as they can be referred to later in the processing, when we rely on the annotations (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Go to Cache (red arrow 1) and check that all file names are listed (red line 2); compare with the list of files on the hard drive.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The image will be split into three channels, as revealed by the image viewer.\nTo set up the Split channels node, we need to add three output channels, corresponding to the red, green, and blue channels of the raw image:\nclick on the ➕ sign to add a new slot to the Split channels node (red arrow 1). This will open the Add slot window (red arrow 2), where we search for image as data type (red arrow 3).\nIt’s not necessary to be more specific about the image format, the general Image type (red arrow 4) will take care of any conversion automatically. We name the first channel Red (red arrow 5) and add the new slot (red arrow 6).\nThe Split channels node has a configurable outputs; each corresponding to one output channel. There are various nodes that have configurable inputs and/or outputs.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Change these parameters to adjust the amount of blurring. When the Y field has -1, its value will be set to the same as X. Change the value from 1 to 5 (red arrow 1), 10 and 20 \u0026hellip;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Here 53 ROIs were found (column String representation, red arrow 1), and they can be directly observed by double-clicking the cache item (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The Cache browser (red arrow 1) will now show the fluorescence image (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The flow and probability maps are thresholded before the segmented ROIs are generated.\nThese threshold values can be set in the corresponding menu (red arrow 1), where the probability threshold (red arrow 2) and the flow threshold (red arrow 3) can be set.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Accordingly, we need to read the TIFF and ZIP files separately.\nThis can be achieved by establishing two branches, one each for the two file types by the introduction of two List files nodes that we renamed to List TIFF and List ZIP in our figure (red rectangle 1).\nThe List files node can be configured with a filter expression to only detect specific files. In the case of the the List ZIP node, set the expression to\nSTRING_MATCHES_GLOB(name, \u0026quot;*.zip\u0026quot;)\rFor List TIFF, set the expression to\nSTRING_MATCHES_GLOB(name, \u0026quot;*.tif\u0026quot;)\rAfter the List TIFF node, add another Add path to annotations to also save the image file name.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Select the new group node (red arrow 1), go to Parameters (red arrow 2) and change the name from the original Group to a more meaningful name (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "To observe the newly created template node, click anywhere within the white area of the GUI (red arrow 1), select the Node templates tab on the right side (red arrow 2), and scroll down to find the newly added template (red arrow 3).\nNote that the title of the node template (red arrow 4) and the detailed description (red arrow 5) also appear in the summary, together with the slots layout of the node (red line 6). This complete set of information helps to decide which template(s) to use in our projects.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "\rThe parameter table generated by Define multiple parameters is empty by default. This is why you first have to create rows = parameter sets and columns = parameters.\n\rWe begin by adding a new column by applying the following steps.\n To add a column ( = parameter) by selecting Import from node (red arrow 2), which will auto-configure a new column based on an existing node parameter Find the Auto threshold 2D entry (red arrow 3) Choose the Method parameter (red arrow 4) and select it (red arrow 5)  "
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "In the Draw menu (red arrow 1) activate the Import/Export tab (red arrow 2) and click on To ROI (red arrow 3) to convert the drawings to ROIs. Observe that the region outlines are now yellow, indicating that they are converted to ROIs.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/node-examples/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "Similarly, examples can be found by using the Available nodes tab (red arrow 1), typing in the search word (red arrow 2), and browsing thru and selecting the required example (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-backups/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "In the Backup tab (red arrow 1) activate the Custom path option on the right side (red arrow 2) and navigate to the new backup folder (red line 3)\nIt is worth to clear the backup folder every now and then, to save up space.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The new project will open in the Compartments view, where the (single) compartment “Analysis” (red arrow) will be seen. This is the default setting.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "The new project will open in the Compartments view, where the three compartments “Preprocessing” (red arrow 1), “Analysis” (red arrow 2) and “Postprocessing” (red arrow 3) will appear.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/download1/",
	"title": "Downloading: Step 1",
	"tags": [],
	"description": "",
	"content": "Navigate to Mange \u0026gt; Download more templates, which will contact our online template repository for newly available items.\n"
},
{
	"uri": "https://www.jipipe.org/faq/result-analysis/",
	"title": "Result analysis",
	"tags": [],
	"description": "Questions concerning the export and further analysis of results",
	"content": "Can I open a table in ImageJ instead of JIPipe or vice versa? Yes, and even more: Depending on the data type there are multiple options on displaying data available. Select the data in the result view or cache browser and click the \u0026ldquo;More\u0026rdquo; button at the bottom. JIPipe will even remember the last setting for you.\nCan I save data by their metadata? Yes, use the node Miscellaneous \u0026gt; Export data. It will export all incoming data into one or multiple folders and generates names based on metadata. If you have cached results, you can export the table via the same method as utilized by this node.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/running2/",
	"title": "Running the whole pipeline: Step 2",
	"tags": [],
	"description": "",
	"content": "Please choose an empty output directory or leave the default setting (temporary folder).\nProceed by clicking Run now.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/running3/",
	"title": "Running the whole pipeline: Step 3",
	"tags": [],
	"description": "",
	"content": "Please choose an empty output directory or leave the default setting (temporary folder).\nProceed by clicking Run now.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step4/",
	"title": "Step 4",
	"tags": [],
	"description": "",
	"content": "In order to now add parameters to the group, click on Add parameter reference (red arrow 1) and browse the new Add parameter window (red arrow 2).\nChose e.g. Annotate with path properties (red arrow 3) and select Annotate with size (red arrow 4), Annotate with type (red arrow 5) and Annotate with parent path (red arrow 6), and accept the selection (red arrow 7).\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "You now can browse through the results.\nDouble-click items to open them in JIPipe or ImageJ (depending on the data type).\nIf you want more information about the result browser, please visit the result browser documentation.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Now we build-in another macro node, this time we will only use the Phansalkar method, as this is judged to be the most successful thresholding method after examining the output of the first macro node. The new node (red arrow 1) was set up as the first one, the macro code (red arrow 2) will run this specific method only (red arrow 3).\nrun(\u0026quot;Auto Local Threshold\u0026quot;, \u0026quot;method=Phansalkar radius=5 parameter_1=0 parameter_2=0 white\u0026quot;)\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Run the node by clicking on the green arrowhead inside the node (red arrow), \u0026hellip;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Run the Annotate with image properties node (red arrow 1) and observe the cache (red arrow 2).\nThe annotations table in the cache browser now contains the image properties that were previously selected (red arrow 3 to 7).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Enter the same filtering formula for the 1-channel slot (red arrow 1).\nEasiest is to copy-paste the content of the Three-channel slot expression (red arrow 2) and change the channel number to 1 (red arrow 3).\nThe formulas now should be:\n Three channels: TO_NUMBER($\u0026quot;Image composite channel count\u0026quot;) == 3 1-channel: TO_NUMBER($\u0026quot;Image composite channel count\u0026quot;) == 1  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s assume that we need the ThresholdDiff annotation in an earlier step (the raw image) or even completely different \u0026ldquo;branch\u0026rdquo; of processed data. JIPipe provides a node to copy annotations between two data sets: Merge annotations.\nBegin by adding Merge annotations into the graph and navigate to the Examples tab. Here, load the example Merge annotations (2 inputs) for convenience. Alternatively, you can create the inputs yourself.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The results will appear in a new tab (red arrow 1) that will present the results (red arrow 2) that will show the origin of the outcome (red arrow 3) as Processing compartment and Find particles 2D node.\nThe outcome will contain the ROI table and the measurements, as expected for this node (red rectangle 4).\nThe opened UI is connected to a directory on the hard-drive that is located within the temporary directory as defined by your operating system (also see the tutorial how to change this directory). Opening a data item (double-click) will invoke the loading process and display the data within JIPipe.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Similarly to the project-wide cache browser tab, clearing the cache is also possible from this window, aiming either at all cache content (red arrow 2), or only at the outdated content (red arrow 3).\nCached data is outdated if its producing nodes (or their predecessors) were deleted or have different parameters compared to when the data was generated.\nFor example, if a predecessor Gaussian blur 2D node\u0026rsquo;s sigma value is changed, all successor node\u0026rsquo;s cached data is marked as outdated.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Go to the Preprocessing compartment by double-clicking the its node and locate the Preprocessing output node (red arrow 1).\nMove the node close to the rest of the nodes, click on the ➕ button to add a new input slot (red arrow 2). The input type should be an image, so use image as a search word (red arrow 3). The Image type will now be selected (red arrow 4) and the new slot will be given a name (red arrow 5).\nClick Add when the editing is done (red arrow 6).\nEach compartment contains a xyz output node that acts as interface to transfer data to other compartments. {{ /notice }}\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The Parameters tab (red arrow 1) exposes the settings, the most important of which (for this tutorial) are indicated by the red arrow 2 to 5:\n Calculate threshold based on ... allows to determine a ROI/mask from where the image threshold is calculated from (defaults to whole image) Method determines the thresholding algorithm (defaults to ImageJ\u0026rsquo;s default thresholding) Threshold annotation determines if generated masks should be annotated with the calculated threshold value (defaults to an annotation Threshold)  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Running the Export data table node now generates a directory next to the project file that follows the standardized JIPipe output format.\nThe actual data is contained in the data.csv file in the 0 directory (because it is the first row of the data table; red arrow 1). All other files contain the metadata.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Open the directory after the export. You see that the exporter stored the data into an appropriate format.\nYou can also clearly see the pattern [Annotation 1 name]=[Annotation 1 value] as determined by the expression.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "\u0026hellip; will add the new node, already connected to the previous one\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The resulting connection is symbolized by a color line connecting the two nodes (red arrow 1). This shows the dataflow between the nodes, the direction is indicated by the arrowhead at the bottom of the connecting line.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step6/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Run the new node as described earlier: click on the green arrow of the bottom node (red arrow 1) and choose one of the running modes (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Next navigate to the Node templates tab (red arrow 1) and drag the Split channels: three channels R, G, B order template (red arrow 2) onto the graph.\nConnect the newly created node to the output of Import images.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Connect the node (red arrow 1) to the ROI output of the Find particles 2D node to get the list (red arrow 2).\nConnect the Image input to the 1-channel output of the Preprocessing output node (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "These names can also be changed to something easier to remember, or more specific. In this case, we will call this the Main folder (red arrow 1), and we will turn off the Parent and Type annotations (red arrows 2, 3), as they are at this time unnecessary\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The file names also need to be annotated. Here we will use a simpler approach via the Add path to annotations node (red arrow 1); add this node via any of the ways we have seen before.\nRename the Generated annotations field to #Filename, to make it more specific (the default name of Dataset, which is very general). The # before the name indicates that this annotation is of primary importance, e.g., the results will be grouped based on annotations that are marked with # as especially important.\nJIPipe uses annotations marked with a # to find matching data if multiple inputs are present. For example, if two channels should be merged into a composite image, JIPipe would use the #-annotations to find the pairs of matching input images.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The Split channels node can be set up from the Parameters menu.\nBy repeating the red channel addition for green and blue, we end up with the necessary three-channel output (red arrows 1, 2, 3). The output channels are assigned to those of the incoming image, starting the channel counting at zero (red arrows 4, 5, 6). The new channel indices and names are added to the annotation system (red arrows 7, 8).\nPre-made examples for 2-channel and 3-channel splitting are available in the Examples tab.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "\u0026hellip; and run the project as described before (red arrows 1 and 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Similarly, the Measurement table (red arrow 1) can be opened in a new window (red arrow 2) by double-clicking. The measured parameters are the same as provided in ImageJ (red rectangle 3), and we can also observe the annotations (red rectangle 4).\n\rMany interfaces that can be opened by double-clicking entries in the cache browser allow to update the cache directly within the interface via the Update cache button. By this way, you can track a specific result of interest while testing different parameters.\nYou can use the 📌 button to pin the window to the top.\n\rThe Annotations sidebar can be hidden by clicking the button next to the 📌.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Add the Basic blob finder template to the UI (red arrow 1) and observe the Parameters tab (red arrow 2).\nThe exposed parameter of the group node are indicated here (red rectangle 3), including the particle size and circularity ranges, the thresholding method and the gaussian smoothing factor.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Guidance for these levels can be gained from examining the probability map and identifying the typical levels at the image features of interest.\nIn the Cache browser (red arrow 1) choose the Probabilities data slot (red arrow 2) and examine the outcome (red rectangle 3). Open an item of interest by double-clicking it and use the mouse pointer to observe the values.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Cellpose training requires label images or masks.\nThe can be created directly from ROI, for example via the node Convert ROI to mask, given the input image as reference (red arrow 1).\nThe generated mask will be dilated before being used for the Cellpose training (red arrow 2). The dilation serves the purpose of adding environment to the manual annotations, which should help the learning process (red arrows 3-5).\nSetting the Radius parameter (red arrow 4) to various values may help to optimize the learning process.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "In order to use the new group node, we will connect it to the nodes preceding and proceeding the individual file reading nodes. Select the Split channels node (red arrow 1) and duplicate it (red arrow 2).\nHere we opt to create a branching path instead of replacing the existing nodes. You are completely free to replace nodes with groups or implement a branching how you see fit.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "To add the template node into the pipeline, grab it with the mouse (red arrow 1) with the left button down, and drag it onto the GUI (red arrow 2).\nIt is also possible to select and add multiple nodes from the template list and drag them to the project area; use SHIFT+Left-click or Ctrl+Left-click to select multiple nodes from the template list.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "Click on Add (red arrow 1) to add a new row ( = parameter set), which will add the first thresholding method (Default) of ImageJ to the parameter list (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "In the ROI menu (red arrow 1) click on Selection (red arrow 2) and observe the list of the four new ROIs (line 3). Click on Measure (red arrow 4) to create the per-ROI analysis in a separate window (red arrow 5). The measurements are according to the ImageJ list of available parameters (red line 6).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "By double-clicking on the Analysis node, or clicking on the Analysis tab, the Analysis compartment will open. Right now it will be empty except for the output node, which is a standard unit in every Compartment.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The three Compartments will be connected in their logical order.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/download2/",
	"title": "Downloading: Step 2",
	"tags": [],
	"description": "",
	"content": "Please select the templates that will be downloaded.\nProceed by clicking Download selected templates.\nWe currently made only a small selection of templates available that are related to our tutorials. The list will be expanded in the future.\n\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/running4/",
	"title": "Running the whole pipeline: Step 4",
	"tags": [],
	"description": "",
	"content": "You now can browse through the generated results.\nDouble-click items to open them in JIPipe or ImageJ (depending on the data type).\nIf you want more information about the result browser, please visit the result browser documentation.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step5/",
	"title": "Step 5",
	"tags": [],
	"description": "",
	"content": "The newly added exposed parameters are now visible in the Import image node (red arrow 1) Parameters menu (red arrow 2), where all three exposed parameters (red arrows 3, 4, 5) are now adjustable, without having to open the group graph. Direct editing of the nodes inside the group is still possible via opening the content in a new tab, as show before.\nIf you obtained the group node from a node template, re-create the template from the modified group node, as changes are not automatically stored inside templates.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "After running the particle finder node (red arrow 1), the local thresholding method finds 50 blobs (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "\u0026hellip; and then selecting one of the top two options Update cache or Cache intermediate results.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Now we will filter the incoming images based on image properties. Since the next node will be a Split channel operation, we will need to limit our processing to images with three channels. For this we will use an annotations-based filter node.\nDo a search in the upper search bar (red arrow 2) for filters and annotations. The first hit is an example of the node that we need (red arrow 3), this will provide an example of the syntax for filtering.\nThe Split \u0026amp; filter by annotations allows to filter the incoming data by the values of their annotation columns. For example, if you provide multiple images that are annotated with the number of channels, you can setup the node to only output the images with three channels.\nThe node has a configurable number of outputs, each linked to a different filter. This allows to use filtering to split the incoming data into multiple pipeline branches, e.g., into a branch for three channels and one for four channels.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the Split \u0026amp; filter by annotations node and observe the Cache browser (red arrow 1).\nFrom the Data slot selector (red arrow 2) choose All outputs (red arrow 3) to see both the Three-channel (red arrow 4) and 1-channel (red arrow 5) outputs.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Connect the Set/Edit annotations output to one of the Merge annotations inputs, and the Generate from math expression output to the other.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The last menu (red arrow 1) item Show intermediate results (red arrow 2) performs similarly to the previous option (Run \u0026amp; show results), but presents the results of the intermediate nodes as well as explained by the pop-up comment (red arrow 3, red line 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Exporting the cache and its metadata can also be carried out via simple options.\nUse the Import/Export tab (red arrow 1), choose e.g., the CSV/Excel option (red arrow 2) which will refer to the metadata (red arrow 3) and it will export the text annotations as a table (red arrow 4).\nExporting the metadata will yield a table with all information displayed in the cache browser table, excluding the underlying data (e.g., images, ROIs, \u0026hellip;).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Now the new input slot of the Preprocessing output node will appear (red arrow 1).\nRepeat the same process for the next three input slots, one each for the green and blue fluorescence channel and for the single channel of the blob image (red arrows 2 to 4).\nPlease ensure that the following slots are present in the Preprocessing output node:\n Red_3channel (type should be Image) Green_3channel (type should be Image) Blue_3channel (type should be Image) 1-channel (type should be Image)  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The most important parameter to test is the thresholding method (Method, red arrow 1), which is set to Default (red arrow 2) when creating a new node.\nThe menu allows to choose from the wide range of ImageJ-based methods (red line 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "A benefit of the machine-readable JIPipe format is that all contained data and metadata can be conveniently restored by JIPipe.\nOpen the Tutorial_B22-1_Part1.jip project that comes pre-loaded with nodes that cover various import scenarios:\nThe node Import data table (archive) (red rectangle 1) can import a ZIP file generated by the cache browsers' ZIP-exporter function.\nIf the data is stored inside a directory (or if you just extract the ZIP), use the Import data table (directory) node (red rectangle 2 and 3). In the example pipeline, we import both the All outputs export generated by the cache browser, and the AVG-Density output that was exported via the node.\nYou can easily identify valid ZIP files or directories for the import by checking whether a data-table.json file is located directly within the directory or ZIP file.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "JIPipe offers various nodes for the export of data that are even outside the scope of the exporter implemented in the cache browser.\nYou can find them in the Export menu or via the search bar.\nProceed to add and connect the following nodes:\n Add Export data and connect it to AVG density Add Export image and connect it to Overlay image Add Export table as XLSX and connect it to All measurements Add Export ROI and connect it to ROI  In the following steps, we will show how to configure these nodes for the export into a single directory.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the new node as described earlier: click on the green arrow of the bottom node (red arrow 1) and choose one of the running modes (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the new node as described earlier: click on the green arrow of the bottom node (red arrow 1) and choose one of the running modes (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step7/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The Cache browser on the right (red arrow 1) will now show the image after having been read into the project\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/step8/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "As described before, double-clicking on the cache element (red arrow 1) will open it in a viewer (red arrow 2)\nBasic information about the image (resolution, bit depth, etc.) can be found in the toolbar of the image viewer and within the \u0026ldquo;String representation\u0026rdquo; column in the cache browser.\n\rThe operations for File and Import image are different nodes, so you have the possibility to apply additional file manipulation operations (e.g., extracting information from file names).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "We will now apply a look-up table (LUT) to one of the channels.\nTo do this, use the search bar (red arrow 1) to add the following nodes:\n Set LUT (color map) (red arrow 3) Apply LUT (red arrow 2)  Connect the input of Set LUT (color map) node to the Red output of Split channels: three channels R, G, B order.\nThen connect the output of Set LUT (color map) to the input of Apply LUT\nSet LUT (color map) sets the image LUT to a predefined color map. There are also alternative options that generate LUT via two color parameters or apply the LUT from an 1x256 image.\n\rApply LUT renders an image with a LUT to an RGB image.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and observe the cached result (red arrow 2) in a viewer (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the annotation node with the Cache intermediate results option (red arrow 1) and observe the cache (red arrow 2). The newly added annotations now appear in purple-labelled columns (red arrows 3, 4, 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and check the Cache (red arrow 2). Now the #Filename annotation (red arrow 3) is part of the image database.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Run the Split channels node (red arrow 1) and observe the cache (red arrow 2).\nThe slot name (red arrow 3), data type (red arrow 4) and channel index (red arrow 5) are now shown as annotations, in addition to the three images on grey scale (red arrow 6).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Observe the outcome by opening the resulting blurred images by double-clicking on the cache element, as shown before. Click on Open in ImageJ (red arrow 1) \u0026hellip;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The table viewer (red arrow 1) provides additional functionalities (red rectangle), including saving the table as CSV or XLSX, applying a selection of functions, sending data to and from ImageJ results, etc.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "In order to observe the quality of the segmentation, add a Convert ROI to RGB node (red arrow 1), connect it to the ROI and Image outputs of the Import images and Basic blob finder nodes (red arrows 2 and 3), and run it (red arrow 4).\nIn the Cache browser (red arrow 5), observe the entry (red arrow 6) and the full image (red arrow 7).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "By examining the ROI output, it is evident that the results need to be filtered in order to select the round main object.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "We continue with assigning the annotation masks to the actual images.\nIn preparation for this, we first correct the image for illumination inhomogeneities via Illumination correction 2D (red arrow 1), where we use 20 px radius for both Sigma (X) and Sigma (Y) in underlying Gaussian filter.\nBoth the image and the annotations are scaled (red arrows 2 and 3) with a factor of 2.5 (red arrow 4 and 5):\n X axis set to width * 2.5 Y axis set to height * 2.5  The raw image and the labels are now merged together via a data annotations.\nData annotations are a special type of annotation that contain JIPipe data instead of text. Data annotations are managed separately from the more commonly used text annotations and thus can share column names.\n\rAnnotate with data is utilized to annotate each raw image with its corresponding mask (red arrow 6). This will generate a new column next to the text annotations that can be read by the Cellpose training node.\nFinally, connect the annotated data to a node Split data randomly (percentage).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Move the duplicated node (red arrow 1) below the group node and connect them (red arrow 2). Now select the Folder list node (red arrow 3) and connect it to the group nodes (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Observer the cache (red arrow 1). The outcome is the same as it was after executing the individual nodes (red line 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The newly added template (red arrow 1) will now appear in the pipeline area (red arrow 2).\nNow it can be connected to other nodes, as any regular node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "Repeat the process (red arrow 1) thus adding a second parameter set.\nSelect the 2nd entry (red arrow 2) and edit it (red arrow 3). Choose the next method (Huang) (red arrow 4) to change the entry to this value.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "The created ROIs can be exported directly to ImageJ (red arrow 1), imported from ImageJ’s ROI Manager (red arrow 2), and the results can be plotted (red arrow 3))\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "You can move the output node lower in the GUII and use the white space (outlined here in red for visualization purposes) to position the actual JIPipe nodes.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step6/",
	"title": "Step 6",
	"tags": [],
	"description": "",
	"content": "For example, the Analysis compartment will contain its own output node, as well as the output node from the Preprocessing compartment.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/download3/",
	"title": "Downloading: Step 3",
	"tags": [],
	"description": "",
	"content": "You will now have two options that determine where the loaded templates will be stored:\n Global storage: the newly imported templates will be available in whole JIPipe (all projects) Project storage: the templates will be directly stored inside the project and thus only available within the project itself  Choose the option that is most convenient for you.\nYou can also move templates from/to global store into/from project storage via the Manage menu.\n\r"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/caching1/",
	"title": "Running/caching nodes: Step 1",
	"tags": [],
	"description": "",
	"content": "To run a specific node or compartment, click the  button that is located on the node. Afterwards, select one of the options:\n Update cache will run the pipeline up to the selected node and store only the results of the selected node Cache intermediate results will run the pipeline up to the selected node, but also store all results of all predecessors  Choose the option that is most convenient for you.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The quality of the segmentation can be observed by adding a visualization node as shown before (red arrow 1), where the cache entry (red arrow 2) indicates a good match between the raw image and the segmentation when observed in a viewer (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The result will be shown on the right side, under the Cache browser tab (red arrow 1), where the newly loaded file name and full path will be listed (red arrow 2)\nThe cache stores the results of a pipeline/node in memory. Please note that to work with large images, you require a computer with sufficient RAM space.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Add the new node next to the Annotate with image properties (red arrow 1) node and connect them (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "If we choose the 1-channel output slot, e.g. (red arrow 1), we will only see the content of this output slot (red arrow 2), which comes from the blobs image (red arrow 3).\n👉 Via such Split \u0026amp; filter by annotation nodes we can separate the analysis of various image types without having to write a full pipeline for each type of image. Moreover, we can add all the folders that need to be analyzed into the workflow, and do the separation of the various images later, based on annotations. Here not only the image channel number can be used for filtering, but any image property, file name structure, folder or subfolder name, or any other variable or parameter that is added to the annotations table.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Run the Merge annotations node with Update cache and observe that the raw input image was annotated with information generated at a later step.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The entire project-wide cache can be viewed and managed via the Tools menu (red arrow 1), using the Cache browser option (red arrow 2).\nSo far, we only used the Cache browser tab that is associated to a specific node. The global Cache browser option is useful for browsing through all data that has been cached.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Another Import/Export option (red arrow 1) is saving a ZIP file (red arrow 2) of the entire dataset (red arrow 3).\nThe generated ZIP file (or directory if the other option is chosen) will contain the displayed table, including its metadata and data in a standardized JIPipe format.\nWhile the format can be browsed by humans, it is mainly designed for reading via a program. The export of data into a format more suitable for humans will be handled in a later tutorial.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Connect the corresponding outputs from the two nodes above (red arrows 1-4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Run the Auto threshold 2D node (red arrow 1) and observe the Cache browser (red arrow 2), where the thresholded image is now shown (red arrow 3). After double-clicking the cache entry (red arrow 3), the image viewer (red arrow 4) allows to display the binary image.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "We begin with the Export data node. It encapsulates the same functionality as the cache browser\u0026rsquo;s data exporter.\nHere we will export the AVG density table into a directory ExampleExports/ViaNodes relative to the project file. Begin by selecting the node and changing the following parameters:\n Output directory to ExampleExports/ViaNodes (red arrow 1) Enable Output relative to project directory. If this is not done, the files will be stored in a temporary directory (red arrow 2)  Output relative to project directory only works if you loaded the project from a *.jip file or have saved it at least once.\n\rIt is common that the type of the output is stored within the filename. To to this in JIPipe, modify the File name property as follows:\n\u0026quot;density_\u0026quot; + #Filename\rThe exporter will use the expression to determine the filename of each exported data item. As the images are annotated with a #Filename annotation, we can combine it with a custom text \u0026quot;density_\u0026quot; to generate files with that pattern.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The Cache browser on the right (red arrow 1) will now show the image after having been read into the project\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The Cache browser on the right (red arrow 1) will now show the image after having been read into the project\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Select the Set LUT (color map) node (red arrow 1) and go to the Parameters tab (red arrow 2). Proceed to and activate the Color map field (red arrow 3).\nIn the Select value window (red arrow 4), chose the desired look-up table, e.g. Viridis (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Plot the Mean values vs. the Area using the Table’s plot function, as shown in a tutorial before.\nThe red arrows show the settings that were changed from the default values view the plot window.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Look for a node to now resolve the subfolder structure by utilizing the matching nodes search tool (red arrow 1), and use a search term for subfolders (red arrow 2).\nThe list will start with the node that we need (red arrow 3); observe that the node is a Create option (red arrow 4); if there were existing nodes of the same type in the pipeline, they would also show up in this search list.\nNow click on the green arrowhead (red arrow 5) to add the new node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "We can now read in the images. Look for compatible nodes to continue the pipeline (red arrow 1) and notice that the second hit is already what we need, even without searching with a keyword (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "\u0026hellip; to have the images saved in ImageJ and compare them\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "In the table viewer (red arrow 1) it is also possible to plot column content. Click on the Plot button (red arrow 2) and choose e.g., the Histogram option (red arrow 3) .\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Look for Table processing nodes in the Tables menu (red arrow 1) and select the node Apply expression per row (red arrow 2).\nConnect the node to the Measurements output of the Simple blob finder.\nThe Apply expression per row node applies a custom mathematical expression for each row of the input table. The result of the expression is written into a new or existing column of the same row.\nThe mathematical expression has access to the annotations of the incoming table, as well as the values of each column within the same row.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "This task will be carried out by adding a Filter ROI by statistics node (red arrow 1), connecting it to the ROI output of the Cellpose (2.x) node (red arrow 2), and setting the roundness threshold to 0.7 (red arrow 3):\nRound \u0026gt; 0.7\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Use the slot editing capabilities of Split data randomly (percentage) to create the following output slots of type Image:\n Train Validate Test  Then configure the percentages in the Parameters tab and the Weights category (red rectangle 1) as following:\n Train set to 80 Validate set to 10 Test set to 10  "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Run the Split channels node (red arrows 1 and 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "However, the nodes inside the group do not have their cache saved! When examining the group tab, the content reveals a node for the group input (red arrow 1), the group output (red arrow 2), but selecting the Import image node, e.g., (red arrow 3) will not find a Cache tab (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "If the template node needs to be modified, the updated node must to be saved again as a template.\nWhen using the same name for saving, it is best to delete the outdated node from the list first. This can be done by selecting the outdated node from the list (red arrow 1), right-click on the node and select the Delete option (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "If you want more entries, repeat the process until all the desired thresholding methods are n the parameters list (red rectangle 1).\nAlternatively, you can let the editor generate all values automatically:\n Select one value of the column (note: there must be at least one parameter set) Navigate to Generate and choose a generator (for the Method parameter there is only one)  "
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "Exporting the content of the image viewer is possible by clicking on the photo button (red arrow 1), and selecting the saving of the displayed image in a TIFF format (red arrow 3), or as-displayed (red arrow 2) in a PNG/JPEG/BMP format (red arrow 4), or by placing it in the system memory for copy-pasting into an image editor (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/step7/",
	"title": "Step 7",
	"tags": [],
	"description": "",
	"content": "The output node can be moved lower in the GUII and use the white space (outlined here in red for visualization purposes) to position the actual JIPipe nodes.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/download4/",
	"title": "Downloading: Step 4",
	"tags": [],
	"description": "",
	"content": "In this example, the option Project storage was chosen.\nYou can now see the newly added templates and use them by dragging them into the pipeline.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/caching2/",
	"title": "Running/caching nodes: Step 2",
	"tags": [],
	"description": "",
	"content": "You now can browse through the generated results.\nDouble-click items to open them in JIPipe or ImageJ (depending on the data type).\nIf you want more information about the cache browser, please visit the tutorials.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "By double-clicking on the cache entry row (red arrow 1), the newly loaded image will be opened in a dedicated viewer (red arrow 2)\nThe File node packages the file path into a JIPipe-managed object called File. If you double-click a File/Folder/Path, it will be opened using your system\u0026rsquo;s standard behavior.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Go to the Parameters tab and examine the filter expression in the category Filters (red arrow 1).\nThe figure shows an expression (by default the expression is empty)\nTO_NUMBER($\u0026quot;Image composite channel count\u0026quot;) == 3\rThis text is called an expression and determines the filter conditions that determine wether an input data item is pass through the output.\nIn the following steps, we will briefly explain the functionality behind the expression.\nThe settings within the Filters category correspond to each output of the Split \u0026amp; filter by annotations node.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Now let\u0026rsquo;s assume that we do not need Threshold and MeanIntensity again. These can be removed via dedicated nodes.\nAdd a node Remove annotation and configure its Removed annotations parameter as following:\nkey == \u0026quot;Threshold\u0026quot; OR key == \u0026quot;MeanIntensity\u0026quot;\rThis will remove all annotations that either have the name/key Threshold or MeanIntensity.\n\rRemove annotation executes the expression for each annotation to determine if it should be deleted.\n\rYou can also remove annotations by their value or implement even more complex filter expressions.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "The cache browser will open in a new tab of the UI (red arrow 1), where the hierarchy of compartments, nodes, and outputs (red arrow 2 and 3) will appear on the left side. For example, you might also find the outputs of the Processing compartment (red arrow 4).\nThe cache content appears on the right side of the UI, containing all the results arranged in columns (red rectangle 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "The Import/Export menu (red arrow 1) also allows the importing/exporting of the entire cache of the selected node (red arrow 2) to a selected/created directory (red arrow 3).\nThe difference between exporting the current table (as indicated by the Table label) and the whole node cache is that the full-cache options store all outputs of the node, while the Table-functions exclude all non-selected outputs.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Now the Preprocessing compartment will emit these images as output.\nThe connection to the Processing compartment will absorb these images as Input. This can be observed by double-clicking on the Processing compartment (red arrow 1) in the Compartments tab (red arrow 2), to reveal the content inside the compartment node (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "The result is adequate, and it can be linked to the Processing compartment output.\nLocate the Processing output node and move it close to the thresholding node (red arrow 1).\nAdd a new input slot to the output node (red arrow 2) by searching for image in the search bar (red arrow 3) and selecting the general Image type (red arrow 4). Name the slot Binary 1-channel or any other name of your liking (red arrow 5) and add it to the node (red arrow 6).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Run the Export data node via Update cache.\nNow navigate to the ExampleExports/ViaNodes directory that should have appeared next to the project file. It contains a file density_blobs.csv according to the pattern defined by the File name expression:\n \u0026quot;density_\u0026quot; plus #Filename, where #Filename is blobs, because the table was annotated with the original filename (blobs)\n "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "As described before, double-clicking on the cache element (red arrow 1) will open it in a viewer (red arrow 2)\nBasic information about the image (resolution, bit depth, etc.) can be found in the toolbar of the image viewer and within the \u0026ldquo;String representation\u0026rdquo; column in the cache browser.\n\rThe operations for File and Import image are different nodes, so you have the possibility to apply additional file manipulation operations (e.g., extracting information from file names).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "As described before, double-clicking on the cache element (red arrow 1) will open it in a viewer (red arrow 2)\nBasic information about the image (resolution, bit depth, etc.) can be found in the toolbar of the image viewer and within the \u0026ldquo;String representation\u0026rdquo; column in the cache browser.\n\rThe operations for File and Import image are different nodes, so you have the possibility to apply additional file manipulation operations (e.g., extracting information from file names).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "To change the pixel size and other physical dimensions of an image, search for nodes with the keyword physical (red arrow 1). Select the Set physical dimensions node (red arrow 2).\nThe Set physical dimensions allows to set the physical dimensions of the image pixels via parameters. Alternative nodes can set these values from annotations or via expressions.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "From this plot it appears that areas below 150 and above 700 are rare. We can ignore these values by filtering the ROIs.\nLook for such node via the top menu and navigate to ROI (red arrow 1), then Filter (red arrow 2), and choose Filter ROI by statistics (red arrow 3).\nFilter ROI by statistics allows to filter a ROI list via custom mathematical expressions. ImageJ measurements and annotations are both available.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Run the new node (red arrow 1) and observe the cache (red arrow 2). Notice that the cache only indicates two subfolders (red arrows 3 and 4), whereas the data2 subfolder should have two of its own subfolders (check this in the downloaded data folder in the file system).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Add the node (red arrow 1) and run it (red arrow 2). In the cache (red arrow 3) we can now observe all the images (red line 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Go to the Series tab (red arrow 1) to select the source data. The name of the data series can be set (red arrow 2). Select e.g., the Area column (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Before editing the table, find out the names of the measured parameters:\nopen the Measurements cache results of the Basic blob finder (red arrow 1), double-click on the cache entry (rectangle 2) and review the column names in the table viewer (rectangle 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "We will now shape the identified droplet ROI by converting the ROIs to a mask (red arrow 1) by applying a Morphological operation 2D (red arrow 2) to open the object (red arrow 3) with a Radius of 10 px (red arrow 4), using a Disk-shaped kernel (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "The Cellpose training (2.x) node is then added (red arrow 1) and connected to the training (red arrow 2) and validation (red arrow 3) output of the Split data randomly (percentage) node.\nThe number of training epochs (red arrow 4) and the mean diameter of the object that we seek (red arrow 5) are the most important setting here.\nMake sure to activate the GPU if the PC has one (red arrow 6 and 7) to expedite the learning process.\nFinally, the training setting can be easily adjusted in the UI (red rectangle 8).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Observer the cache (red arrow 1). The outcome is the same as it was after executing the individual nodes (red line 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "\rConsequently, Groups should only be generated, when the selection of nodes that will be unified into a group have already been tested and debugged thoroughly!\n\rShould changing and testing the individual nodes of a group become necessary, the member nodes of the group have to be copied into the main pipeline (red line 1) and tested there the traditional way.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "The template node(s) can be exported and imported between projects, or between various JIPipe instances; this way the nodes can be shared easy, e.g. during teaching sessions.\nAs an example, select two nodes from the list (red arrow 1 and 2), click on the Manage button (red arrow 3) and select Export selection to file (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step8/",
	"title": "Step 8",
	"tags": [],
	"description": "",
	"content": "Choose the parameter values that should be added as new parameter set.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "To save the project, go to the Project tab (red arrow 1) and select the saving mode, e.g. Save As (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Let’s examine how this expression was arrived at. The parameter that we need to filter for is the channel number.\nThe exact name can be read out from the Annotate by image properties node (red arrow 1).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Run the Remove annotation node with Update cache. The unwanted columns are now removed.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The exported cache contains a machine-readable and heavily structured design of all results, which can be navigated to automatically by following the pop-up link (red arrow 1).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The nodes inside the Processing compartment contain the output node from Preprocessing (red arrow 1), and the output node of the Processing compartment (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The new input slot is now available on the output node (red arrow 1). Connect it to the output slot of the thresholding node to expose the binary image as output of this node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Select the Export image node and navigate to its parameters. Unlike the generic data exporter Export data, it allows you to change the output type of the generated file from TIFF to PNG or other formats.\nAgain, set the Output directory to ExampleExports/ViaNodes with Output relative to project directory enabled.\nThe filename expression set to\n\u0026quot;overlay_\u0026quot; + #Filename\rThis would yield a file that is for example named overlay_blobs.png.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Drag the new node to the UI (red arrow 1) and connect it to, e.g., the Green channel of the Split channels node (red arrow 2).\nIn the Parameters menu (red arrow 3), enable the physical dimensions that need to be changed (red arrows 4, 5).\nFrom the drop-down list (red arrow 6) choose the proper dimensions (red arrows 7, 8). The values can be entered in the neighboring fields (red arrows 9, 10).\nFor this example, set X and Y pixel dimensions both to 1.0 micrometer (1 µm).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Add the node to the UI (red arrow 1) and connect it to the ROI output slot of Find particles (red arrow 2), and to the 1-channel output slot of the Preprocessing output node (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "To fix this issue, go back to the Parameters tab (red arrow 1) of the node and activate the checkbox Recursive (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Double click on one of the images (red arrow 1) to observe it in a separate viewer window (red arrow 2)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The resulting histogram will appear, according to the default settings of its appearance.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Let us calculate the ratio between the mean value and the area.\nSelect the Apply expression per row node (red arrow 1), open the Parameters tab and apply the following changes:\nIn parameter Expressions set the value of Expression to Mean / Area.\nMean and Area reference the mean and area column values of the currently processed row. Always keep in mind that the Expression is applied per row.\n\rIn parameter Expressions set the value of Column name to Density.\nThe meaning of this instruction is that the calculated result of Mean / Area will be written into a column Density in the output table.\nIf the column does not exist, the node will automatically create a new one.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The next Morphological operation 2D (red arrow 1) will implement an erosion (red arrow 2) with a 1-pixel (red arrow 3) disk kernel (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "The trained model can be saved from the cache browser (see Tutorial), and it can be used directly to visualize the segmentation quality using the test dataset.\nFor the latter, use the output model of the training node (red arrow 1) to guide a Cellpose (2.x) node (red arrow 2) via connecting the newly trained model to the corresponding input of the Cellpose (2.x) node (red arrow 3).\nThe data input of the Cellpose (2.x) node (red arrow 4) will come from the test output of the random data splitter (red arrow 5).\nIn the Cellpose (2.x) node parameters, set the diameter to the same value as the model (red rectangle 6).\nVery importantly, set the Model to Custom (red arrow 7, red rectangle) to have the Cellpose node accept an outside model connection.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "After having run the Split channels node (red arrow 1), observing the cache will show the resulting three channels (red line 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "In the Export templates dialog (red arrow 1) navigate to the target folder (red arrow 2) and choose a name for the exported file (red arrow 3). The saved file is in JSON format (red arrow 4).\nIn this case, the saved templates will be found in the tutorial’s folder that can be explored after download.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step9/",
	"title": "Step 9",
	"tags": [],
	"description": "",
	"content": "Notice how now all thresholding options are setup.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/",
	"title": "Basic",
	"tags": [],
	"description": "Tutorials that explain the basic features of JIPipe 👉 Beginners start here",
	"content": "1.74.x\u0026#43;\r\rThe guides were written for JIPipe version 1.74.0 or newer\r\r Here you can find a list of tutorials that explain the basic features of JIPipe.\n Adding and running nodes\nExplains how to add new nodes into a project and use them to load an image file. Afterwards, the project is saved.\n\r Importing an image I\nExplains how to add new nodes via the algorithm finder into a project and use them to import an image file.\n\r Importing an image II\nExplains how to add new nodes via the search bar into a project and use them to import an image file.\n\r Importing an image III\nExplains how to add new nodes via the node list into a project and use them to import an image file.\n\r Changing node parameters\nProvides instructions on how to change the parameters of an algorithm.\n\r Importing a directory of images I\nExplains how to use filesystem nodes to automatically detect and load all images in a directory.\n\r Importing a directory of images II\nExplains how to use filesystem nodes to automatically detect and load all images in a hierarchy of directories.\n\r Handling multi-channel images I\nExplains the process of splitting channels, RGB conversion, channel coloring, and adding comments with image information.\n\r Comment nodes\nExplains how to add comments with additional information into a pipeline\n\r Annotations I: Filtering\nExplains the processes of annotating with image properties, and filtering based on annotations\n\r Annotations II: Branching\nExplains further detail about filtering by annotations, including adding and editing slots, and implementing branching processing pathways\n\r Annotations III: Modifying and merging\nExplains how to modify the set of annotations\n\r Compartments I: Creating and connecting\nExplains how to segment pipelines into compartments and transfer data between them\n\r Compartments II: Basic image segmentation\nExplains how to apply basic image segmentation on a compartmentalized pipeline\n\r Quantification and plotting\nExplains the particle finder, functions for measuring particles, handling of result tables, and simple data plotting\n\r Cache I: Generating and viewing\nIllustrates how to cache node results to the memory and how to browse through the generated data\n\r Cache II: Managing and exporting\nExplains how to manage the cache and export cached data into the standard JIPipe format. \r Image properties and LUT\nExplains how to read and modify physical image dimensions. Additionally, this tutorial explains how to apply look-up tables\n\r ROI processing\nExplains the basics of ROI processing in JIPipe.\n\r Table processing\nIllustrates how to use some table processing capabilities included in JIPipe\n\r Annotating data with measurements\nExplains how to annotate data with measurements for the usage in more advanced pipelines with filters and adaptive pipelines\n\r Exporting data I: Machine-readable\nExplains how to export data into a machine-readable formats\n\r Exporting data II: Human-readable\nExplains how to export data into a human-readable formats\n\r\r"
},
{
	"uri": "https://www.jipipe.org/download/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " Version 1.77.x (current version)\nChangelog of JIPipe version 1.77.x\n\r Version 1.76.x\nChangelog of JIPipe version 1.76.x\n\r Version 1.75.x\nChangelog of JIPipe version 1.75.x\n\r Version 1.75.0 \nChangelog of JIPipe version 1.75.0\n\r Version 1.74.0\nChangelog of JIPipe version 1.74.0 (Overhaul 1)\n\r Version 1.73.0\nChangelog of JIPipe version 1.73.0 (Weka update)\n\r Version 1.72.x\nChangelog of JIPipe version 1.72.0 and its patches\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-data-api/data-table/",
	"title": "Data table",
	"tags": [],
	"description": "Organizes data into an annotated table",
	"content": "The data table structure is the smallest unit of the data API. Its purpose is to organize data of any supported kind into an annotated table and store all required metadata to recover the data from the file system.\nA data table is located in a directory within the file system and contains following parts:\n   Element Description     data-table.json Metadata file for this data table.   \u0026lt;data row index\u0026gt; Stores the main data for this row. Names have following RegEx format: \\\\d+ (e.g., 0, 1, 52). Number corresponds to the row in the data table.   data-annotations/\u0026lt;data row index\u0026gt;/\u0026lt;data annotation column name\u0026gt; Used to store the data annotation \u0026lt;data annotation column name\u0026gt; for the table row \u0026lt;data row index\u0026gt;. \u0026lt;data annotation column name\u0026gt; directories contain data standard. Please note that data annotation names are not necessarily file system compatible. Use string manipulation methods to generate approximations if required!    Here you see an example of such a folder that stores three data rows. Here we assume that the stored data types are imagej-imgplus (ImageJ images).\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rRoot[\"/\"] -- DataTable[\"data-table.json\"];\rRoot -- R0[\"0/\"];\rRoot -- R1[\"1/\"];\rRoot -- R2[\"2/\"];\rR0 -- R0Img[\"data.tif\"];\rR1 -- R1Img[\"data.tif\"];\rR2 -- R2Img[\"data.tif\"];\rRoot -- DataAnnotations[\"data-annotations\"];\rDataAnnotations -- DR0[\"0/\"];\rDataAnnotations -- DR1[\"1/\"];\rDataAnnotations -- DR2[\"2/\"];\rDR0 -- Label0[\"Label\"];\rDR1 -- Label1[\"Label\"];\rDR2 -- Label2[\"Label\"];\rLabel0 -- Label0Img[\"data.tif\"];\rLabel1 -- Label1Img[\"data.tif\"];\rLabel2 -- Label2Img[\"data.tif\"];\r data-table.json Here you will find the structure of the data-table.json file. You also can access the document in JSON Schema format: data-table.schema.json. Please note that the description for a data table row (data-table-row.schema.json) can be found below.\nHere is an example data table that stores FFT images:\n{ \u0026#34;node-id\u0026#34; : \u0026#34;ij1-fft-forward2d\u0026#34;, \u0026#34;slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;internal-path\u0026#34; : \u0026#34;/fastdata/projects/JIPipe/Output\u0026#34;, \u0026#34;rows\u0026#34; : [ { \u0026#34;index\u0026#34; : 0, \u0026#34;annotations\u0026#34; : [ ], \u0026#34;data-annotations\u0026#34;: [ ], \u0026#34;true-data-type\u0026#34; : \u0026#34;imagej-imgplus-fft-2d\u0026#34; } ], \u0026#34;data-type\u0026#34; : \u0026#34;imagej-imgplus-fft-2d\u0026#34; } Data table \rDefines a data table row\r\r\rnode-id:\r\rstring\r\r\r\r\r\rThe node type ID that generated the data. Optional.\r\r\rslot:\r\rstring\r\r\r\r\r\rThe slot name that generated the data. Optional.\r\r\rrows:\r\robject[]\r\r\r\r\r\r\rThe data row items\rSee data-table-row\r\r\r\r\r\r\r\rdata-type:\r\rstring\r\r\r\r\r\r\rThe data type ID behind the row\r\r\r\r\r\rData table row \rDefines a data table row\r\r\rid:\r\rnumber\r\r\r\r\r\rRow index within the data table\r\r\rannotations:\r\robject[]\r\r\r\r\r\r\rAnnotations attached to the data row\rSee annotation\r\r\r\r\r\r\r\rdata-annotations:\r\robject[]\r\r\r\r\r\rData annotations attached to the data row\rSee data-annotation\r\r\r\r\r\r\r\rtrue-data-type:\r\rstring\r\r\r\r\r\r\rThe true (not the slot) data type ID behind the row\r\r\r\r\r\rAnnotation \rAn annotation\r\r\rname:\r\rstring\r\r\r\r\r\r\rName of the annotation\r\r\rvalue:\r\rstring\r\r\r\r\r\r\rValue of the annotation\r\r\r\r\r\rData annotation \rA data annotation\r\r\rname:\r\rstring\r\r\r\r\r\r\rName of the annotation\r\r\rtrue-data-type:\r\rstring\r\r\r\r\r\r\rData type ID of the stored data annotation\r\r\rrow-storage-folder:\r\rstring\r\r\r\r\r\r\rRelative path to the current data table containing the data annotation data row\r\r\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/data-type/result-ui/",
	"title": "Displaying data",
	"tags": [],
	"description": "",
	"content": "After processing, users should be able to continue processing the data from within JIPipe. The data instances are cleared from memory after processing, meaning that the data needs to be loaded from its output folder after processing.\nAn user interface is shown when a user select a row in the results table. There are two ways to modify the user interface:\n Registering additional operations that will be available to users (recommended) Replacing the interface with a custom one  Adding custom operations JIPipe already comes with some default operations, including as opening the containing folder. There are two types of operations: one for importing data written into a results folder, and one for displaying already loaded data from memory.\nChange in JIPipe 1.73.0: Display operations (the operations available in the cache browser) are automatically made available as import operation. We recommend to just create a JIPipeDataDisplayOperation unless you require operations on the output files.\n\rTo add an operation on already loaded data, implement JIPipeDataDisplayOperation:\npublic class MyDisplayOperation implements JIPipeDataDisplayOperation { @Override public void display(JIPipeData data, String displayName, JIPipeWorkbench workbench) { // Here you can pu a custom display function  // Currently it just uses the default function  data.display(displayName, workbench); } @Override public String getName() { // Name as shown in the menu  // The name should be unique  return \u0026#34;Open in JIPipe\u0026#34;; } @Override public String getDescription() { return \u0026#34;Opens the table in JIPipe\u0026#34;; } @Override public int getOrder() { // The lower the order the higher it is placed in the menu  // The lowest ist used as default  return 100; } @Override public Icon getIcon() { return UIUtils.getIconFromResources(\u0026#34;apps/jipipe.png\u0026#34;); } } With JIPipe 1.73.0 all display operations are automatically made available as import operation. If you want to create an operation on the output files, inherit from JIPipeDataImportOperation:\npublic class MyImportOperation implements JIPipeDataImportOperation { @Override public String getName() { // Name as shown in the menu  // The name should be unique  return \u0026#34;Open in JIPipe\u0026#34;; } @Override public String getDescription() { return \u0026#34;Opens the table in JIPipe\u0026#34;; } @Override public int getOrder() { // The lower the order the higher it is placed in the menu  // The lowest ist used as default  return 100; } @Override public Icon getIcon() { return UIUtils.getIconFromResources(\u0026#34;apps/jipipe.png\u0026#34;); } @Override public JIPipeData show(JIPipeDataSlot slot, JIPipeExportedDataTable.Row row, Path rowStorageFolder, String compartmentName, String algorithmName, String displayName, JIPipeWorkbench workbench) { // This function should import the data contained in the rowStorageFolder and display it  // You can return the data (which is currently not used) or return null  if (rowStorageFolder == null || !Files.isDirectory(rowStorageFolder)) return null; Path csvFile = PathUtils.findFileByExtensionIn(rowStorageFolder, \u0026#34;.csv\u0026#34;); if (csvFile != null) { ResultsTableData result = JIPipeTableEditor.importTableFromCSV(csvFile, (JIPipeProjectWorkbench) workbench); workbench.getDocumentTabPane().switchToLastTab(); return result; } return null; } } \rWe do not recommend to inherit both from JIPipeDataImportOperation and JIPipeDataDisplayOperation due to the automated import introduced in JIPipe version 1.73.0\n\rThe operations must be registered in JIPipeJavaExtension either via the data type ID or when registering a new data type.\nCurrently you have to register all your operations per data type. It its not enough to register them for the base class only.\n\r@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register() { // Registering the operation when registering the data type  registerDataType(\u0026#34;my-data\u0026#34;, MyData.class, ResourceUtils.getPluginResource(\u0026#34;/icons/data-types/data-type.png\u0026#34;), null, null, new MyOperation()); // alternative ...  // Registering the operation by itself  registerDatatypeOperation(\u0026#34;my-data\u0026#34;, new MyOperation()); } } \rYou can register an operation for all data types by leaving the data type ID empty.\n\rUsing a custom interface This UI can be replaced with a custom one that is designed to handle this specific data type.\nSuch UIs inherit from JIPipeResultDataSlotRowUI, which is a panel that has access to\n the data location the annotation of this data row the project workbench UI  We recommend to inherit from JIPipeDefaultResultDataSlotRowUI that allows to inherit actions from inherited data types.\nJIPipeDefaultResultDataSlotRowUI requires you to register actions with a name, description and function. The action that was added last is shown in the main UI and triggered by double-clicking the data row in the table. All other actions are put into the ... menu.\npublic class MyDataDataSlotRowUI extends JIPipeDefaultResultDataSlotRowUI { public MyDataDataSlotRowUI(JIPipeProjectWorkbench workbenchUI, JIPipeDataSlot slot, JIPipeExportedDataTable.Row row) { super(workbenchUI, slot, row); } // This method is required because we need to find the JSON file  // we can load MyData from it  private Path findJsonFile() { if (getRowStorageFolder() != null \u0026amp;\u0026amp; Files.isDirectory(getRowStorageFolder())) { return PathUtils.findFileByExtensionIn(getRowStorageFolder(), \u0026#34;.json\u0026#34;); } return null; } @Override protected void registerActions() { super.registerActions(); Path jsonFile = findJsonFile(); if (imageFile != null) { registerAction(\u0026#34;Show value\u0026#34;, \u0026#34;Shows the value as message box\u0026#34;, UIUtils.getIconFromResources(\u0026#34;open.png\u0026#34;), e -\u0026gt; { MyData data = MyData.fromJson(jsonFile); JOptionPane.showMessageDialog(this, data.value, \u0026#34;The value is ...\u0026#34;) }); } } } The UI class can be directly registered in JIPipeJavaExtension:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register() { // The last null parameter will be handled in the next tutorial  registerDataType(\u0026#34;my-data\u0026#34;, MyData.class, ResourceUtils.getPluginResource(\u0026#34;/icons/data-types/data-type.png\u0026#34;), MyDataDataSlotRowUI.class, null); } } "
},
{
	"uri": "https://www.jipipe.org/download/",
	"title": "Download",
	"tags": [],
	"description": "",
	"content": "Please choose how you want to install JIPipe\r\r   ImageJ update site (Recommended)\r Windows package (x64)\r Linux package (x64)\r MacOS package (beta)--\r   JAR files\r\r\rRecommended. An update site allows you to easily update JIPipe to newer versions with one click. It requires from you to have an existing installation of ImageJ.\r\rDownload ImageJ or open your existing ImageJ installation\rGo to Help \u0026gt; Update ... and activate the JIPipe update site. Then let ImageJ download all necessary files.\rClick Manage update sites and select JIPipe. If JIPipe is not available, click Add update site and add a new site with the name JIPipe and the URL https://sites.imagej.net/JIPipe/\rOptional: it is recommended to also select the ImageScience and IJPB-plugins update sites. Otherwise, JIPipe will later prompt you to install them.\rClick Apply changes and wait until all downloads have been finished\rRestart ImageJ and go to Plugins/JIPipe/JIPipe GUI\rOn the first start, JIPipe will most likely detect missing dependencies. You can find information about this feature here\r\r  Tip: If you want a desktop shortcut (Windows) or an entry in your application menu (Linux), open JIPipe and run Tools \u0026gt; Create launchers\r Info: We have only limited capabilities to test software on Apple computers and are aware of issues regarding the integration of external software (Python, R, Cellpose, ...). We are open to contributions to resolve these problems.\r\r\rPlease note that this package might contain an older version of Fiji and JIPipe. We recommend to use the ImageJ update site to install JIPipe.\r --\rYou can download a package that provides an existing Fiji installation plus all necessary files for JIPipe.\r\r Download  the package\rExtract the *.zip file\rRun ImageJ-win64.exe\rGo to Plugins/JIPipe/JIPipe GUI\r\rTip: If you want a desktop shortcut, open JIPipe and run Tools \u0026gt; Create launchers\r\r\rPlease note that this package might contain an older version of Fiji and JIPipe. We recommend to use the ImageJ update site to install JIPipe.\r --\rYou can download a package that provides an existing Fiji installation plus all necessary files for JIPipe.\r\r Download  the package\rExtract the *.zip file\rRun ImageJ-win64\rGo to Plugins/JIPipe/JIPipe GUI\r\rTip: If you want an application menu entry, open JIPipe and run Tools \u0026gt; Create launchers\r\r\rPlease note that this package might contain an older version of Fiji and JIPipe. We recommend to use the ImageJ update site to install JIPipe.\r\rYou can download a package that provides an existing Fiji installation plus all necessary files for JIPipe.\r\r Download  the package\rDrag the file to your desktop\r\r Info: We only have limited capabilities to test software on Apple computers. If you experience any issues, try to install JIPipe via the ImageJ update site.\r Info: We are aware of some issues regarding the integration of external software (Python, R, Cellpose, ...). We are open to contributions to resolve these problems.\r Info: Please do not install the app globally (using administrator rights). This can prevent ImageJ updates.\r --\rJIPipe is available as standalone ImageJ plugin in *.jar format that you can install into an existing installation of ImageJ.\r\r Download  the package\rDownload ImageJ if you have no ImageJ installation, then open the ImageJ plugin folder\r\r  Windows/Linux\rOpen the Fiji.app directory and navigate into the plugins folder\r OSX\rRight-click the Fiji icon on the desktop and click Show package contents. Navigate into the plugins folder.\r\rOpen the *.zip file you downloaded and extract its contents into the plugins folder.\rStart ImageJ. You can find the JIPipe GUI inside the plugin menu\rOn the first start, JIPipe will most likely detect missing dependencies. You can find information about this feature here\r\r  Tip: If you want a desktop shortcut (Windows) or an entry in your application menu (Linux), open JIPipe and run Tools \u0026gt; Create launchers\r\r\rSource code The software is Open Source and licensed under BSD-2-Clause. You can find the source code on GitHub at https://github.com/applied-systems-biology/jipipe.\nLogos If you need the JIPipe logo for presentations, posters, or publications, feel free to download the logo package. It contains the JIPipe logos (text plus logo, square logo) in PNG and SVG formats.\n// Download page menus\r$(\".download-panel-content\").css(\"display\", \"none\");\r$('input:radio[name=\"download-options\"]').change(function(){\r$(\".download-panel-content\").css(\"display\", \"none\");\r$(\"#\" + $(this).val() + \"-content\").css(\"display\", \"block\");\r});\r$('input:radio[value=\"download-via-update-site\"]').change();\r$('input:radio[value=\"download-via-update-site\"]').prop(\"checked\", true);\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/compartments1/",
	"title": "Graph compartments",
	"tags": [],
	"description": "",
	"content": "In many lectures it is common to teach that image analysis tasks can be divided into a steps, for example Preprocessing, Analysis, and Postprocessing.\nJIPipe facilitates this concept by its graph compartment feature that can be accessed via the Compartments tab (red arrow 1). The compartment function separates the pipeline into units that can be connected to each other to enforce a specific order of operations (red arrow 2).\n👉 Related tutorial: Compartments I (Creating and connecting)\rLearn how to create and use compartments.\r\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/graph-node/",
	"title": "Graph node",
	"tags": [],
	"description": "Node in a graph",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: algorithm-node.schema.json\n\rNode in a graph\r\r\rjipipe:slot-configuration:\r\robject\r\r\r[object Object]\r\r\r\r\r\rUser-defined slots. Might be ignored depending on the algorithm. The keys are the slot names.\rSee slot-definition\r\r\r\r\r\r\r\rjipipe:node-ui-location:\r\robject\r\r\r[object Object]\r\r\r\r\rLocations of this node within the UI. Optional. The keys depend on the UI implementation.\rSee point\r\r\r\r\r\r\r\rjipipe:node-info-id:\r\rstring\r\r\r\r\r\r\rAlgorithm type ID\r\r\rjipipe:graph-compartment:\r\rstring\r\r\r\r\r\r\rCompartment UUID. Only relevant in project graphs. Empty indicates no compartment assignment.\r\r\rjipipe:alias-id:\r\rstring\r\r\r\r\r\rHuman-readable ID. Unique within the same graph. Can be changed by the software.\r\r\rname:\r\rstring\r\r\r\r\r\r\rA custom name for this node. Only important for the UI. If null or empty, the UI will default to the node type name.\r\r\rdescription:\r\robject\r\r\r\r\r\r\rA custom description. Only important for the UI.\r\r\r\r\r\rExample { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Folders\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;folder\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Folders\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Annotated folders\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;folder\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Annotated folders\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;default-preprocessing\u0026#34; : { \u0026#34;x\u0026#34; : 525, \u0026#34;y\u0026#34; : 100 }, \u0026#34;default-preprocessing{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 250 }, \u0026#34;default-preprocessing{Horizontal}\u0026#34; : { \u0026#34;x\u0026#34; : 450, \u0026#34;y\u0026#34; : 50 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;folder-annotate-by-name\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;default-preprocessing\u0026#34;, \u0026#34;generated-annotation\u0026#34; : \u0026#34;project-sample\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;Folders to annotations\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } } "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/iterating-algorithms/",
	"title": "Handling multiple inputs",
	"tags": [],
	"description": "",
	"content": "JIPipe data slots store multiple data rows. This means that algorithms have to iterate their workload for each input row and generate equivalent output in the respective output slots.\nThere can be issues if data from multiple input slots need to be combined (e.g. merge channels into RGB, see user documentation). JIPipeAlgorithm has no capabilities to help with such cases.\nA solution can be JIPipeIteratingAlgorithm or JIPipeSimpleIteratingAlgorithm that use the annotation attached during processing to find data rows that belong to the same data set. The implementation creates JIPipeDataBatch instances that represent one data set iteration.\nFor simple algorithms, we recommend JIPipeSimpleIteratingAlgorithm. It does not have the additional parameters that might confuse some users, but creates the same runIteration(\u0026hellip;) command as JIPipeIteratingAlgorithm. It only works for algorithms with at most one input and will generate error messages if you have more than one input.\n\rPlease access data via the data interface. It reads exactly one JIPipeData for each input.\n\rThe only difference to JIPipeAlgorithm is that you need to override a different function called runIteration.\n// Annotates documentation to the algorithm @JIPipeDocumentation(name = \u0026#34;My Algorithm\u0026#34;, description = \u0026#34;Does something\u0026#34;) // Sets the algorithm category @JIPipeNode(nodeTypeCategory = MiscellaneousNodeTypeCategory.class) // Input and output slots @JIPipeInputSlot(value = ImagePlusData.class, slotName = \u0026#34;Input\u0026#34;, description=\u0026#34;The input\u0026#34;, autoCreate = true) @JIPipeOutputSlot(value = ImagePlusData.class, slotName = \u0026#34;Output\u0026#34;, description=\u0026#34;The output\u0026#34;, autoCreate = true) public class MyAlgorithm extends JIPipeIteratingAlgorithm { /* This is the main constructor of the algorithm. It contains a reference to the algorithm info that contains some important metadata */ public MyAlgorithm(JIPipeNodeInfo info) { super(info); } /* A deep copy constructor. It is required. Please do not forget to deep-copy all important fields */ public MyAlgorithm(MyAlgorithm original) { super(original); // Deep-copy additional fields here  } /* The workload is run in this functon. You can also have the ability to inform the user about the current algorithm status for more complex algorithms. You can also query if the user requested cancellation Please read and write only via the data interface. */ @Override public runIteration(JIPipeDataBatch dataBatch, JIPipeProgressInfo progress) { // Run your workload here  } } "
},
{
	"uri": "https://www.jipipe.org/examples/how-to-load-projects/",
	"title": "How to load and run projects",
	"tags": [],
	"description": "Explains how to load example projects into JIPipe.",
	"content": "\rThis tutorial assumes that you have installed JIPipe. If you want information on how to setup our software, please visit the installation guide.\nLearn how to install JIPipe \n\r1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/old/analysis/",
	"title": "Image analysis pipeline",
	"tags": [],
	"description": "This step-by-step tutorial explains how to create an image analysis workflow with simple algorithms like Gaussian blur, auto thresholding, and distance transform watershed. The segmented objects are quantified and plots are genereated.",
	"content": "\rThis tutorial is also available as video.\r\r\r1. First start\rOn starting JIPipe, you will see such a screen: It contains a short introduction, the graph compartment editor,\ran three pre-defined graph compartments Preprocessing, Analysis, and Postprocessing. As described in the graph compartment documentation, you\rcan ignore graph graph compartments. But in this tutorial we will make use of its capabilities to clearly separate the pipeline into the mentioned tree steps.\r\r\r\r2. Graph compartments\rHere you can see how the data flows between graph compartments. You do not have to do anything here, as this is the default configuration.\rData flows from Preprocessing to Analysis, and finally to Postprocessing.\r\rYou can ignore the graph compartments and of course define your own data flow. Graph compartments are very flexible. Just take a look at the documentation.\r\r\r\r3. Preprocessing\rIn this tutorial, the preprocessing step should consist of algorithms that load and organize data for the following processes.\rTo switch to the graph editor for the preprocessing step, just click the Preprocessing tab.\rYou will find an empty graph aside of the Preprocessing output node. We will utilize this node in\ra later step to pass preprocessed data to other steps.\r\rThe graph is stored project-wide. You can just close all graph editors that you do not need for the current task.\rYou can re-open them via the graph compartment editor. If you closed it, you can re-open it via the Compartment menu in the project menu bar.\r\r\r\r4. Adding a data source\rThe most common way how data is provided is to load them from files or folders. JIPipe comes preinstalled with data-types and algorithms\rthat handle filesystem operations. The tutorial data is supplied as set of folders\rthat contain the input images as TIFF files in a sub-directory.We begin by adding a data source that supplies a list of folders.\rYou can find it in Add data \u0026gt; Folder \u0026gt; Folder list. After selecting the item, it will appear in the graph.\r\rYou can also drag folders and/or files directly into the graph editor area. Corresponding file data source nodes are then created.\rFor this example, you could just drag the input data folders directly into the graph.\r\r\rYou do not have to navigate via the menu. You can also type the algorithm name or some keywords into the bar that reads Search ....\r\r\r\r5. Including the input folders\rSelect the newly created algorithm node by clicking it. The panel on the right-hand side will update and allow you to change\rthe parameters of the selected algorithm node. Click the  Add button and select the\rinput folders.\r\rYou can save the current project at any time and re-load it later. If you save it in a parent directory relative to where your data is located,\rJIPipe automatically saves all paths relative to the project file. This means you can just move all your data, including the project to other machines or\rhard drive partitions without breaking anything.\r\r\r\r6. Annotating data\rJIPipe is designed as batch processing tool, meaning that it can be always scaled from small test data up to large data sets.\rIt can be helpful for you and some algorithms to know which data belongs together. JIPipe introduces the concept of data annotations that\rassign data to an unique data set and are passed through the pipeline. You can find more about this in the documentation about how JIPipe processes data.\rIn this step we add the data annotation directly at the beginning by attaching the input folder name to each folder that was passed into the pipeline.\rThis is done via the Annotations \u0026gt; Generate \u0026gt; Path to annotation algorithm. Just add this algorithm into the graph.\rFor more advanced projects there are plenty of other sources for annotations, like importing them from tables, or extracting and modifying annotations.\r\r\r7. Connecting slots\rThe input folders are converted into a format understandable by JIPipe by the Folder list algorithm. The output then can be passed to following algorithms\rlike the Folders to annotations algorithm we added in the last step.\rTo make a connection click the  or  button and select the available data slot.\rYou can see that a connection between the two data slots was created.\rThis list is always sorted from the closest to the farthest away slot.\r\rYou can also use your mouse to drag a connection between slots.\r\r\r\r8. Annotation type\rAnnotations are like columns in a table - only that our table contains complex data types. The Path to annotation algorithm automatically extracts\rthe path's file name (or directory name) and annotates it to the input row. By default, the algorithm creates a column Dataset. If you want you can\rchange it to another meaningful column name. And with more complex projects you will probably have many different columns.\r\r\r9. Extracting the image file\rWe have now the folders and can extract the input image file from each one of them.\rYou can find an algorithm designed for such purposed in File system \u0026gt; List \u0026gt; List files. Add it to the graph and connect it to the Subfolder name output.\rThis algorithm is not only able to list files, but also filter them directly.\rIn this case, we exactly know that our files are located within a sub-folder in. Please update the Subfolder parameter by setting it to in.\rThe filter uses an expression that allows highly flexible filters. But for this example, we only want to test if the filename contains .tif.\rTo do this, type name CONTAINS \".tif\" into the filter box.\r\rIf you have more complicate folder structures, you can apply the \"Navigate to sub-folder\" operation with a distinct algorithm. You can find it in the Filesytem category.\r\r\rWe highly recommend that you get familiar with expressions, as they are present in most filtering or generation nodes. They are easy to learn and write, but also allow extremely powerful operations.\r\r\r\r10. Testing if the pipeline is correct (Optional)\rThe Quick Run feature allows you to run the pipeline until the selected algorithm and compare multiple parameter sets.\rIt is a good way to test if the pipeline works so far. To create a quick run right-click the List files node and select  Run \u0026amp; show results.\r\rThe quick run will check if the pipeline is valid might show some error. If you think that the pipeline is valid, click  Retry\rto check the pipeline again. It sometimes does not update for performance reasons.\r\r\rYou can also do a quick-run that just refreshes the Cache.\r\r\rYou can also start a Quick Run from the parameter panel if you select the algorithm.\r\r\r\r11. Testing if the pipeline is correct - results (Optional)\rNavigate to the output if the List files algorithm and check if the file paths are correct.\rSee our Quick Run documentation for more information about the testbench and its features.\r\r\r12. Importing the images\rAfter correctly setting up the files, you can import them as images. You can find various importers for\rimage types in Add data.\rOur images do not require Bio-Formats, so we choose Add data \u0026gt; Image \u0026gt;Import image. Connect it to the output of List files.\r\rThe Import image node does not ensure the exact bit depth and dimensionality of the output image. You can change this via a parameter that allows you\rto choose the exact image type.\r\r\r\r13. Preprocessing output\rYou could continue with the analysis directly from the Import image node. But to showcase the graph compartments feature, we decide to\rhave the imported greyscale image as output for of the Preprocessing compartment. The output of a graph compartment is only interfaced through a special node,\rin this case Preprocessing output.We first have to define an output slot by clicking the  button. Select Import image,\rset a name, and click  Add.\r\r\r14. Connecting the output\rFinally, connect the output of Import image to the new input slot of Preprocessing output.\r\r\r15. The analysis\rNow we are finished with the preprocessing. Switch to the Analysis graph compartment by selecting the tab in the tab bar.\rYou see that it also contains a node called Preprocessing output. This is the same node as in the preprocessing compartment, but\rit only contains output data this time.\rWe continue the analysis with a Gaussian filter that can be found in Images \u0026gt; Blur \u0026gt; Gaussian blur 2D.\rAdd it to the graph and connect it to the output of Preprocessing output.\r\r\r16. Finding the particles\rAdd following algorithms to the graph and connect them the the previous output:\r\rImages \u0026gt; Threshold \u0026gt; Auto Threshold 2D\rImages \u0026gt; Binary \u0026gt; Distance transform watershed 2D\rImages \u0026gt; Analyze \u0026gt; Find particles 2D\r\r\rThis will create a more or less accurate segmentation of the objects (spores) that are visible in the data.\rThe generated masks are then analyzed to extract ROI and measurements.\r\r\r17. Analysis output\rCreate multiple analysis output slots via the  button. Export at least the measurements table.\rIn our example, we exported the mask, ROI, and the measurements.\r\rYou can hide edges if you want. Just click the  or  and select Hide edge.\r\r\r\r18. Postprocessing\rThe postprocessing consists of generating a histogram plot of the spore particle areas.\rYou can find a node that generates plots in Tables \u0026gt; Plot \u0026gt; Plot tables.\rConnect the measurements to the plotting node and set its plot type to  Histogram plot.\rYou see that the node parameters change. They adapt to the the currently selected plot and expect from you to input from which table column(s)\rto extract the data from. Either you know the name of the columns, or you can use the testbench to generate output and check it yourself. Some algorithms\ralso write the names of their output columns in their description.\rThe correct column for the measurements is Area.\rYou can also change various plot-specific settings and determine how output images are generated.\r\rThe plot node automatically generates SVG and PNG renders in the selected resolution. This is not a definite choice, as JIPipe has its own plot builder that\rcan import generated plots from within the results UI.\r\r\rAside from exact matching, plot input columns can be matched via a regular expression\ror generated. Use the generator by selecting . A generator can be useful if you have no matching column within your data.\r\r\r\r19. Running the pipeline\rTo run the pipeline, click the  Run button at the top right corner. This will open a new tab where you can select the output directory.\rYou can also generate a random folder that will be located on your operating system's temporary directory\rby clicking the button.\rAfter setting up the parameters, click  Run now.\r\rJIPipe attempts to prevent the most common errors (such as wrong parameters) and displays a message if something was found. Please follow the instructions of those messages.\rDepending on the data and algorithms, the behavior might not be forseeable and a crash occurs during the processing. A similar easy-to-understand message is shown on how\rto proceed or repair the issue.\r\r\r\r20. Displaying results\rAfter the pipeline was successfully executed, a result analysis interface is shown. It displays the\rresults of all output slots. You can navigate through the results via the tree on the left-hand side.\rOn selecting a row, an interface is displayed below the table that contains various operations to import or open the data.\r\r\r21. Displaying plots\rTo open the generated plots, navigate to Results \u0026gt; Postprocessing \u0026gt; Plot tables \u0026gt; Output and double-click an entry in the list.\rAlternatively, you can also select the row and click Open in JIPipe. This will open a new tab with a plot builder tool.\rPlease take a look at the plots and tables documentation for more information how the tool works.\r\r\r"
},
{
	"uri": "https://www.jipipe.org/installation/dependencies/",
	"title": "ImageJ Dependencies",
	"tags": [],
	"description": "",
	"content": "JIPipe has various dependencies in form of ImageJ update sites that are not always provided via the Fiji update site or the ZIP package. During the startup of the software, JIPipe will automatically check for the appropriate ImageJ update sites and will guide you through the installation of all necessary libraries.\nThe dependency installation was revised in JIPipe version 1.74.0. Please follow the appropriate procedures in the tutorial below.\n\rJIPipe 1.74.x or newer 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r \r1. Dependency resolver\rOn starting JIPipe, you will see the \"Missing ImageJ dependencies\" dialog that will list all missing dependencies. Click \"Install all dependencies\" (bottom right) to automatically download and install all required software.\r\r\r\r2. Restarting ImageJ\rAfter the download has finished, you will need to restart ImageJ. Click \"Close ImageJ\" (inside the blue bar) to immediately close ImageJ.\r\r\r\rJIPipe 1.73.x or older \u0026lt;=1.73.x\r\rThis guide was written for JIPipe version 1.73.x or older\r\r \r1. Dependency resolver\rOn starting JIPipe, you will see the \"Missing ImageJ dependencies\" dialog that will list all missing dependencies. Click \"Resolve\" (bottom right) to start the installation process.\r\r\r\r2. Applying the changes\rJIPipe will contact the ImageJ update site service and enable the required update sites automatically. You will be prompted with a message that the changes will need to be applied. Click \"Apply changes\" (top right) to start the download and installation of the dependencies.\r\r\r\r3. Restarting ImageJ\rAfter the download has finished, you will need to restart ImageJ. Click \"Close ImageJ\" (inside the blue bar) to immediately close ImageJ.\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/javadocs/",
	"title": "JavaDocs",
	"tags": [],
	"description": "Provides a link to the JavaDocs",
	"content": "The JavaDocs of the Java API can also be found here\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/",
	"title": "JIPipe for teaching",
	"tags": [],
	"description": "Gives an overview about the JIPipe features that help teaching image analysis",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/pipeline-editor/",
	"title": "Pipeline editor",
	"tags": [],
	"description": "Explains the graph editor user interface, how to create a pipeline, and additional features like the algorithm finder tool.",
	"content": "\rThis guide is also available as video tutorial.\r\rThe graph editor (pipeline editor) allows you to edit the processing steps of a graph compartment. Its user interface is separated into three sections:\n The analysis graph contains the processing steps (also referred as algorithms) The settings panel shows the properties of the currently selected algorithms The toolbar allows you to add more algorithms into the graph, navigate to existing algorithms, change some behavior settings of the graph editor, and create screenshots  Analysis graph The analysis graph contains algorithms that are represented by rectangles. The algorithm graph area will automatically grow depending on where you place the algorithms. Scroll bars will appear if the graph area is larger than the available screen size.\nAn alternative to using the scroll bars is to hold the middle mouse button while dragging the your mouse.\n\rAlgorithms read data from their input slots and output the results into the output slots. There are some algorithms that do not have input slots - they produce output based on their current parameters. The algorithm user interface has three sections:\n Input slots are located on the top of the algorithm UI. Each slot has a unique name that is displayed below the arrow. The arrow opens a menu that allows you to make/modify connections or change other options specific to the slot. Depending on the algorithm, a + button is created that allows you to add more slots. The drag area allows you to move the algorithm around. Move your  mouse pointer over the area and drag your mouse while holding the 🖱 left mouse button. On clicking the  button, a menu will open that contains some algorithm options. Alternatively you can right-click the drag area to open this menu. Output slots are located on the bottom and allow you to connect your output data to the input of another algorithm.  Any output data is always saved automatically by JIPipe. After generating the final output data, there is no need to connect it to any input.\n\rSlot connections You can connect two slots by clicking the  or  button of a slot and by selecting the source/target slot. Input slots can only receive one connection, while outputs can be distributed to as many inputs as you wish. The selection menu shows all available target slots and its sorted from the nearest to the slot that is furthest away.\nA connection is shows as line between the connected slots. The color of the line indicates if this connection is valid or invalid depending on the data types of the source and target.\n A black line indicates that the data types match exactly. A blue line indicates that the types don\u0026rsquo;t match exactly, but can be converted by JIPipe A red line indicates that the types are incompatible. You will probably get an error message during the calculation.  Hover with your mouse over a slot\u0026rsquo;s name to show information about its data type.\n\rSlot options The slot context menu opened by  or  contain additional entries to managing connections.\n  Label this slot allows you to give the slot a custom name without changing the internal workings of the algorithm (As many algorithms are designed to adress specific slots). On selecting the entry, you can give a custom name that is displayed in cursive. To remove the custom label, label it with an empty text.  Find matching algorithm \u0026hellip; opens a tool that lists all compatible algorithms that can receive the output data as input. Depending on the algorithm, you can remove a slot from within this menu  Algorithm settings The algorithm settings are displayed on the right-hand side and contain all settings of the selected algorithm. There are usually four categories:\n  Parameters contains general parameters, like the name displayed in the drag area, and algorithm-specific parameters like thresholds, the selection of methods, and other parameters.  Slots is an alternative to modifying slots via the algorithm UI. Here, you can also re-order slots.  Annotations is an alternative to modifying slot annotations via the algorithm UI. See above for more info about annotations.  Quick run is a tool to run the analysis only up to the selected algorithm. It allows you to try and compare multiple parameters without creating new nodes. See the testbench documentation for more info.  Toolbar The toolbar contains functions to add new algorithms into the graph, navigate to existing algorithms or search the list of available algorithms, and functions to control the algorithm graph display.\n On the left-hand side you can find a menu containing all available algorithms. On selecting an entry, the corresponding algorithm is added to the graph. The navigator allows you to quickly navigate to an existing algorithm instance or create a new one. Just type one or multiple search terms into the field. On pressing the  arrow down key on your keyboard, the first entry is selected. The graph menu contains some additional utility functions and settings.  Additional tools  / allows you to switch between different view modes. This does not change the pipeline, but just how it is displayed in the editor. By default, a vertical view is enabled. If you prefer that data flows from left to right, choose the horizontal view mode. automatically aligns all nodes in the algorithm graph according to the algorithm by Sugiyama et. al allows you to change how dragging the middle mouse button changes the current view. is enabled by default and makes it that nodes are automatically aligned on creating connections. This feature does not reorganize the whole graph, but only places the target algorithm to a location that better represents the data flow. crops the graph area to the area taken by the algorithm nodes. Use this tool to find your nodes after scrolling too far away. creates a screenshot of the whole graph compartment that is currently being displayed.  View modes The graph can be displayed in different view modes. There are currently three modes integrated:\n Vertical: Nodes are displayed in a way that inputs are at the top and outputs are at the bottom. This is the default mode. Vertical (compact): Just like the vertical mode, but the size of each node is reduced. Horizontal: Nodes are displayed, so inputs are the the left and outputs are at the right  Nodes arrangements are saved for each view mode separately. Graphs will remember the current view mode.\nYou can change the default view mode via Project \u0026gt; Application settings \u0026gt; Graph Editor \u0026gt; Default view mode\n\rHere you will find a preview of all view modes with the same graph. The screenshots all have the same size.\n\r\rVertical\rVertical (compact)\rHorizontal\r\r\r\r\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/python/api/",
	"title": "Python API",
	"tags": [],
	"description": "Documentation of the Python API to communciate with JIPipe.",
	"content": "\njipipe \njipipe.data_slot This file provides functions that are used to manage the contents of a data slot\nZoltán Cseresnyés, Ruman Gerst\nResearch Group Applied Systems Biology - Head: Prof. Dr. Marc Thilo Figge https://www.leibniz-hki.de/en/applied-systems-biology.html HKI-Center for Systems Biology of Infection Leibniz Institute for Natural Product Research and Infection Biology - Hans Knöll Institute (HKI) Adolf-Reichwein-Straße 23, 07745 Jena, Germany\nThe project code is licensed under BSD 2-Clause. See the LICENSE file provided with the code for the full license.\n\nDataSlot Objects class DataSlot() Models a JIPipe data slot.\n\n__init__ | __init__(data_type: str, storage_path: Path, node_id=\u0026#34;\u0026#34;, internal_path: Path = \u0026#34;\u0026#34;, name: str = \u0026#34;\u0026#34;, slot_type: str = \u0026#34;\u0026#34;) Initializes a new data slot\nArguments:\n data_type: the JIPipe data type ID that is accepted in this slot. The most basic type is \u0026lsquo;jipipe:data\u0026rsquo; slot_type: the type of the slot. Allowed values are \u0026lsquo;input\u0026rsquo; and \u0026lsquo;output\u0026rsquo;. Can be empty. storage_path: a directory where the slot data is stored. If it does not exist, one will be created node_id: Metadata that indicates the node associated to this slot. Can be empty. internal_path: Metadata that indicates the placement of this data within a hierarchy of data. Can be empty. name: Name of the slot. Can be empty.  \nget_row_storage_path | get_row_storage_path(row: int) Returns the storage path for the provided row\nArguments:\n row: the row index  Returns:\nthe storage path for the row\n\ncopy_row | copy_row(source_data_slot, source_row: int) Copies data from the source slot into this slot\nArguments:\n source_data_slot: the source slot source_row: the source row  \nadd_row | add_row(n: int = 1, annotations: dict = None, true_data_type: str = None) Adds n rows into the slot\nArguments:\n true_data_type: the true data type ID of this entry. If none, the slot data type is used annotations: annotations to set for these rows n: how many rows to add  Returns:\nthe last row index\n\nto_table | to_table() Converts the data slot into a Pandas table.The format is equivalent to data-table.csv generated by JIPipe.\nReturns:\nPandas table\n\nto_dict | to_dict() Converts the data slot into a dict that can be serialized into JSON\nReturns:\na dictionary that describes this slot\n\nsave | save(with_csv=False) Saves all metadata related to this slot in the storage folder. This will overwrite data-table.json and data-table.csv (if enabled)\nArguments:\n with_csv: Also write the table as CSV. The format is equivalent to the one generated by JIPipe. Writing with CSV requires pandas to be installed.  Returns:\nNone\n\nimport_from_folder import_from_folder(storage_path: Path) Imports a data slot from a storage path. A valid storage path contains \u0026lsquo;data-table.json\u0026rsquo; and multiple numeric folders.\nArguments:\n storage_path: the storage path  Returns:\na DataSlot instance\n\njipipe.imagej This file provides functions to read/write ImageJ data types\nZoltán Cseresnyés, Ruman Gerst\nResearch Group Applied Systems Biology - Head: Prof. Dr. Marc Thilo Figge https://www.leibniz-hki.de/en/applied-systems-biology.html HKI-Center for Systems Biology of Infection Leibniz Institute for Natural Product Research and Infection Biology - Hans Knöll Institute (HKI) Adolf-Reichwein-Straße 23, 07745 Jena, Germany\nThe project code is licensed under BSD 2-Clause. See the LICENSE file provided with the code for the full license.\n\nget_image_file get_image_file(data_slot: DataSlot, row: int) Finds the image file located in imagej-imgplus-* data slot rows\nArguments:\n data_slot: the data slot row: the row  Returns:\npath to the image file or None if not found\n\nget_table_file get_table_file(data_slot: DataSlot, row: int) Finds the CSV table file located in imagej-results-table (and related) data slow rows\nArguments:\n data_slot: the data slot row: the row  Returns:\npath to the CSV file or None if not found\n\nload_image_file load_image_file(data_slot: DataSlot, row: int) Finds and loads the image file located in imagej-imgplus-* data slot rows and loads it with Skimage. Requires that Skimage is installed.\nArguments:\n data_slot: the data slot row: the row  Returns:\nImage data or None if no image was found\n\nload_table_file load_table_file(data_slot: DataSlot, row: int) Finds and loads the CSV table file in imagej-results-table (and related) data slow rows as pandas data frame Requires that pandas is installed.\nArguments:\n data_slot: the data slot row: the row  Returns:\nImage data or None if no image was found\n\nadd_table add_table(table, data_slot: DataSlot, annotations: dict = None) Adds a new table into a new row of the specified slot\nArguments:\n table: the table. must be a Pandas table or dictionary that can be converted into a data frame data_slot: the data slot annotations: optional annotations (a dict of string keys and string values)  Returns:\nindex of the newly added row\n\nadd_image add_image(image, data_slot: DataSlot, annotations: dict = None) Adds a new image into a new row of the specified slot. The image will be saved as TIFF. Requires Skimage.\nArguments:\n image: an image. must be a numpy array data_slot: the data slot annotations: optional annotations (a dict of string keys and string values)  Returns:\nindex of the newly added row\n"
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/run/",
	"title": "Running the whole pipeline",
	"tags": [],
	"description": "Explains the Quick Run feature that allows to test and compare different algorithm parameters without recalculating the whole pipeline.",
	"content": "JIPipe stores its results in a user-defined output folder. After clicking  Run (located at the top right corner of a project window) JIPipe will query the output folder from you. You can also generate a random folder that will be located on your operating system\u0026rsquo;s temporary directory by clicking the button.\nAfter confirming the settings by clicking  Run now, JIPipe will start processing the pipeline.\nYou can have as many runs as you want. Runs will not execute in parallel, but be scheduled to wait until the current run finishes.\n\rThe JIPipe output folder is automatically organized in a standardized way, so JIPipe can open a result folder. You find the \u0026ldquo;Open analysis output \u0026hellip;\u0026rdquo; button in the \u0026ldquo;Project\u0026rdquo; menu.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-single-compartment/",
	"title": "Starting a new project I",
	"tags": [],
	"description": "Guides through the process of creating a new project. The pipeline contains a single compartment and is thus easier for beginners.",
	"content": "Related tutorial: Alternative option\rCreating a project with multiple compartments\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "The navigate to the target folder (red arrow 1) and select or choose a file name (red arrow 2). The JIPipe project filenames end with the “.jip” extension.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "We use this value for filtering in an expression, where we look for channel numbers equaling 3.\nThe figure now shows the default configuration of the Split \u0026amp; filter by annotations node that can be opened by selecting the node (red arrow 1) and going to the Parameters tab.\nPlease observe the examples that are provided in the description field (red arrow 2) and in the expression field (red arrow 3):\n One filter is created for each output slot of this node. The filter is an expression that should return a boolean value that indicates whether a data item should be put into the corresponding output.Annotation values are available as variables. If an annotation has spaces special characters, use $ to access its value.\nExamples:\n#Dataset CONTAINS \u0026quot;Raw\u0026quot; AND condition EQUALS \u0026quot;mock\u0026quot;\rTO_NUMBER($\u0026quot;my column\u0026quot;) 10\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Under the folder name (red arrow 1), the groups of results are listed (red arrow 2-4), as they appeared in the cache. Inside each of the entries, data-table.csv and data-table.json files (red arrow 5) explains the content of the data subfolders, and contains the metadata.\nOnly the data-table.json file is relevant for importing metadata. The data-table.csv table is generated for the sake of convenience.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Move on to the Export table as XLSX node. While Export data will always export CSV files, this node will instead Excel files. It can even be configured to export multiple tables into one XLSX file.\nAgain, set the Output directory to ExampleExports/ViaNodes with Output relative to project directory enabled.\nThe filename expression set to\n\u0026quot;measurements_\u0026quot; + #Filename\rThis would yield a file that is for example named measurements_blobs.xlsx.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Read out the physical dimensions of the newly calibrated image by adding a node Annotate with image properties (red arrow 1) and connecting it to the output of Set physical dimensions.\nRun the node and observe the Cache browser (red arrow 2). Now both the X and Y dimensions are added to the annotations table (red arrows 3 and 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Go to the Parameters tab of the Filter ROI by statistics node (red arrow 1) and use the expression editor (red arrow 2) as shown before to create the filtering formula (red arrow 3):\nArea \u0026gt; 150 AND Area \u0026lt; 700\r\rHere you do not need to write TO_NUMBER(Area), as the values are already numeric to begin with. Unlike text-based annotations that come from JIPipe\u0026rsquo;s data management functions, Filter ROI by statistics extracts its values from ImageJ tables that support numbers.\nIf you incorporate annotations into your formula, you then should use TO_NUMBER, e.g., TO_NUMBER(numChannels).\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Run the node and observe that now we have all 4 subfolders listed, together with the main folder (red line 1).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "To change the appearance of plots, go to the Settings tab (red arrow 1), where the plot type can be changed (red arrow 2), together with many parameters (red arrow 3) as shown in the red rectangle 4.\nThese include, e.g., color schemes (red arrow 5), titles and labels (red arrow 6), font sizes and typefaces (red arrow 7), etc.\nExperiment with these parameters!\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and observe the Cache browser (red arrow 2).\nThe cache entry (red arrow 3) now contains a new Density column (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "The last three nodes will convert the mask back to ROIs (red arrow 1), split them in case more than one full droplet is found (red arrow 2), and show the quality of the segmentation by overlaying the ROIs with the image (red arrow 3).\n\rMask to ROI is basically the ImageJ particle finder without the measurements output and filtering settings.\n\rSplit multi-component ROI splits ImageJ ROI that consist of multiple components into their individual basic shapes. This is helpful in our case, as Mask to ROI might create compound ROIs.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "In order to utilize a saved model drag the Cellpose model file (a file with a very long name) into JIPipe. This will create a File list node as usual.\nAlternatively, you can also create a File list node manually and use the file browser to select the Cellpose mode (red arrows).\nCellpose model files look for example like this: \u0026ldquo;cellpose_residual_on_style_on_concatenation_off_training_2022_10_04_17_53_41.794691\u0026rdquo;\nWe do not recommend to rename them, as Cellpose might look for vital information in the file name and will fail to load the model if the information is missing.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "Importing a template JSON file is done similarly: in the Manage menu, choose Import from file (red arrow 1).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step10/",
	"title": "Step 10",
	"tags": [],
	"description": "",
	"content": "With the parameter sets now configured, select the Auto threshold 2D node.\nNow select the Advanced parameters tab and enable the multiple parameters mode (red arrow 2).\nBy default, the multi-parameter mode will automatically attach all externally set parameters to the generated data. The name of the annotation is automatically generated, but can be prefixed with a custom string by the setting Parameter annotation prefix (red arrow 4).\nYou can leave the Parameter annotation prefix empty.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/basic-concepts/visual-programming/",
	"title": "Visual programming",
	"tags": [],
	"description": "Explains the basics of visual programming.",
	"content": "If you are familiar with ImageJ, you already know how processing is applied in this software: All operations are directly applied after selecting them in the graphical user interface (GUI). For example, a simple analysis protocol would consist of opening the image via File \u0026gt; Open, applying a Gaussian Blur filter, and then thresholding the image via Otsu\u0026rsquo;s method.\nThis allows to easily develop image analysis protocols that can be manually adjusted if needed. There are two main disadvantages:\n The exact parameters and the order of functions need to be written down separately The protocol must be executed manually, which is time-consuming if hundreds or thousands of images need to be processed (batch processing)  ImageJ already provides a method to write down any steps applied in the GUI - the macro recorder. These macro scripts also can be executed by ImageJ to repeat the recorded steps. To adapt macros into an automated analysis, or change steps inside the macro (for example, to choose a different filter) requires programming knowledge - a skill that is hard to acquire. And programmers still need to adapt the script and introduce code to manage data, metadata, and parameters.\nAn alternative concept to text programming languages are visual programming languages. These are based on the idea that data processing pipelines (such as an image analysis workflow) can be represented as easy-to-understand flow chart. Therefore, the need for programming can be circumvented by just letting users design the flow chart and derive all technical details from it.\nJIPipe provides such a language for ImageJ that not only allows to write down the processing steps, but also handles data, metadata, and batch processing. For example the pipeline shown above can be adapted to JIPipe:\n"
},
{
	"uri": "https://www.jipipe.org/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "\rIf you do not know where to start, we recommend to follow the guide \u0026ldquo;Installation with the update manager\u0026rdquo;\n\rTable Of Contents\r Installation with the update manager Pre-packaged JIPipe distributions Manual installation Post installation  \r Installation with the update manager Internet access is required during the installation.\n\r Start ImageJ/Fiji Go to Help \u0026gt; Update\u0026hellip; Click Manage update sites Select JIPipe and close the manage window Click Apply changes Restart ImageJ You can find JIPipe here: Plugins \u0026gt; JIPipe \u0026gt; JIPipe GUI (or use the search) Please read about the additional steps after the installation  Pre-packaged JIPipe distributions  Download a pre-packaged JIPipe distribution Extract the ZIP file Windows: Run ImageJ-win64.exe Linux: Run ImageJ-linux64 MacOS: Run the Fiji app You can find JIPipe here: Plugins \u0026gt; JIPipe \u0026gt; JIPipe GUI (or use the search) Please read about the additional steps after the installation  We currently have only limited capabilities of testing the MacOS version and appreciate any help of creating a smooth experience. Feel free to contact us!\n\rManual installation This requires an existing Fiji installation. Please download the appropriate package from https://fiji.sc to get ImageJ. We strongly recommend to update ImageJ (via Help \u0026gt; Update...) before installing JIPipe.\n Download the JAR files Windows/Linux: Navigate to the ImageJ directory. MacOS: Right-click the app and click Show Package Contents. Go into the plugins directory Extract the downloaded JAR files Copy the JAR files into the ImageJ plugins directory. Do not copy the dependencies directory. Copy the contents of dependencies into the ImageJ jars directory (you can click \u0026ldquo;Skip\u0026rdquo; if there are existing files) Start ImageJ Run Plugins \u0026gt; JIPipe \u0026gt; JIPipe GUI (or use the search) to open the JIPipe GUI Please read about the additional steps after the installation  Post installation Depending on your ImageJ installation and the selection of available/activated JIPipe extensions, the following additional steps will be required to install all functionality:\n Various JIPipe extensions require the presence of specific ImageJ plugins. You will be prompted to install the ImageJ dependencies if JIPipe detects missing ones. Some extensions integrate third-party tools (e.g., Cellpose) that are not available as ImageJ plugin. JIPipe will notify you to install these tools and/or configure their usage within JIPipe. The default installation of JIPipe leaves some functionality deactivated to reduce the number of dependencies. You will be notified about these extensions.  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "To simplify the creation of expressions, JIPipe includes an expression editor component that shows all available functions and validates the code.\nOpen the expression editor by clicking the Edit f(x) button (red arrow 1) that opens a new window (red arrow 2).\nBut before we proceed, we need to establish some fundamentals on how the annotation system and the splitter work:\nThe Split \u0026amp; filter by annotation node iterates through each individual input data item and executes the user-provided expression where variables are set to the column value in the data table (the one you can review in the cache browser).\nAnnotations in JIPipe are always strings, thus also all variables that reference annotations are strings.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "The numbered subfolder will contain the actual cached data of the 1-channel measurements output (red arrow 1) in a *.csv file (red arrow 2).\nThe numeric folders are standardized. In JIPipe, navigate to Help \u0026gt; Data type compendium to review the exact specifications of the directory contents.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "Finally, edit the parameters of Export ROI node. Export data will export a *.roi file if only one ROI is present and otherwise compress all ROIs into a *.zip file. This node can optionally turn off this export behavior and export all ROIs into an individual *.roi file.\nAgain, set the Output directory to ExampleExports/ViaNodes with Output relative to project directory enabled.\nThe filename expression set to\n\u0026quot;rois_\u0026quot; + #Filename\rThis would yield a file that is for example named rois_blobs.zip or rois_blobs.roi depending on whether one or multiple ROIs are present.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "Run the node and observe the lower number of ROIs (red arrow 1, note 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "Now we need to annotate the images with the subfolder names. Add a new annotation node by looking for compatible nodes (red arrow 1) using the annotate keyword (red arrow 2). Be careful to choose the Create node option (red arrow 3) from the list, rather than the navigate option (red arrow 4). The latter choice can be used to easily navigate to an already created node, which is especially useful when navigating a complex pipeline (note 5)\nYou can hide all existing Find matching algorithm results by toggling the ➕ button next to the search bar.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "It is always good practice to output the final results of a compartment into the compartment output.\nAdd a new input slot to the compartment output node for the ROI list (red arrow 1) by searching for roi (red arrow 2) and selecting the ROI list data type (red arrow 3).\nName the new slot (red arrow 4) and add it to the node (red arrow 5).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "We will proceed to generate an integrated table.\nFrom the Tables menu (red arrow 1), add the node Integrate table columns (red arrow 2).\nIntegrate table columns allows to apply pre-defined integration methods (sum, min, max, mean, first or last row, \u0026hellip;) to a customizable set of table columns. The result will be a table with one row.\nIf you want to write a custom integration function, use Apply expression to columns that utilizes mathematical expressions.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "Here the Image input slot (red arrow 2) of the Convert ROI to RGB node (red arrow 1) is connected to the Image output of the Import images node (red arrow 3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and observe the Cache browser (red arrow 2). The segmented peroxisomes are now illustrated by the selected outputs of the Cellpose (2.x) node, e.g., in this example, we set Labels, ROI, Probabilities and XY flows as outputs (red rectangle), and selected Probabilities to be displayed (red arrow 3).\nYou might have noticed the Label data annotation in the list. You can remove them after the training step via the Remove data annotations node.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step11/",
	"title": "Step 11",
	"tags": [],
	"description": "",
	"content": "This action opens a new input slot Parameters on the threshold node (red arrow 1), which can be connected to the Define multiple parameters node (red arrow 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Begin by deleting the existing example expression. The expression will now be\nWe will now use the function builder component of the expression editor to convert the annotation value of Image composite channel count to a number that can be tested to be equal to 3:\n Use the search field to look for functions that work with numbers by using the search word number (red arrow 1), which will yield a function TO_NUMBER (red arrow 3). Select the item in the list. You will see a tab Function Convert to number Set the type of the value editor to Variable, because we want to convert a variable to a number (red arrows 2 and 3) Type in the name of the variable ( = annotation column in this case), which is Image composite channel count Click the Insert button  The expression now will be\nTO_NUMBER($\u0026quot;Image composite channel count\u0026quot;)\rFinally, add the code to test if the number of channels is 3 (red arrow 6)\nTO_NUMBER($\u0026quot;Image composite channel count\u0026quot;) == 3\rNow you can accept the changes to the expression by clicking the Accept button (red arrow 7).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "This file contains the cached results (red arrow 1), as observed in a spreadsheet viewer.\nThe results are organized in a columnar matter (red rectangle 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Run all the exporter nodes via Update cache and navigate into the ExampleExports/ViaNodes/ directory.\nObserve the generated files.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "We now plot the selected ROIs in an overlay image with the original 1-channel data. Browse the ROI menu (red arrow 1) to look for Convert functions (red arrow 2), and select the Convert ROI to RGB function (red arrow 3).\nConvert ROI to RGB visualizes ROI on top of an image. It is JIPipe\u0026rsquo;s equivalent of the ImageJ ROI Manager\u0026rsquo;s visualization feature.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Run the new node (red arrow 1) and observe the cache (red arrow 2). Note that now the subfolder names are also remembered (red arrow 3), and that the parent name (red arrow 4) reflects the folder directly above the current subfolder (red arrow 5).\nFor the subfolder name (red arrow 3), we changed the default name as shown above for the previous annotation node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Add another input slot for Measurements (use the search word “results” to find the Results table data type) (red arrow 1).\nConnect all three slots to the corresponding output slots (red arrows 2 to 4).\nThis completes this workflow.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Select the Integrate table columns (red arrow 1) and edit the Processors parameters in the Parameters tab (red arrow 2):\nSet the Input column to the following value:\n\u0026quot;Density\u0026quot;\r\rIf you reference existing columns, always put the name in quotation marks. The function for selecting columns can be heavily customized, as it is expression-based an can under certain circumstances yield unexpected results if the name is typed in as is.\nFor example, if there is an annotation Density set to XYZ, and the expression is just set to Density, the node would search for a column with the name XYZ, as the expression system tries to look for a known value with the name Density.\nThis will not happen if you put quotation marks around the column name, e.g., \u0026quot;Density\u0026quot;.\n\rProceed by choosing the Average as a mode of operation (red arrow 4), and provide a name for the new results (e.g., AVG density, red arrow 5).\nThe Output column does not require quotation marks, as it is not an expression - just a text.\nYou can differentiate expressions from text by the UI design:\n Expressions are colored, while pure text is always black Expressions have an Edit button, while pure text has a button to clear the current value.  \r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "To check the quality of the segmentation results visually, add a Convert ROI to RGB node to the UI (red arrow 1), connect it to the ROI output of the Cellpose (2.x) node (red arrow 2) and to the Test dataset (red arrow 3) of the Split data randomly (Percentage) node.\nObserve the output in a viewer (red arrow 4) and notice the high quality of the segmentation (yellow circles outlining the peroxisomes).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step12/",
	"title": "Step 12",
	"tags": [],
	"description": "",
	"content": "Run the threshold node (red arrow 1) and observe that the cache now contains as many images as the number of selected threshold methods (red rectangle 2).\nThe name of the method and the threshold value also appear as annotations (red rectangle 3).\nHere it is named \u0026ldquo;MethodMethod\u0026rdquo;, because we set the prefix to \u0026ldquo;Method\u0026rdquo;\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step13/",
	"title": "Step 13",
	"tags": [],
	"description": "",
	"content": "Select the filter node (red arrow 1) and observe the Output field in the Parameters tab (red arrow 2); It now contains the filtering expression.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step13/",
	"title": "Step 13",
	"tags": [],
	"description": "",
	"content": "Add the node to the UI (red arrow 1), connect it to the filtered ROI list (red arrow 2) and to the 1-channel image (red arrow 3).\nRun the node and observe the cache entry (red arrow 4) and the full image in a viewer (red arrow 5). The exclusion of the very small and very large ROIs can be observed.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step13/",
	"title": "Step 13",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and observe the Cache (red arrow 2).\nThe new cache entry (red arrow 3) now contains the new column AVG density (red arrow 4, red rectangle 5).\nIf you want to annotate data (an image, table, etc.) by the AVG density, use the node Annotate data with table values.\nIts Generated annotation parameter allows to generate an annotation from value(s) obtained from a table and attach it to the input of the Data slot.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step13/",
	"title": "Step 13",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s proceed by generating multiple parameters for the Gaussian blur.\nThe addition of number-type multiple parameters works very similarly.\nAdd another node Define multiple parameters (red arrow 1) which will be used with the Gaussian Blur 2D, controlling the Sigma (X) parameter.\nAdd a whole row (red arrow 2), import from a node (red arrow 3), select the Gaussian Blur 2D entry (red arrow 4) and choose Sigma (X) (red arrow 5). Accept the choice (red arrow 6).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step14/",
	"title": "Step 14",
	"tags": [],
	"description": "",
	"content": "Run the node (red arrow 1) and observe the Cache, where the 3-channel image will appear (red line 2), indicating that the filter worked, allowing the three-channel image through.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step14/",
	"title": "Step 14",
	"tags": [],
	"description": "",
	"content": "Select the image statistics node (red arrow 1) and duplicate it (red arrow 2). This menu is accessible via right-clicking on the middle green area of the node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/step14/",
	"title": "Step 14",
	"tags": [],
	"description": "",
	"content": "Finally, add three input nodes to the compartment’s output node and connect them accordingly. (red arrows 1-3).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step14/",
	"title": "Step 14",
	"tags": [],
	"description": "",
	"content": "Add more values (red arrow 1), edit their values (red arrow 2) b y setting the desired sigmas (red arrow 3), which will appear in the list (red arrow 4, red rectangle).\nA generator for numeric values is also available in Generate.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/analysis_video/",
	"title": "Basic image analysis pipeline",
	"tags": [],
	"description": "This step-by-step video tutorial explains how to create an image analysis workflow with simple algorithms like Gaussian blur, auto thresholding, and distance transform watershed. The segmented objects are quantified and plots are genereated.",
	"content": "\u0026lt;1.73.x\r\rThe video tutorial was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r \rThis tutorial is also available as text tutorial.\r\r\r"
},
{
	"uri": "https://www.jipipe.org/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "Here you can find all example projects and results. If you do not know what to do with the packages, please read through the tutorials referenced below.\n👉 Tutorial: How to load projects\rPlease take a look at this tutorial if you don\u0026#39;t know what to do with downloaded example projects.\r\r\r👉 Tutorial: How to browse results\rPlease take a look at this tutorial if you don\u0026#39;t know what to do with downloaded project \u0026#43; data packages.\r\r\r👉 Tutorial: How to import node templates\rPlease take a look at this tutorial if you don\u0026#39;t know what to do if a package comes with a Template.json file (Project \u0026#43; Data \u0026#43; Node templates).\r\r\r  Using the Coloc2 nodes\rsmall size\rcolocalization\rsimple\rtutorial\r\rA small example showcasing how to utilize the Coloc2 nodes.\rProject \u0026#43; Data\rDataset\r\r\r Host-pathogen interactions\rlarge size\rfluorescence\rconfocal\rcellpose\rcomplex\r\rAlveolar macrophages were confronted with various species of fungi, including Aspergillus fumigatus and various Lichtheimia species, followed either directly by microscopy, or first by tissue fixation and fluorescence labeling, and then confocal microscopy.\rProject \u0026#43; Data (42 MB)\rProject \u0026#43; Data \u0026#43; Outputs (91 MB)\rPublication\r\r\r Bacterial growth measured in fluid droplets\rmedium size\rdroplets\rcellpose\rcomplex\r\rMicrofluidic droplets of approximately 100 micrometer diameter were filled with a solution containing E. coli bacteria and the bacterial growth was observed via brightfield transmitted light microscopy. This JIPipe workflow finds the droplets that show bacterial growth.\rProject \u0026#43; Data (89 MB)\rProject \u0026#43; Data \u0026#43; Outputs (229 MB)\rPublication\r\r\r Kidney status check via glomeruli counting\rmedium size\rkidney\rlsfm\r\rThis pipeline analyzes light-sheet fluorescence microscopy of whole murine kidney data. These images were generated with staining specific to glomeruli, functional units of kidney. Here, we reduced the size of the image stack from 700 to 20, which non-workstation computers can process without issues.\rProject \u0026#43; Data (26 MB)\rProject \u0026#43; Data \u0026#43; Outputs (126 MB)\rPublication\r\r\r Conversion between ROIs and labels\rsmall size\rsimple\rtutorial\r\rA small example showcasing nodes for conversion between labels and ROIs and vice versa.\rProject \u0026#43; Data\r\r\r Nanoparticle delivery analysis in liver\rlarge size\rliver\rpublished\rcomplex\r\rMicelle nanocarriers were injected into the circulatory system of the mouse vie the tail veins. Two-photon microscopy was utilized to image the cargo delivered by the micelles to the hepatocytes, sinusoids, canaliculi and liver-sinusoidal endothelial cells.\rProject \u0026#43; Data (274 MB)\rProject \u0026#43; Data \u0026#43; Outputs (2.74 GB)\rPublication\r\r\r Training of a fully automated pipeline for detecting tissue in MSOT data\rlarge size\rmsot\rreal data\rpublished\rcellpose\rcomplex\r\rFor our 'MSOT cluster analysis toolkit' (MCAT), we developed a deep-learning-based approach for detecting the mouse tissue. The training was applied in JIPipe via our Cellpose nodes.\rProject \u0026#43; Data (2 GB)\rPublication\r\r\r Using the Omnipose segmentation nodes\rsmall size\rsegmentation\rdeep learning\rsimple\rtutorial\r\rA small example showcasing how to utilize the Omnipose nodes.\rProject \u0026#43; Data\rDataset\r\r\r Using the Analyze skeleton 2D/3D\rsmall size\rsimple\rtutorial\r\rA small example showcasing how to utilize the Analyze skeleton 2D/3D node.\rProject \u0026#43; Data\r\r\r Using the TrackMate nodes\rsmall size\rtracking\rsimple\rtutorial\r\rA small example showcasing how to utilize the TrackMate nodes.\rProject \u0026#43; Data\rDataset\r\r\r Tutorial: Adding and running nodes\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Adding and running nodes'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Importing an image I/II/III\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial series 'Importing an image'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Importing a directory of images I\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Importing a directory of images I'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Importing a directory of images II\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Importing a directory of images II'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Handling multi-channel images I\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Handling multi-channel images I'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Creating node groups\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Creating node groups I/II'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Creating node templates\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Creating node templates'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Annotations I (Filtering)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations I: Filtering'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Annotations II (Branching)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations II: Branching'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Annotations III (Modifying and merging)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations III: Modifying and merging'.\rProject\rTutorial\r\r\r Tutorial: Compartments I (Creating and connecting)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Compartments I: Creating and connecting'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Quantification and plotting\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Quantification and plotting'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: Cache I (Generating and viewing)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cache I: Generating and viewing'.\rProject \u0026#43; Data\rTutorial\r\r\r Tutorial: ROI processing\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'ROI processing'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Image properties and LUT\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Image properties and LUT'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Table processing\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Table processing'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Exporting data I (Machine-readable)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Exporting data I: Machine-readable'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Exports\rTutorial\r\r\r Tutorial: Exporting data II (Human-readable)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Exporting data II: Human-readable'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Exports\rTutorial\r\r\r Tutorial: Annotating data with measurements\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotating data with measurements'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Multiple parameter sets\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Multiple parameter sets'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: ImageJ macros\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'ImageJ macros'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Loops\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Loops'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Python\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Python'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Cellpose I (Segmentation)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cellpose I: Segmentation'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r Tutorial: Cellpose II (Training)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cellpose II: Training'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Model\rTutorial\r\r\r Using the Weka segmentation nodes\rsmall size\rweka\rsimple\rtutorial\r\rA small example showcasing how to utilize the Trainable Weka Segmentation nodes.\rProject \u0026#43; Data\rDataset\r\r\r Track analysis of unlabeled nematodes\rlarge size\rnematodes\rreal data\rpublished\rcomplex\r\rLive worms of the species C. elegans were recorded via transmitted light microscopy. The resulting time-series images are analyzed by a JIPipe pipeline.\rProject \u0026#43; Data (5 GB)\rProject \u0026#43; Data \u0026#43; Outputs (8 GB)\rPublication\r\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/merging-algorithms/",
	"title": "Merging input data",
	"tags": [],
	"description": "",
	"content": "You might need to develop an algorithm that does not simply iterate through its input(s), but organize it into groups to be merged. JIPipe comes with JIPipeMergingAlgorithm that uses the annotation attached during processing to find data rows that belong to the same data set. The implementation creates JIPipeMergingDataBatch instances that represent multiple data rows merged into one group.\nPlease access data via the data interface.\n\rThe only difference to JIPipeAlgorithm is that you need to override a different function called runIteration.\n// Annotates documentation to the algorithm @JIPipeDocumentation(name = \u0026#34;My Algorithm\u0026#34;, description = \u0026#34;Does something\u0026#34;) // Sets the algorithm category @JIPipeNode(nodeTypeCategory = MiscellaneousNodeTypeCategory.class) // Input and output slots @JIPipeInputSlot(value = ImagePlusData.class, slotName = \u0026#34;Input\u0026#34;, description=\u0026#34;The input\u0026#34;, autoCreate = true) @JIPipeOutputSlot(value = ImagePlusData.class, slotName = \u0026#34;Output\u0026#34;, description=\u0026#34;The output\u0026#34;, autoCreate = true) public class MyAlgorithm extends JIPipeMergingAlgorithm { /* This is the main constructor of the algorithm. It contains a reference to the algorithm info that contains some important metadata */ public MyAlgorithm(JIPipeNodeInfo info) { super(info); } /* A deep copy constructor. It is required. Please do not forget to deep-copy all important fields */ public MyAlgorithm(MyAlgorithm original) { super(original); // Deep-copy additional fields here  } /* The workload is run in this functon. You can also have the ability to inform the user about the current algorithm status for more complex algorithms. You can also query if the user requested cancellation Please read and write only via the data interface. */ @Override public runIteration(JIPipeMergingDataBatch dataBatch, JIPipeProgressInfo progress) { // Run your workload here  } } "
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/parameters/",
	"title": "Parameters",
	"tags": [],
	"description": "Explains advanced parameter features.",
	"content": "Table Of Contents\r Testing multiple parameters  Creating parameter sets  Interactive parameter designer Generate via expressions     Adaptive parameters  \r 1.74.x\u0026#43;\r\rSome features are only present in JIPipe version 1.74.0 or newer\r\r Many important settings of a node are located within its parameter panel (accessible by selecting the node and going to the Parameters tab). The editor contains the list of all parameters, and a section containing the current documentation that by default shows general information about the node. If you want to know more details about a specific parameter, click the help button next to the item, which will change the documentation to one specific to the parameter.\nOn this page you will also find brief descriptions about additional features of the parameter system.\nTesting multiple parameters 1.74.x\u0026#43;\r\rThis feature was redesigned in JIPipe 1.74.0\r\r Many nodes support a feature that allows to run a workload on multiple parameter sets. For example, you can apply different auto thresholding methods on the same node. To enable support for multiple parameters, switch to the Advanced parameters tab. Then enable the Enable multiple parameters button.\nThis will add a Parameters slot to the node that consumes data that represents the parameter sets.\nIf the advanced parameters tab or the button are not present, then the feature is not supported.\n\rCreating parameter sets There are two options to create parameter sets:\n use the interactive designer provided by the Define multiple parameters node generate parameter sets via an expression (Generate parameters from expression)  Independent of the choice, add the node into the pipeline and connect it to the Parameters slot.\nInteractive parameter designer \rOpening the parameter editor\rSelect the node and click the \"Edit parameters\" button.\r\r\r\rAdding the parameter\rParameter sets are represented as table where the column indicates the parameter and each row represents one parameter set. To create this table, start by importing a parameter from an existing node via the Import from node button and selecting one or multiple parameters (blue wrenches) from the available ones. Tables are portable between different nodes. For example, you can re-use a parameter set for a different instance of the same node type.\r\r\r\r\rAdding parameter sets\rTo add the first parameter set, click the Add button. After selecting the table cell in the editor, you can edit its value in the right-hand panel.\rIf you want more parameter sets, continue to add rows.\rYou can also generate values via the Generate function.\r\r\r\r\rGenerate via expressions An alternative mode to the interactive parameter set generator is the node Generate parameters from expression that generates parameter sets via an expression. Please note that this mode is more advanced and requires you to know about the exact properties of the parameter.\n\rIdentifying the parameter properties\rSelect the node that should be run with multiple parameter sets and click the help icon next to the parameter.\rCopy/write down the unique identifier and remember which type the parameter has.\r\r\r\rSetting up the columns\rAs with the interactive designer, the expression-based Generate parameters from expression node is representing parameter sets as columns. Each column is generated independently by an expression that returns one or multiple values. Insert the unique identifier into the Key setting and select the correct parameter type.\r\r\r\rSetting up the expression\rFinally, write an expression that returns the value or an array of values. For simple types (numbers, booleans, strings, ...), you can return the values directly. For example, MAKE_SEQUENCE can be utilized to generate numeric sequences.\rYou can also write the list directly via the ARRAY function, e.g., ARRAY(\"a\", \"b\", \"c\").\rFor more complex types, you should return the JSON representations of the parameter values and enable the Values are JSON setting. You can find JSON representations by either copying a parameter value via the arrow next to the help button or opening the Parameter explorer by right-clicking the node.\r\r\r\r\rAdaptive parameters 1.74.x\u0026#43;\r\rThis feature was redesigned in JIPipe 1.74.0\r\r Many nodes support parameters that can be adapted to the current annotation set. This, for example, allows to apply a thresholding based on an annotation value. Switch to the Advanced parameters tab to add adaptive parameters.\nHere you can either manually add items into the Overridden parameters list or click the Add adaptive parameter button to setup the appropriate unique parameter key and default value for a parameter.\n"
},
{
	"uri": "https://www.jipipe.org/installation/omero/",
	"title": "Regarding OMERO",
	"tags": [],
	"description": "",
	"content": "If you are installing JIPipe via the ImageJ updater site, you might have noticed a directory jars/omero that will be downloaded with the package.\nIt contains the absolute minimum of files to use OMERO for uploading and downloading images. We cannot guarantee that the JIPipe-provided OMERO libraries are compatible with your server setup or sufficient for any task outside basic image uploading and downloading.\n👉 We strongly recommend to install one of the OMERO packages from the ImageJ updater. You can find more information here.\n👉 Usually, JIPipe plugins come with metadata that indicate the expected update, thus prompting users with an installation dialog if any are missing. This is not possible, as OMERO client versions must be compatible to the OMERO server version.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/step15/",
	"title": "Step 15",
	"tags": [],
	"description": "",
	"content": "Insert the filter node into the pipeline by placing it in between the annotation node and the Split channels function (red arrow 1). Connect the new node to the functions above (red arrow 2) and below (red arrow 3). Make sure that the direct connection between the Annotate node and the Split channels node is removed beforehand.\nRun the Split channels node and observe its cache (red arrow 1) to demonstrate that the newly installed filtering function indeed worked (red line 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/step15/",
	"title": "Step 15",
	"tags": [],
	"description": "",
	"content": "Connect the duplicated node to the filtered ROI output (red arrow 1) and to the 1-channel image (red arrow 2).\nCreate two new input nodes on the Processing compartment output node: one for the filtered ROI measurements, and one for the ROI overlay image.\nConnect the old output slots (red arrows 1-3), as well as the two new ones to the output node (red arrow 4-5).\nNow the statistics are extracted from filtered ROIs.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step15/",
	"title": "Step 15",
	"tags": [],
	"description": "",
	"content": "In the Gaussian blur 2D node (red arrow 1) enable multiple parameters (red arrow 2), and use the parameter setting (red arrow 3).\nHere you can again provide a prefix if you want (red arrow 4).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/step16/",
	"title": "Step 16",
	"tags": [],
	"description": "",
	"content": "Connect the new parameter node (red arrow 1) to the Gaussian blur node (red arrow 2). Feel free to adjust the names of the parameter nodes to indicate their target (red rectangles 3 and 4).\nRun the nodes and observe that now we have 32 results (a combination of 4 gaussian sigmas and 8 threshold methods). Study the outcome of the Find particles node in terms of how these parameters affect the number of identified ROIs.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/algorithm/",
	"title": "Algorithm type",
	"tags": [],
	"description": "Defines a new algorithm",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: algorithm.schema.json\n\rDefines a new node type\r\r\rid:\r\rstring\r\r\r\r\r\r\rUnique algorithm ID\r\r\rmetadata:\r\rSee metadata\r\r\r\r\r\r\r\rGeneral algorithm metadata\r\r\rcategory:\r\rstring\r\r\rorg.hkijena.jipipe:miscellaneous\r\r\r\r\r\rThe category\r\r\rexported-parameters:\r\robject\r\r\r[object Object]\r\r\r\r\rList of parameters that will be exported to users of the node\r\r\rgraph:\r\rSee graph\r\r\r\r\r\r\r\rThis graph is executed when the algorithm is run\r\r\rmenu-path:\r\rstring\r\r\r\r\r\r\rOptional menu path within the category menu\r\r\rjipipe:project-type:\r\rstring\r\r, x ∈ {\rgraph-wrapper-algorithm\r\r(default)\r}\r\r\r\r\r\r\rIdentifies the JSON as algorithm\r\r\r\r\r\rExample { \u0026#34;id\u0026#34; : \u0026#34;folder-list-tif\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;List TIFF files\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Lists all TIFF files in a folder\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;category\u0026#34; : \u0026#34;Converter\u0026#34;, \u0026#34;parameter-visibilities\u0026#34; : { \u0026#34;visible-keys\u0026#34; : [ ] }, \u0026#34;graph\u0026#34; : { \u0026#34;nodes\u0026#34; : { \u0026#34;default-preprocessing-filter-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Filtered files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Filtered files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 250 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;file-filter\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;Filter *.tif\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;filters\u0026#34; : [ { \u0026#34;mode\u0026#34; : \u0026#34;Glob\u0026#34;, \u0026#34;filterString\u0026#34; : \u0026#34;*.tif\u0026#34; } ], \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } }, \u0026#34;default-preprocessing-list-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Folders\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;folder\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Folders\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 50 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;folder-list-files\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;List files\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } } }, \u0026#34;edges\u0026#34; : [ { \u0026#34;source-algorithm\u0026#34; : \u0026#34;default-preprocessing-list-files\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;default-preprocessing-filter-files\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Files\u0026#34; } ] }, \u0026#34;menu-path\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:project-type\u0026#34; : \u0026#34;graph-wrapper-algorithm\u0026#34;, \u0026#34;preferred-traits\u0026#34; : [ ], \u0026#34;unwanted-traits\u0026#34; : [ ], \u0026#34;added-traits\u0026#34; : [ ], \u0026#34;removed-traits\u0026#34; : [ ] } "
},
{
	"uri": "https://www.jipipe.org/documentation/basic-concepts/batch-processing/",
	"title": "Batch processing",
	"tags": [],
	"description": "Explains basic concepts about how data is processed within JIPipe. We really recommend to take a look at this documentation.",
	"content": "JIPipe was designed to always process data in batches, meaning that algorithms always work on multiple data sets at once. This greatly reduces the required work to upscale a processing pipeline from one or few to a large amount of data sets.\nWe will use this pipeline as example:\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rA[File] -- B[Load image]\rB -- C[Apply gaussian]\r In the pipeline, a file is provided as input. Then the file is loaded as image. Finally, the image is processed with a gaussian filter.\nA possible implementation of such a pipeline consists of three algorithms, one for each processing step. An algorithm consumes input and produces output. The exception is the algorithm that loads a user-defined file path into the pipeline.\nJIPipe extends on this concept by allowing input and output slots contain multiple data sets at once. And depending on the algorithm, it either processes each data set individually, or splits, merges, or transforms the list of input data.\nHandling multiple inputs There might be algorithms that require multiple inputs:\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rA[Image channel 1] -- B[Merge channels]\rC[Image channel 2] -- B\r The Merge channels algorithm merges the two image channels into one image with two channels. If each data slot only contains one entry, finding image channels that belong to the same data set is trivial.\nFor list-based data slots, like in JIPipe, it is not trivial to find images that should be merged. For example, image1_C1 and image1_C2 should be merged to image1_merged:\nData annotations JIPipe solves this issue by allowing to annotate each data entry (shown as purple entries). Those annotations are in this case automatically extracted and used to group input data. There also can be algorithms that use the annotation information to for example filter or sort data.\nThere are predefined algorithms located within the Annotate menu that for example create annotations based on filenames. JIPipe supports an unlimited amount of annotations that can be attached to data.\nFollowing JIPipe pipeline provides an example of making use of annotations to allow multiple inputs:\nTutorial video We created a video that illustrates how to create a batch processing pipeline:\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-1/",
	"title": "Cellpose I: Segmentation",
	"tags": [],
	"description": "Explains how to utilize the Cellpose nodes for segmentation",
	"content": "👉 Related tutorial: ROI processing\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Cellpose I (Segmentation)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cellpose I: Segmentation'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/old/extension/",
	"title": "Creating an extension",
	"tags": [],
	"description": "This step-by-step tutorial explains how to create an JIPipe extension from parts of an existing pipeline without the need for programming.",
	"content": "\r1. Existing pipeline\rIn this tutorial, we will create a custom algorithm extension based on parts of the pipeline created in the other tutorial.\rPlease open the project file for the pipeline and navigate to the Preprocessing tab.\r\r\r\r2. Selecting the algorithms\rPlease select the following algorithms (you can either do this by holding the Shift keyboard button and clicking the nodes or dragging a selection around the nodes):\r\rFolder list\rPath to annotation\rList files\rImport image\r\rAfter selecting the algorithms, right-click a selected node and click Export.\r\rSelecting one or multiple algorithms is only one way to create a custom algorithm. You can also export a whole project compartment (via the Compartments tab) or\rthe whole pipeline (via Project \u0026gt; Export as custom algorithm)\r\r\r\r\r3. Preview\rThis will open a new tab where you can see a preview of the pipeline that will be exported.\rYou see that the connections between the selected algorithms were kept, while two additional nodes were added:\r\rGroup input\rGroup output\r\rThose two nodes respectively act as input and output of the whole exported algorithm. Its input and output slots will be accessible to users of your custom algorithm.\rJIPipe automatically creates matching input and output slots based on the selected algorithms, but you can choose to modify your pipeline in this step.\rNow click Export to extension and then New extension.\r\rYou can always modify custom algorithms within the extension builder. This will be shown in a later step.\r\r\r\r\r4. Extension builder\rThis will open the JIPipe extension builder tool that allows you to package one or multiple custom algorithms into an extension. Such extensions can be just put\rinto the ImageJ plugin directory and will be automatically picked up by JIPipe just like any ImageJ plugin.\rAn extension has a set of metadata that you need to set up. To do this, switch to Extension settings.\r\rYou can always find the extension builder in Plugins \u0026gt; New JSON extension ...\r\r\r\r\r5. Extension metadata\rJIPipe utilizes a unique extension ID to identify an extension. This is the most important setting and should be chosen carefully. The format must follow a specific structure: [Author]:[Extension], where [Author] provides information about the extension author, and [Extension] contains some identifier. We recommend to let the [Author] information follow the Maven naming conventions.\rAll the other metadata can be freely chosen or left out (with the exception of the name). Use the other metadata to add authors (including affiliations), a website, define a license, and cite\rwork your pipeline is depending on.\rFinally, you can review or modify the extension contents by going to Extension contents.\r\rAny dependency to other JIPipe extensions are automatically stored within any project or extension file. JIPipe uses this information to figure out a valid load order.\r\r\r\r\r6. Extension content\rOur custom algorithm is already included in the list of extension contents (left-hand side). You only need to provide metadata. The most important setting is the unique algorithm ID that is\rused by JIPipe to identify your algorithm. Please choose a meaningful string that avoids having duplicate identifiers. Then you can provide a name, category, icon and menu location.\r\rThe extension builder will warn you if an algorithm ID already exists (we will show this function later). You can choose to ignore this if a duplicate ID is intentional - this will\roverride an algorithm and replace it by the new one.\r\r\rAlgorithm IDs are not namespaced, meaning that they are independent of the extension ID.\r\r\r\r\r7. Parameters\rBy default, your algorithm does not come with parameters aside of the few default parameters (name, description, pass-through, enable). For your pipelines it can be useful to\rlet users change some parameters. The Exported parameters section gives you full control on which parameters can be changed and how they are organized.\rFirst, you need to create a group by clicking the  Add group button. This will create a new section in the final parameter UI. Then you can\rreference parameters by clicking  Add parameter. You can customize the name and descriptions of any item.\r\rIt is always a good idea to check the parameters or maybe apply some corrections to the algorithm. To do this, click  Edit graph\r\rYou can just add all parameters of a specific algorithm by clicking Auto add algorithm. Just check if users can properly decipher the function of each parameter.\r\r\rHover over the blue  wrench icon to display information about the referenced parameter.\r\r\rEach parameter can only be referenced once. You will get a warning if you have duplicate references.\r\r\r\r\r8. Modifying the algorithm\rThe extension builder contains a fully function algorithm graph editor (aside of anything that runs the graph) that allows you to modify an algorithm or create\rone from scratch. Use the editor to check the parameters of your algorithm. For example, it is a good idea to remove the folders from the Folder list algorithm.\r\r\r\r9. Validation and installation\rClick the  Validate button on the top right corner to check for any issues. This tool will also detect duplicate extension and algorithm IDs.\rErrors about duplicates can be ignored if they are intentional.\r\rFinally, you can install the extension by clicking  Install. This will open a dialog to save the extension into the ImageJ plugin directory and\rattempt to load the extension.\r\rWe still recommend to restart ImageJ, especially if you are installing duplicate IDs.\r\r\r\r\r10. Using the algorithm\rYou can find your algorithm in the menu, navigation bar, and algorithm finder just like any other algorithm. You can see that the parameters are included according to the settings within\rthe extension builder.\r\rJSON Algorithms can be always converted into  Group nodes that unlink the underlying pipeline from the JSON algorithm definition\rand allows users to modify them. Just select  Convert to group to apply such conversions.\r\r\r Group nodes are related to JSON algorithms. If you export a single group node, its contents are exported into an algorithm instead of\rthe node itself.\r\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/create-extension/",
	"title": "Creating an extension project",
	"tags": [],
	"description": "Explains how to setup a SciJava plugin project to extend JIPipe",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Prerequisities  Java 8 (Java 9+ are not working)  If you are using Windows or a Linux distribution without Java 8, we recommend AdoptOpenJDK (Please choose OpenJDK 8)   Maven  Creating the project The project should have following structure:\nProject root\r└── pom.xml\r└── src\r└── main\r├── java\r└── resources\rBoth the java and resources folder should contain a folder structure that is equivalent the groupId and artifactId of the project. This is done to prevent conflicts with other plugins.\nJIPipe is based on SciJava and requires libraries provided by the SciJava Maven repository.\nHere is an example *.pom file that you can adapt for your project: https://github.com/applied-systems-biology/jipipe/blob/master/jipipe-strings/pom.xml\nCreating an extension service JIPipe uses the SciJava plugin API to register Java extensions. In your project, you can create as many extensions as you want.\nExtensions can register multiple nodes and data types, so you can greatly simplify your projects by merging multiple functions into a single extension.\n\rJava extension inherit from JIPipeJavaExtension and require a @Plugin annotation.\nWe recommend to inherit from JIPipeDefaultJavaExtension that comes with some convenience-functions.\nA minimal extension can be found here:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // We recommend to create a static AS_DEPENDENCY variable that contains the dependency ID, name, and version of the extension  // This simplifies the usage in getDependencies() for extensions that are based on your library  public static final JIPipeDependency AS_DEPENDENCY = new JIPipeMutableDependency(\u0026#34;CHANGEME\u0026#34;, \u0026#34;1.0.0\u0026#34;, \u0026#34;My extension\u0026#34;); // If you have custom icons, thumbnails etc., create a JIPipeResourceManager instance that points towards the root directory of your resources  // Please read the documentation of JIPipeResourceManager for more information on how to structure the resources directory  public static final JIPipeResourceManager RESOURCES = new JIPipeResourceManager(MyExtension.class, \u0026#34;resource/directory/of/my/extension\u0026#34;); public MyExtension() { getMetadata().addCategories(PluginCategoriesEnumParameter.CATEGORY_SCRIPTING); // You can annotate your extension with ImageJ Wiki categories (Optional)  getMetadata().setThumbnail(new ImageParameter(RESOURCES.getResourceURL(\u0026#34;thumbnail.png\u0026#34;))); // Set the thumbnail from the extension\u0026#39;s resources (Optional)  } @Override public String getName() { return \u0026#34;My extension\u0026#34;; } @Override public HTMLText getDescription() { return new HTMLText(\u0026#34;A Java extension\u0026#34;); } @Override public String getDependencyId() { // We recommend the following structure: \u0026lt;groupId\u0026gt;.\u0026lt;artifactId\u0026gt;:\u0026lt;dependencyId\u0026gt;  // (!) The dependency Id should be unique for each extension @Plugin (!)  return \u0026#34;CHANGEME\u0026#34;; } // You can optionally override the version.  // @Override  // public String getDependencyVersion() {  // return \u0026#34;1.0.0\u0026#34;;  // }  @Override public String getAuthors() { return \u0026#34;Ruman Gerst\u0026#34;; } @Override public String getWebsite() { return \u0026#34;https://jipipe.org/\u0026#34;; } @Override public String getLicense() { return \u0026#34;BSD-2\u0026#34;; } // You can add one more multiple logos on the JIPipe splash screen  // They must be 32x32 in size  // Please do not add too many of them to not fill up all the space  // @Override  // public List\u0026lt;ImageIcon\u0026gt; getSplashIcons() {  // return Collections.singletonList(new ImageIcon(getClass().getResource(\u0026#34;org/hkijena/jipipe/extensions/myextension/icon-32.png\u0026#34;)));  // }  @Override public String getCitation() { // Here you can enter a citation for your publication  // It will be displayed in the plugin manager  return \u0026#34;\u0026#34;; } @Override public void register(JIPipe jiPipe, Context context, JIPipeProgressInfo progressInfo) { // Content is registered here  // You can have multiple registerNodeType, registerDataType etc. in this place  } // Optional: run code after this and other extensions are registered (for example to create notifications; see https://github.com/applied-systems-biology/jipipe/blob/master/jipipe-python/src/main/java/org/hkijena/jipipe/extensions/python/PythonExtension.java)  // @Override  // public void postprocess() {  // } } Testing your extension Use following code to create an ImageJ2 instance that immediately loads JIPipe:\npublic static void main(final String... args) { final ImageJ ij = new ImageJ(); ij.ui().showUI(); // If your ImageJ freezes, you can leave this out. JIPipe will show anyways.  ij.command().run(JIPipeGUICommand.class, true); } "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/slot-configuration/",
	"title": "Customizing slots",
	"tags": [],
	"description": "",
	"content": "In the previous examples, we used the @JIPipeInputSlot and @JIPipeOutputSlot annotations with autoCreate = true to automatically configure the slots.\nThis is not sufficient for more complicated algorithms that require\n Restricting the number of slots Restricting the allowed data types Users to add more slots or remove existing ones  A custom JIPipeSlotConfiguration can be used to implement such more advanced behaviors.\nFor many cases, the default implementation JIPipeMutableSlotConfiguration is sufficient.\nThe slot configuration can be overriden during instantiation of the algorithm:\npublic MyAlgorithm(JIPipeNodeInfo info) { super(info, JIPipeMutableSlotConfiguration.builder() .addInputSlot(\u0026#34;Input\u0026#34;, ImagePlusData.class) .restrictOutputTo(ImagePlusData.class) .build()); } \rThe slots of JIPipeMutableSlotConfiguration are by default unsealed - meaning that users can add more slots. Use the seal() functions to prevent this.\n\rDo not create static slot configurations. Each algorithm should have its own instance. Use a private static function if you want to work outside the capabilities of the builder.\n\rYou should keep the @AlgorithmInputSlot and @AlgorithmOutputSlot annotations. They are required for the algorithm finder and generating tooltips.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/",
	"title": "Features",
	"tags": [],
	"description": "Tutorials that focus an a specific feature of JIPipe",
	"content": "1.74.x\u0026#43;\r\rThe guides were written for JIPipe version 1.74.0 or newer\r\r Here you can find a list of tutorials that focus on a specific feature or use case\n JIPipe for teaching\nGives an overview about the JIPipe features that help teaching image analysis\n\r Cellpose I: Segmentation\nExplains how to utilize the Cellpose nodes for segmentation\n\r Cellpose II: Training\nExplains how to utilize the Cellpose nodes for segmentation and transfer learning\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/compartments2/",
	"title": "Graph compartments: Outputs",
	"tags": [],
	"description": "",
	"content": "By double-clicking a compartment in the Compartments tab, it is opened in a pipeline editor tab (red arrow 1).\nCompartments communicate to each other via interface nodes: each compartment has a dedicated output node that determines the outputs of the current compartment (red arrow 2).\n👉 When creating exercises, use this feature to define the outputs of each specific compartment. This can help students who need guidance on what kind of data should be produced in each image analysis step.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-browse-results/",
	"title": "How to browse results",
	"tags": [],
	"description": "Explains how to browse results with JIPipe (if provided by the example).",
	"content": "\rThis tutorial assumes that you have installed JIPipe. If you want information on how to setup our software, please visit the installation guide.\nLearn how to install JIPipe \n\rThis tutorial only applies to examples that come with results. If the example only provides projects and data, please follow our other guide.\n\r1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r\n"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/imagej-integration/",
	"title": "ImageJ integration",
	"tags": [],
	"description": "This library provides integration of ImageJ data types, as well as common ImageJ algorithms.",
	"content": "The ImageJ integration library integrates common data types from ImageJ into JIPipe:\n Multi-dimensional images (ImagePlus). The standard output file format are TIFF files. Result tables. They are serialized to CSV files. Region of interest (ROI Manager). JIPipe handles ROI as *.zip files.  The ImageJ data types are marked as accessible from outside JIPipe, meaning that algorithms that only use those types can be executed standalone\nImage data types Various ImageJ algorithms only work on data with a specific color type, or dimensionality. To make it easier for algorithms to specifiy which types are suitable, the JIPipe standard library introduces various image sub-types (e.g. 8-bit greyscale 3D image).\nThe library is set up to automatically convert any image data type into any other image data type. During this conversion, the data types automatically attempt to satisfy their constraints or raise an error. The conversion automatically converts a lower-dimensional image into a higher-dimensional image (e.g. 2D to 3D), but not the other way around.\nThe image data types are organized in the following way:\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rImgPlus[\"Image (nD)\"] -- ImgPlusGreyscale[\"Greyscale image (nD)\"]\rImgPlusGreyscale -- ImgPlusGreyscale8U[\"8-bit greyscale image (nD)\"]\rImgPlusGreyscale8U -- ImgPlusGreyscaleMask[\"8-bit mask (nD)\"]\rImgPlusGreyscale -- ImgPlusGreyscale16U[\"16-bit greyscale image (nD)\"]\rImgPlusGreyscale -- ImgPlusGreyscale32F[\"32-bit float greyscale image (nD)\"]\rImgPlus[\"Image (nD)\"] -- ImgPlusColor[\"Color image (nD)\"]\rImgPlusColor -- ImgPlusColorRGB[\"RGB color image (nD)\"]\rImgPlusColor -- ImgPlusColorHSB[\"HSB color image (nD)\"]\rImgPlusColor -- ImgPlusColorLAB[\"LAB color image (nD)\"]\r The graph above shows the structure for non-dimensional (nD) images. This structure is repeated for 2D, 3D, \u0026hellip; 5D images.\nColor spaces The standard library comes with support for different color spaces and supports automated conversion between them.\nEach image stores the color space (allowing for example to remember the color space of a HSB image stored inside a generic image). Color space conversions are automatically applied (e.g. from RGB to greyscale). While trivial for specific color types (like RGB color), JIPipe falls back to following color spaces for generic colors (e.g. greyscale image):\n   Color space Fallback colorspace     All greyscale images 32-bit float greyscale   All colored images RGB color    Please note that if the color space information is lost, RGB is used as fallback. Color conversion nodes in Images \u0026gt; Colors \u0026gt; Convert\nFrequency space image data types The JIPipe standard library contains color types that are intended to hold frequency-space (FFT) data. While the standard library only provides methods to handle 2D FFT, there are 3D, \u0026hellip;, 5D data types available for future extensions.\nWe rely on the mechanisms provided by ImageJ. For example, the ImageJ FFT generates a 8-bit greyscale power spectrum image and attaches data to the image instance. JIPipe has no special methods to load and save the FFT data, aside from the image data itself. We recommend to generate FFT data within the pipeline to generate the correct data.\n\rImageJ algorithms The standard library provides a selection of common ImageJ algorithms as JIPipe algorithm nodes. Those algorithms wrap around the respective ImageJ methods and have the same feature set, aside from some changes that are required to make algorithms usable in a batch-environment like JIPipe.\nYou can find a list of all algorithms via the  Help menu on the top right corner and the item Algorithm compendium.\nMacro node If an algorithm is not available as JIPipe node, you can use the Macro node.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/",
	"title": "Intermediate",
	"tags": [],
	"description": "Tutorials that explain the intermediate-level features of JIPipe",
	"content": "1.74.x\u0026#43;\r\rThe guides were written for JIPipe version 1.74.0 or newer\r\r Here you can find a list of tutorials that explain the features of JIPipe suitable for intermediate-level users.\n Creating node groups I\nExplains how to group a set of nodes into a single group node\n\r Creating node groups II\nExplains how to group a set of nodes into a single group node\n\r Creating node templates\nExplains how to save one or multiple nodes into a custom node template, as well as how to import/export templates.\n\r Multiple parameter sets\nExplains how to apply multiple parameter sets per node\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/jipipe-for-imagej-users/",
	"title": "JIPipe for ImageJ users",
	"tags": [],
	"description": "This video explains the basics of creating pipelines in JIPipe - aimed towards users already familiar with ImageJ.",
	"content": "\r"
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/expressions/",
	"title": "Mathematical expressions",
	"tags": [],
	"description": "Explains the expression parameter type language that is often used for filtering or generating numbers.",
	"content": "Table Of Contents\r   Variables Statements Pairs Escaping expressions Operators Functions User functions   Data types  Numbers Strings Arrays Maps   Operators  Precedence Compatible types    \r When using nodes that filter or generate data, you might encounter a parameter type called \u0026ldquo;Expression\u0026rdquo;. This parameter allows to to write simple to complex functions that can test for one or multiple conditions or act as input for a generator node. The basic concept of this expression language is to mix string, boolean, and numeric operations into one simple but powerful language. It allows you for example to first calculate a numeric metric and use it for filtering objects within one line.\nThere are always four components you will interact with:\n Literals like numbers (0.5), strings (\u0026quot;hello world\u0026quot;), and boolean values (TRUE, FALSE) Variables that are supplied from the node itself like x, y, or Area Functions that process literals or variables like MIN(x, 5), STRING_EQUALS(\u0026quot;abc\u0026quot;, \u0026quot;abc\u0026quot;). Parameters are separated by commas. Operators that do something with the literals, variables, or function results, like subtraction, concatentation, or conditions New in 1.74.0: The $ operator has a second function: escaping expressions into strings.  The expression language is interpreted as one line and you cannot write own variables. The result of the one expression is supplied to the node for processing.\nThe user interface of the expression parameter allows you to type the expression via a text field. You can also create new lines if you have longer expressions. They will be all merged automatically. If you are unfamiliar with the expression language, you can click the button to open a tool that lists all available functions and operators. This tool will help you to build expressions and check the syntax.\nTo get familiar with expression, use JIPipe\u0026rsquo;s integrated calculator tool (Tools \u0026gt; Development \u0026gt; Calculator). You can play around with any expression you like without breaking something.\n\rVariables Variables are set externally by the node and can contain various useful values. For example, filter nodes will put numbers into the variables. Image generator nodes might put the pixel coordinates into them.\nExample Here the node supplies the variables x and y and expects a number back. You can input a formula that will be automatically applied to ally x and y values:\n(x + y) + x/y + 1\r\rThe expression builder shows a list of all variables. This list might be incomplete if variables are generated during the runtime (e.g., extracted from a table).\n\rStatements You can also set variables to re-use them in more complicated calculations by introducing multiple statements:\nSET_VARIABLE(\u0026quot;x\u0026quot;, 5); PRINT(\u0026quot;x=\u0026quot;, x); SET_VARIABLE(\u0026quot;y\u0026quot;, x + 5); PRINT(\u0026quot;y=\u0026quot;, y); y + 15\rThe code above will run the operations from left to right and print into your console:\nx=5\ry=10\rThe return value will always be the right-most operation (here 15)\nStatements are technically operators and therefore are affected by brackets. We recommend to not put statement operators into brackets and only use them to make multiple lines of code.\n\rAs you can use new-lines in expression editors, we recommend to put each statement into a new line:\nSET_VARIABLE(\u0026quot;x\u0026quot;, 5); PRINT(\u0026quot;x=\u0026quot;, x); SET_VARIABLE(\u0026quot;y\u0026quot;, x + 5); PRINT(\u0026quot;y=\u0026quot;, y); y + 15\r\rYou can end the code with semi-colons, e.g. PRINT(5);;;;;. These will be ignored.\n\rPairs 1.74.x\u0026#43;\r\rThe pair operator and SET_VARIABLES were introduced in JIPipe 1.74.0\r\r Escaping expressions 1.74.x\u0026#43;\r\rExpression escaping requires JIPipe 1.74.0 or newer\r\r There are various functions that require the input of a \u0026ldquo;sub-expression\u0026rdquo; that for example is executed for each item:\nMAKE_SEQUENCE_EXPR(\u0026quot;item + 1\u0026quot;, ARRAY(1,2,3))\rThe item is a variable that is set for each array item. The result that is generated is an array [2,3,4].\nIt can be complicated to provide more advanced expressions as string parameter. This is the reason behind the escape expression operator ${ }. All parts within the braces are not evaluated and instead converted into an appropriate string.\nExample usage:\nMAKE_SEQUENCE_EXPR(${item + 1}, ARRAY(1,2,3))\rOperators The expressions understand a wide range of common operators for numeric, string, and boolean data:\n You can add, subtract, divide, \u0026hellip; numbers Strings can be concatenated or checked for if one string contains another All basic boolean operators are available  Example You can combine various operators to do complex filtering. Here the node supplies variables Area and MaxWidth:\n(Area \u0026gt; 1000) AND ((MaxWidth^2 / Area \u0026gt; 0.5))\rFunctions The expression language comes with a large library of predefined functions that you can use for more complex tasks:\nExample To find files, it can be useful to utilize a Glob-filter that can reliably test for the file extension. Here name is the file name and supplied by the node.\nSTRING_MATCHES_GLOB(name, \u0026quot;*.tif\u0026quot;) AND (\u0026quot;data\u0026quot; IN name)\rUser functions 1.74.x\u0026#43;\r\rThis type of user-created function was introduced in JIPipe 1.74.0\r\r You can create custom functions to be utilized within the current expression via the FUNCTION(name, expression) function. The function then can be executed via RUN_FUNCTION(name, parameter 1, parameter 2, ...). The parameters must correspond to the expected variable names inside the function and must be provided via PAIR(name, value), ARRAY(name, value), or name: value (pair operator).\nExample\nFUNCTION(\u0026quot;ADD_ONE\u0026quot;, ${ x + 1 });\rRUN_FUNCTION(\u0026quot;ADD_ONE\u0026quot;, \u0026quot;x\u0026quot;: 1)\rThe output will be 2\nExample 2\nFUNCTION(\u0026quot;ADD\u0026quot;, ${x + y});\rRUN_FUNCTION(\u0026quot;ADD\u0026quot;, \u0026quot;x\u0026quot;: 1, \u0026quot;y\u0026quot;: 2)\rThe output will be 3\nData types The expression language supports five basic data types: Numbers, strings, arrays, and maps\nNumbers Numbers are any kind of number (integer or floating point). Number literals are read as floating point numbers (double).\nExample: 1, 0.5\nStrings Strings are character sequences (texts). They are defined by putting double quotes around a text. If you want to have a double quote inside your string, escape it via \\. If you want a \\ in your text, escape it with another \\.\nExample: \u0026quot;hello world\u0026quot;, \u0026quot;this text has a \\\u0026quot; quote and \\\\ backslash\u0026quot;\nArrays Arrays are collections of values. They are defined via the ARRAY(...) function. Individual items are access via the @ operator and a numeric index starting from zero.\nExample: ARRAY(1,2,3,4) @ 2 will return 3.\nExample: ARRAY(1,2,3,4) @ ARRAY(0,1) will return an array with 1 and 2\nA special case are arrays with two entries (pairs) that can be also created via PAIR(a, b) or the colon operator a: b.\nMaps Maps are collections of values where each value is given a unique name. They are defined via the MAP(...) function that should be provided with 2-item arrays (there is a PAIR(key, value) function for this). You can get an array of all keys via the KEYS() function and can access elements via the @ operator.\nExample: MAP(PAIR(\u0026quot;a\u0026quot;, 1), PAIR(\u0026quot;b\u0026quot;, 2), PAIR(\u0026quot;c\u0026quot;, 3)) @ \u0026quot;b\u0026quot; returns 2\nExample: KEYS(MAP(PAIR(\u0026quot;a\u0026quot;, 1), PAIR(\u0026quot;b\u0026quot;, 2), PAIR(\u0026quot;c\u0026quot;, 3))) returns an array with a, b, and c\nExample: VALUES(MAP(PAIR(\u0026quot;a\u0026quot;, 1), PAIR(\u0026quot;b\u0026quot;, 2), PAIR(\u0026quot;c\u0026quot;, 3))) returns an array with 1, 2, and 3\nOperators There are many operators with alternative ways to write them available. There are two kinds of operators:\n Symbolic operators are using symbols like $, \u0026amp; or * Textual operators are written words like AND or CONTAINS  The difference between the operators is that symbolic operators can be written without spaces. For example you can write 5+5 or !x. Textual operators require spaces to be separated. For example you cannot write NOTx. You have to write NOT x.\n   Operator Description Usage     Statement Returns the last value of the statement chain. SET_VARIABLE(\u0026quot;x\u0026quot;, 5); PRINT(x)   Pair Array with the two operands. \u0026quot;x\u0026quot;: 10   Logical AND Returns TRUE if both operands are TRUE x AND y or x \u0026amp; y   Logical OR Returns TRUE if one of the operands is TRUE x OR y or `x   Logical XOR Returns TRUE if exactly one operand is TRUE x XOR y   Logical NOT Returns TRUE if input is FALSE and vice versa NOT x or ! x   Numeric division Divides the left by the right operand x / y   Numeric exponent Calculates left to the power of the right operand x ^ y   Numeric subtraction / Array removal Subtracts right from left (Numbers). If the operands are arrays, the right items are removed from the left array x - y   Numeric multiplication Multiplies the two operands x * y   Numeric addition / String concatenation / Array concatentation Adds two numbers. Concatenates if the operands are strings. Merges two arrays x + y   Numeric greater than Returns TRUE if the left operand is greater than the right one x \u0026gt; y   Numeric greater or equal Returns TRUE if the left operand is greater or equal to the right x \u0026gt;= y   Numeric less than Returns TRUE if the left operand is less than the right one x \u0026lt; y   Numeric less or equal Returns TRUE if the left operand is less or equal to the right one x \u0026lt;= y   Numeric / String / Boolean equality Returns TRUE if the operands are equal x == y or x EQUALS y   Numeric / String / Boolean inequality Returns TRUE if the operands are unequal x != y or x UNEQUAL y   Numeric negation This is technically an operator -x   Numeric modulo Calculates the modulo x % y   Contains Returns TRUE if the one string is contained in the other one (both operands are strings), or if an array contains an item, or a map contains a values x IN y or y CONTAINS x   Variable exists Returns TRUE if the a variable with the name exists x EXISTS   Resolve variable Returns the value of the variable with name. Useful for variables that have spaces in their names or special characters. $ x (Alternative function: GET_VARIABLE(x))   Escape expression Prevents the evaluation of all text within the braces and returns the content as string. ${ x + y * SIN(10) }   Get item in array/map Returns the array item(s) or string characters of the left operands. The right-hand side can be a number (the index starting from 0) or an array of indices. If the left operand is a map, the indices are whatever the map uses as index x @ y or x AT y    Precedence The operators are ordered according to a precedence table. You might need to use brackets (()) to force the order you expect:\nThe higher the number is the more the operator is preferred.\n   -99999 -1000 1 2 3 4 5 6 7 8 9 10     Statement (;) Pair (:) OR AND NOT             XOR                  Subtraction (x - y) Divide (x / y)  Power (x^y) Negate (-x)           Modulo (x % y)              Multiply (x * y)            Greater than or equal (x \u0026gt;= y)              Greater than (x \u0026gt; y)              Less than or equal (x \u0026lt;= y)              Less than (x \u0026lt; y)              Equal (x == y)              Unequal (x != y)               String contains (x IN y)              Addition (x + y)              String contains (x CONTAINS y)               Variable exists (x EXISTS)                Array/Map access (x @ y) Variable resolve ($ x)    Compatible types Not all operators are compatible to all types. See following table for the operator\u0026rsquo;s behavior:\n   Operator Number Boolean String Array Map     Statement (;) OK OK OK OK OK   Pair (:) OK OK OK OK OK   AND Error OK Error Error Error   NOT Error OK Error Error Error   OR Error OK Error Error Error   XOR Error OK Error Error Error   Divide (x / y) OK OK (TRUE=1, FALSE=0) Works (If can be converted to number) Error Error   Multiply (x * y) OK OK (TRUE=1, FALSE=0) Works (If can be converted to number) Error Error   Modulo (x % y) OK OK (TRUE=1, FALSE=0) Works (If can be converted to number) Error Error   Subtract (x - y) OK OK (TRUE=1, FALSE=0) Works (If can be converted to number) OK (both operands are arrays) OK (left operand is map, right operand is array or map)   Addition (x + y) OK OK (TRUE=1, FALSE=0) OK (Conversion to strings, string concatenation) OK (both operands are arrays) OK (both operands are maps)   Equality (x == y) OK OK OK (If types differ, conversion to strings) OK OK   Inequality (x != y) OK OK OK OK OK   Contains (x IN y / x CONTAINS y) Error Error OK OK OK   Less than (x \u0026lt; y) OK OK (TRUE=1, FALSE=0) Error Error Error   Less than or equal (x \u0026lt;= y) OK OK (TRUE=1, FALSE=0) Error Error Error   Greater than (x \u0026gt; y) OK OK (TRUE=1, FALSE=0) Error Error Error   Greater than or equal (x \u0026gt;= y) OK OK (TRUE=1, FALSE=0) Error Error Error   Variable exists (x EXISTS) Works (Converted to string) Works (Converted to string) OK Error Error   Variable resolve ($ x) Works (Converted to string) Works (Converted to string) OK Error Error   Get item in array or map (x @ y) Error Error Error OK OK    Note that statements are compatible to any type, as they are structural parameters.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/data-type/result-preview/",
	"title": "Preview from results folder",
	"tags": [],
	"description": "",
	"content": "While JIPipeData allows you to define a custom function for previewing, this only works for data already present in memory. To allow previewing of data stored in a results folder, you need to suppy a JIPipeResultDataSlotPreviewUI that loads the data from disk and generates a preview. We recommend to use JIPipeAsyncResultDataPlotPreviewUI This class will offload the loading and preview generation into a separate thread to prevent the UI from freezing. By default it will use the already defined importFrom(Path) method present in the JIPipeData class and use its already defined preview function.\nYou can override the data loading and other methods for customization.\npublic class MyDataPreviewUI extends JIPipeAsyncResultDataPlotPreview { public MyDataPreviewUI(JTable table) { super(table); } } The preview class is registered as last argument of registerDataType():\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register() { // The last null parameter will be handled in the next tutorial  registerDataType(\u0026#34;my-data\u0026#34;, MyData.class, ResourceUtils.getPluginResource(\u0026#34;/icons/data-types/data-type.png\u0026#34;), MyDataDataSlotRowUI.class, MyDataPreviewUI.class); } } "
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/result-analysis/",
	"title": "Review results",
	"tags": [],
	"description": "Explains how to review results.",
	"content": "Running the whole pipeline or executing a quick run with HDD output will result in a folder that contains all output data and the current project file. JIPipe will automatically open an interface that allows you to navigate through the results, and import them back into ImageJ or JIPipe (if supported by the generated data type). You can also re-open these folders via Project \u0026gt; Open analysis output ....\nThe UI has two main components:\n The slot tree shows a hierarchy of all data slots. It is organized by compartment, then algorithm, and finally data slot. By selecting any of the entries, all data associated to the selection or any n-child is displayed. The output data table lists the stored data of the selected slot(s) as table (if you are unfamiliar why this is, please take a look at the explanation on how JIPipe processes data)  After selecting a set of slots in the slot tree the output data table will update to only display the data of the selected slots. The table has following columns:\n (Optional) Compartment shows in which graph compartment the generating algorithm is located (Optional) Algorithm shows the name of the algorithm that generated the data. Location is the folder name where the data is located relative to the slot directory Data shows a string representation of the data row. The contents vary depending on the slot data type. For example, file system data display their path at this location. Additional columns correspond to the data annotations that were attached by various algorithms  Importing results back into JIPipe/ImageJ/\u0026hellip; On selecting one or multiple rows, additional UI elements are displayed below the table. They contain various actions that can be applied to the output data, such as opening the results directory, importing the data back into ImageJ or JIPipe, or any other operation.\nDouble-click a row to execute the default action, which is the one most commonly used.\n\r--\r"
},
{
	"uri": "https://www.jipipe.org/documentation-data-api/row-folder/",
	"title": "Row folder",
	"tags": [],
	"description": "Data storage of a JIPipe data type in the file system",
	"content": "All data in a data table are stored in numeric folders called \u0026ldquo;row folders\u0026rdquo;, each containing the data of one table row.\nThis data stores the raw serialized format, without metadata - metadata is located in data-table.json of the data table.\nThe exact structure of a row folder depends on the data type. The current documentation can always be found by navigating to Help \u0026gt; Data type compendium within JIPipe. Alternatively, we uploaded a current database on this website. A description of the storage directory is provided as human-readable text and in JSON schema format.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-new-three-compartments/",
	"title": "Starting a new project II",
	"tags": [],
	"description": "Guides through the process of creating a new project. The pipeline contains multiple compartments and is thus a good starting point if a specific structure is expected.",
	"content": "Related tutorial: Alternative option\rCreating a project with a single compartment (recommended for beginners)\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/installation/third-party/",
	"title": "Third party software",
	"tags": [],
	"description": "",
	"content": "JIPipe relies on additional third-party software to provide some functionality. This includes the integration of Python, R, and Cellpose. At the first start, these are not known to JIPipe, which in return will notify about these issues.\n\rNotifications panel\rJIPipe will show a notification for each missing third-party software. \rTo open the notifications tab, click the blinking notification button at the top right.\rYou will be offered various options to resolve each notification:\r\rYou can dismiss it temporarily by clicking \rYou can dismiss it permanently by clicking . You can undo this by going to the \"Hidden notifications\" tab.\rYou can apply a notification-related action (e.g., installation of a Python environment)\r\r\r\rIn the case of Python, R, and Cellpose, JIPipe directly offers installers that automatically handle the correct setup of these environments. In this case, you don't need to configure anything else.\rIf you want to enter settings manually or use alternative options (e.g., selecting an existing Python environment), click the configuration item.\rIf you accidentally dismissed a notification, you can find the installation procedures for third-party software in the application settings. You will find more information in the appropriate installation guide (see below for a list).\r\r\r\rInstallation guides  Setup Cellpose integration\nExplains the setup of JIPipe\u0026rsquo;s Cellpose integration\n\r Setup Omnipose integration\nExplains the setup of JIPipe\u0026rsquo;s Cellpose integration\n\r Setup Python integration\nExplains the setup of JIPipe\u0026rsquo;s Python integration\n\r Setup R integration\nExplains the setup of JIPipe\u0026rsquo;s R integration\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "\rOur tutorials assume that you have installed JIPipe. If you want information on how to setup our software, please visit the installation guide.\nLearn how to install JIPipe \n\rTutorial categories  Basic\nTutorials that explain the basic features of JIPipe 👉 Beginners start here\n\r Features\nTutorials that focus an a specific feature of JIPipe\n\r Intermediate\nTutorials that explain the intermediate-level features of JIPipe\n\r Advanced\nTutorials that explain the advanced features of JIPipe\n\r UI\nGuides that explain specific features of the JIPipe user interface.\n\r Videos\nAll video tutorials\n\r Old tutorials\nTutorials that will be updated/replaced\n\r\rWhat is JIPipe? Are you new to JIPipe? Do you want to find out what this tool is about? Then watch our video abstract:\n\u0026lt;1.73.x\r\rThe video was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/macro-node/",
	"title": "Macro node",
	"tags": [],
	"description": "The macro node allows to run ImageJ macros.",
	"content": "The macro node allows to run existing ImageJ macros or execute algorithms that are not directly available as JIPipe nodes. You will find it in Images \u0026gt; ImageJ Macro.\nInputs and outputs By default, the node has no inputs and outputs. Use to the + button to add them. For example, if you want to process one image and output the processed result, create one input and one output.\nBy default, there are four data types that can be used as input and output:\n Any image data type Results table ROI List Paths  Depending on the data type, JIPipe converts inputs into a format that can be processed by an ImageJ macro. The other way around, JIPipe extracts outputs from via modes that are commonly used in macros.\nDevelopers can provide their own integrations to add more data types.\n\rImage data As input: The image is opened as ImageJ image window, named according to the slot name. We recommend to use the macro command select(\u0026lt;window name\u0026gt;) to first select the image window before applying the processing.\nAs output: The image is extracted from an image window, named according to the slot name. Use the rename() command to rename outputs accordingly.\nExample (for the node shown above)\n// The input is created as window \u0026#34;Input\u0026#34; selectWindow(\u0026#34;Input\u0026#34;); run(\u0026#34;Gaussian Blur...\u0026#34;, \u0026#34;sigma=2\u0026#34;); // The node expects an image window \u0026#34;Output\u0026#34; rename(\u0026#34;Output\u0026#34;); Results table As input: The table is opened as ImageJ table window with the same name as the slot. If you set the slot name to Results, the special \u0026ldquo;Results\u0026rdquo; table is utilized.\nAs output: The table data is extracted from the table with the same name as the slot. If the slot name is Results, the special \u0026ldquo;Results\u0026rdquo; table is extracted. Please ensure that you use table.rename(old, new) to rename the output table to the slot name.\n// The input is created as window \u0026#34;Input\u0026#34; selectWindow(\u0026#34;Input\u0026#34;); run(\u0026#34;Gaussian Blur...\u0026#34;, \u0026#34;sigma=2\u0026#34;); run(\u0026#34;Auto Threshold\u0026#34;, \u0026#34;method=Default white\u0026#34;); run(\u0026#34;Analyze Particles...\u0026#34;, \u0026#34;display clear include summarize add\u0026#34;); // Results table output \u0026#34;Results\u0026#34; // Results table output \u0026#34;Summary\u0026#34; // ROI list output \u0026#34;ROIs\u0026#34; ROI data As input: The ROI are added to the ROI manager. The existing ROI manager is cleared.\nAs output: The ROI are extracted from the ROI manager.\nImageJ currently only supports one ROI Manager. JIPipe cannot work around this issue.\n\rPath data As input: Paths are defined as string variable, named according to the input slot name. Please note that the slot name must be a valid variable name.\nAs output: A path is extracted from a results table window (row 0, column 0). We do not recommend to extact paths as output, as ImageJ does not have native handling for such data.\nWe recommend to only use paths as input. The extraction as output is unpredictable, as ImageJ has not a native way to display this type in a way that can be distinguished from result tables.\n\rParameters The most important parameters are\n The macro code The list of variables Importer/exporter configurations  The Code parameter contains the macro code. You can hide it with Collapse or open the code in a larger editor (in a separate tab).\nVariables The macro node allows you to create parameters that can be directly accessed from within JIPipe. The benefit is that those variables can be exported (custom nodes/group node) for ease of use or applying multiple parameter sets.\nClick the Add parameter button in the Macro parameters category to add a variable/parameter.\nIn the dialog, you have to set following options:\n Select the data type of the parameter The Unique identifier acts both as identifier inside JIPipe and the variable name inside the macro. The Name is displayed in the JIPipe GUI The Description field allows you to provide a documentation displayed at the bottom of the parameter list  Variables inside macros On running the macro node, the final code is assembled by adding variables at the top.\nVariables are assembled as var \u0026lt;Unique identifier\u0026gt; = \u0026lt;Value\u0026gt;. The values are converted as following:\n   JIPipe parameter type ImageJ macro variable type     String String   Byte Integer   Short Integer   Double Double   Float Double   Path String   Boolean Boolean    For example, a Gaussian blur node with a Sigma parameter will generate following code:\n// Code generated from parameters var sigma = 2.0; // Code written in the \u0026#34;Code\u0026#34; parameter selectWindow(\u0026#34;Input\u0026#34;); run(\u0026#34;Gaussian Blur...\u0026#34;, \u0026#34;sigma=\u0026#34; + sigma); rename(\u0026#34;Output\u0026#34;); \rPath inputs are converted in a similar way.\n\rImporter/export configurations JIPipe provides standardized components for the data exchange with ImageJ that support multiple options. These are also utilized in the macro node and can be configured in the ImageJ to JIPipe and JIPipe to ImageJ parameter sections.\nFor each input and output, one item is generated that supports two options:\n Clicking the button or the \u0026ldquo;Edit\u0026rdquo; icon allows to change the importer/exporter type Clicking the configuration button allows to override the parameters passed to the importer/exporter  Override the name to transfer data independent of the slot name.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/guide-user-interface/",
	"title": "User interface",
	"tags": [],
	"description": "This video explains the basics of the JIPipe user interface.",
	"content": "\u0026lt;1.73.x\r\rThe video tutorial was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r \r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/guide-data-caches/",
	"title": "Data caches",
	"tags": [],
	"description": "This video explains the basics of the caching system.",
	"content": "\u0026lt;1.73.x\r\rThe video tutorial was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r \r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/guide-graph-editor/",
	"title": "Graph editor user interface",
	"tags": [],
	"description": "This video explains the basics of the graph editor user interface.",
	"content": "\u0026lt;1.73.x\r\rThe video tutorial was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r \r"
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/guide-batch-processing/",
	"title": "How to do batch processing",
	"tags": [],
	"description": "This video explains how to create a batch processing pipeline.",
	"content": "\u0026lt;1.73.x\r\rThe video tutorial was designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r \r"
},
{
	"uri": "https://www.jipipe.org/faq/",
	"title": "Frequently asked questions",
	"tags": [],
	"description": "",
	"content": " General questions\nGeneral questions about JIPipe\n\r Common issues\nSolutions to common issues\n\r User interface\nQuestions concerning the user interface\n\r Data processing\nQuestions about how data is processed\n\r ImageJ integration\nQuestions about the integration into ImageJ and popular plugins like OMERO\n\r Result analysis\nQuestions concerning the export and further analysis of results\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/",
	"title": "Advanced",
	"tags": [],
	"description": "Tutorials that explain the advanced features of JIPipe",
	"content": "1.74.x\u0026#43;\r\rThe guides were written for JIPipe version 1.74.0 or newer\r\r Here you can find a list of tutorials that explain advanced JIPipe features.\n Integrating ImageJ macros\nExplains how to integrate ImageJ macros.\n\r Loops\nExplains how to use loops.\n\r Python\nExplains how to setup a Python node.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/cellpose-2/",
	"title": "Cellpose II: Training",
	"tags": [],
	"description": "Explains how to utilize the Cellpose nodes for segmentation and transfer learning",
	"content": "👉 Related tutorial: Cellpose I (Segmentation)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Cellpose II (Training)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cellpose II: Training'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Model\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/",
	"title": "Creating an algorithm",
	"tags": [],
	"description": "Explains how to create a custom algorithm",
	"content": "All algorithms inherit from JIPipeAlgorithm. An algorithm consists of following parts:\n A run() function that runs the workload A reference to an algorithm info that describes the general properties of the algorithm A slot configuration that describes which slots the algorithm should have  JIPipe comes with different base algorithms that provide different feature sets:\n   Algorithm type Purpose     JIPipeAlgorithm The base class of all algorithms. It provides no included functionality outside of absolutely necessary ones.   JIPipeParameterSlotAlgorithm This algorithm allows users to run multiple parameter sets by optionally enabling an additional slot Parameters.   JIPipeSimpleIteratingAlgorithm A JIPipeParameterSlotAlgorithm that has one input slot and iterates over the input rows.   JIPipeIteratingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches.   JIPipeMergingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches. The difference to JIPipeIteratingAlgorithm is that a batch can have duplicate items per slot.   JIPipeSingleIterationAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple inputs and acts like a JIPipeMergingAlgorithm where all data rows are always merged into one batch.    Any algorithm should have the following basic structure:\nCommonly, you would utilize more higher-order algorithm classes instead of JIPipeAlgorithm. Usually you would choose a JIPipeSimpleIteratingAlgorithm (for single inputs), JIPipeIteratingAlgorithm (for multiple inputs), or JIPipeMergingAlgorithm (for merging single/multiple inputs). These classes provide the automated organization of data, multiple parameters, adaptive parameters, and more.\n\r// Annotates documentation to the algorithm @JIPipeDocumentation(name = \u0026#34;My Algorithm\u0026#34;, description = \u0026#34;Does something\u0026#34;) // Sets the algorithm category @JIPipeNode(nodeTypeCategory = MiscellaneousNodeTypeCategory.class) // Input and output slots autoCreate automatically creates the slots if set to true and no slot configuration was provided @JIPipeInputSlot(value = ImagePlusData.class, slotName = \u0026#34;Input\u0026#34;, description=\u0026#34;The input\u0026#34;, autoCreate = true) @JIPipeOutputSlot(value = ImagePlusData.class, slotName = \u0026#34;Output\u0026#34;, description=\u0026#34;The input\u0026#34;, autoCreate = true) // You can add multiple JIPipeCitation annotations to provide citations for this node only @JIPipeCitation(\u0026#34;Additional citation\u0026#34;) public class MyAlgorithm extends JIPipeAlgorithm { /* This is the main constructor of the algorithm. It contains a reference to the algorithm info that contains some important metadata */ public MyAlgorithm(JIPipeNodeInfo info) { super(info); } /* A deep copy constructor. It is required. Please do not forget to deep-copy all important fields */ public MyAlgorithm(MyAlgorithm original) { super(original); // Deep-copy additional fields here  } /* The workload is run in this functon. You can also have the ability to inform the user about the current algorithm status for more complex algorithms. You can also query if the user requested cancellation */ @Override public run(JIPipeProgressInfo progress) { // Run your workload here  } } To register the algorithm and provide it with an Id, use JIPipeJavaExtension:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register(JIPipe jiPipe, Context context, JIPipeProgressInfo progressInfo) { // Registers our algorithm with a unique ID and an icon  registerNodeType(\u0026#34;my-algorithm\u0026#34;, MyAlgorithm.class, UIUtils.getIconURLFromResources(\u0026#34;actions/viewimage.png\u0026#34;)); } } "
},
{
	"uri": "https://www.jipipe.org/documentation-data-api/data-types/",
	"title": "Data types",
	"tags": [],
	"description": "Current list of data types available in JIPipe",
	"content": "2D FFT Image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rFFT Image\rImage\r\rThis type can be trivially converted from following types:\n3D FFT Image\r4D FFT Image\r5D FFT Image\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains two image files: fht.ome.tif / fht.tif and power_spectrum.ome.tif / power_spectrum.tif, as well as a file fht_info.json. Either the OME TIFF or TIFF must be present. fht.ome.tif / fht.tif contains the FHT (float32). power_spectrum.ome.tif / power_spectrum.tif contains the power spectrum (float32). fht_info.json contains a JSON object that defines following properties: quadrant-swap-needed (boolean), original-width (integer), original-height (integer), original-bit-depth (integer; 8, 16, or 32 are valid values), power-spectrum-mean (double).\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json\nDeveloper information Data type IDimagej-imgplus-fft-2dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D Image (Color) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\rData\rImage\r\rThis type can be trivially converted from following types:\n2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-colorStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (16 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\r2D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-greyscale-16uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (8 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\r2D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\n2D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-greyscale-8uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (HSB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D Image (Color)\r2D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D image (16 bit)\r2D image (8 bit)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-color-hsbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (LAB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D Image (Color)\r2D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-color-labStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (RGB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D Image (Color)\r2D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-color-rgbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (float) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\r2D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-greyscale-32fStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (greyscale) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\rData\rImage\r\rThis type can be trivially converted from following types:\n2D image (16 bit)\r2D image (8 bit)\r2D image (float)\r2D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-greyscaleStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D image (mask) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D image\r2D image (8 bit)\r2D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image (16 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-2d-greyscale-maskStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r2D pie plot Plot that shows the amount for each category as slice in a pie.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-pie-2dStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\r3D FFT Image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D FFT Image\rData\rFFT Image\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains two image files: fht.ome.tif / fht.tif and power_spectrum.ome.tif / power_spectrum.tif, as well as a file fht_info.json. Either the OME TIFF or TIFF must be present. fht.ome.tif / fht.tif contains the FHT (float32). power_spectrum.ome.tif / power_spectrum.tif contains the power spectrum (float32). fht_info.json contains a JSON object that defines following properties: quadrant-swap-needed (boolean), original-width (integer), original-height (integer), original-bit-depth (integer; 8, 16, or 32 are valid values), power-spectrum-mean (double).\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json\nDeveloper information Data type IDimagej-imgplus-fft-3dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D Image (Color) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\rData\rImage\r\rThis type can be trivially converted from following types:\n3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-colorStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\n3D Image (Color)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (16 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\r3D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-greyscale-16uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (8 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\r3D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\n3D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (16 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-greyscale-8uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (HSB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D Image (Color)\r3D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D image (16 bit)\r3D image (8 bit)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-color-hsbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (LAB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D Image (Color)\r3D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-color-labStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (RGB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D Image (Color)\r3D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-color-rgbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (float) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\r3D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-greyscale-32fStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (greyscale) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\rData\rImage\r\rThis type can be trivially converted from following types:\n3D image (16 bit)\r3D image (8 bit)\r3D image (float)\r3D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-greyscaleStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D image (mask) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n3D image\r3D image (8 bit)\r3D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image (16 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-3d-greyscale-maskStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r3D pie plot Plot that shows the amount for each category as slice in a pie.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-pie-3dStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\r4D FFT Image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D FFT Image\rData\rFFT Image\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains two image files: fht.ome.tif / fht.tif and power_spectrum.ome.tif / power_spectrum.tif, as well as a file fht_info.json. Either the OME TIFF or TIFF must be present. fht.ome.tif / fht.tif contains the FHT (float32). power_spectrum.ome.tif / power_spectrum.tif contains the power spectrum (float32). fht_info.json contains a JSON object that defines following properties: quadrant-swap-needed (boolean), original-width (integer), original-height (integer), original-bit-depth (integer; 8, 16, or 32 are valid values), power-spectrum-mean (double).\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json\nDeveloper information Data type IDimagej-imgplus-fft-4dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D Image (Color) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\rData\rImage\r\rThis type can be trivially converted from following types:\n4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-colorStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\n4D Image (Color)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (16 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\r4D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-greyscale-16uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (8 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\r4D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\n4D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (16 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-greyscale-8uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (HSB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D Image (Color)\r4D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D image (16 bit)\r4D image (8 bit)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-color-hsbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (LAB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D Image (Color)\r4D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-color-labStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (RGB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D Image (Color)\r4D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-color-rgbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (float) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\r4D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-greyscale-32fStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (greyscale) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\rData\rImage\r\rThis type can be trivially converted from following types:\n4D image (16 bit)\r4D image (8 bit)\r4D image (float)\r4D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-greyscaleStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r4D image (mask) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n4D image\r4D image (8 bit)\r4D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image (16 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-4d-greyscale-maskStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D FFT Image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n2D FFT Image\rData\rFFT Image\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains two image files: fht.ome.tif / fht.tif and power_spectrum.ome.tif / power_spectrum.tif, as well as a file fht_info.json. Either the OME TIFF or TIFF must be present. fht.ome.tif / fht.tif contains the FHT (float32). power_spectrum.ome.tif / power_spectrum.tif contains the power spectrum (float32). fht_info.json contains a JSON object that defines following properties: quadrant-swap-needed (boolean), original-width (integer), original-height (integer), original-bit-depth (integer; 8, 16, or 32 are valid values), power-spectrum-mean (double).\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json\nDeveloper information Data type IDimagej-imgplus-fft-5dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D Image (Color) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\rData\rImage\r\rThis type can be trivially converted from following types:\n5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-colorStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\n5D Image (Color)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5dStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (16 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\r5D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-greyscale-16uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (8 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\r5D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\n5D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (16 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-greyscale-8uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (HSB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D Image (Color)\r5D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D image (16 bit)\r5D image (8 bit)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-color-hsbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (LAB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D Image (Color)\r5D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-color-labStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (RGB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D Image (Color)\r5D image\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-color-rgbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (float) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\r5D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-greyscale-32fStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (greyscale) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\rData\rImage\r\rThis type can be trivially converted from following types:\n5D image (16 bit)\r5D image (8 bit)\r5D image (float)\r5D image (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-greyscaleStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\r5D image (mask) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\n5D image\r5D image (8 bit)\r5D image (greyscale)\rData\rImage\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image (16 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-5d-greyscale-maskStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rAnnotation table A table that contains data annotations and other metadata\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rResults table\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\n2D pie plot\r3D pie plot\rBar category plot\rBox plot\rData\rHistogram plot\rLine category plot\rNumeric table column\rPlot\rResults table\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString table column\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.csv file that contains the table data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/results-table.schema.json\nDeveloper information Data type IDannotation-tableStorage schema URLhttps://jipipe.org/schemas/datatypes/results-table.schema.jsonPlugin nameAnnotation data types and algorithmsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rBar category plot Bar chart that displays categories in its X axis and colors the bars according to the group.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-category-barStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rBoolean input form A form element that allows the user to input a boolean (true/false) value\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDboolean-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rBox plot Box and whisker plot.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-box-and-whiskerStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rCellpose model A Cellpose model\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nA single file without extension that contains the Cellpose model\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/cellpose-model-data.schema.json\nDeveloper information Data type IDcellpose-modelStorage schema URLhttps://jipipe.org/schemas/datatypes/cellpose-model-data.schema.jsonPlugin nameCellpose integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationStringer, C., Wang, T., Michaelos, M., \u0026amp; Pachitariu, M. (2021). Cellpose: a generalist algorithm for cellular segmentation. Nature Methods, 18(1), 100-106.\rCellpose size model A Cellpose size model\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nA single .npy file that contains the Cellpose size model\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/cellpose-size-model-data.schema.json\nDeveloper information Data type IDcellpose-size-modelStorage schema URLhttps://jipipe.org/schemas/datatypes/cellpose-size-model-data.schema.jsonPlugin nameCellpose integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationStringer, C., Wang, T., Michaelos, M., \u0026amp; Pachitariu, M. (2021). Cellpose: a generalist algorithm for cellular segmentation. Nature Methods, 18(1), 100-106.\rData Generic data\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nNone\rThis type can be trivially converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rBar category plot\rBoolean input form\rBox plot\rCellpose model\rCellpose size model\rData table\rEmpty data\rFFT Image\rFile\rFolder\rForm\rGPU image\rGroup header form\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rInteger input form\rJIPipe output\rJson\rLUT\rLine category plot\rNumber input form\rNumeric table column\rOME Image\rOMERO Dataset\rOMERO Group\rOMERO Image\rOMERO Project\rOutput data\rParameters\rPath\rPath input form\rPlot\rROI list\rResults table\rRow index table column\rSelection input form\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString\rString table column\rTable column\rText input form\rXML\rXY line plot\rXY scatter plot\rZero table column\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rBar category plot\rBoolean input form\rBox plot\rCellpose model\rCellpose size model\rData table\rEmpty data\rFFT Image\rFile\rFolder\rForm\rGPU image\rGroup header form\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rInteger input form\rJIPipe output\rJson\rLUT\rLine category plot\rNumber input form\rNumeric table column\rOME Image\rOMERO Dataset\rOMERO Group\rOMERO Image\rOMERO Project\rOutput data\rParameters\rPath\rPath input form\rPlot\rROI list\rResults table\rRow index table column\rSelection input form\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString\rString table column\rTable column\rText input form\rXML\rXY line plot\rXY scatter plot\rZero table column\r\rThis type can be also converted from following types:\nNone\rData storage Following information was provided about the standardized storage of this data type:\nUnknown storage schema (generic data)\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDjipipe:dataStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameCorePlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchindelin, J.; Arganda-Carreras, I. \u0026amp; Frise, E. et al. (2012), \u0026quot;Fiji: an open-source platform for biological-image analysis\u0026quot;, Nature methods 9(7): 676-682, PMID 22743772, doi:10.1038/nmeth.2019Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationRueden, C., Schindelin, J., Hiner, M. \u0026amp; Eliceiri, K. (2016). SciJava Common [Software]. https://scijava.org/. \rData table A table of data\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nStores a data table in the standard JIPipe format (data-table.json plus numeric slot folders)\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-data-table.schema.json\nDeveloper information Data type IDjipipe:data-tableStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-data-table.schema.jsonPlugin nameCorePlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchindelin, J.; Arganda-Carreras, I. \u0026amp; Frise, E. et al. (2012), \u0026quot;Fiji: an open-source platform for biological-image analysis\u0026quot;, Nature methods 9(7): 676-682, PMID 22743772, doi:10.1038/nmeth.2019Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationRueden, C., Schindelin, J., Hiner, M. \u0026amp; Eliceiri, K. (2016). SciJava Common [Software]. https://scijava.org/. \rEmpty data An empty data type\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe storage folder is empty.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDjipipe:empty-dataStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameCorePlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchindelin, J.; Arganda-Carreras, I. \u0026amp; Frise, E. et al. (2012), \u0026quot;Fiji: an open-source platform for biological-image analysis\u0026quot;, Nature methods 9(7): 676-682, PMID 22743772, doi:10.1038/nmeth.2019Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationRueden, C., Schindelin, J., Hiner, M. \u0026amp; Eliceiri, K. (2016). SciJava Common [Software]. https://scijava.org/. \rFFT Image Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\n2D FFT Image\r3D FFT Image\r4D FFT Image\r5D FFT Image\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains two image files: fht.ome.tif / fht.tif and power_spectrum.ome.tif / power_spectrum.tif, as well as a file fht_info.json. Either the OME TIFF or TIFF must be present. fht.ome.tif / fht.tif contains the FHT (float32). power_spectrum.ome.tif / power_spectrum.tif contains the power spectrum (float32). fht_info.json contains a JSON object that defines following properties: quadrant-swap-needed (boolean), original-width (integer), original-height (integer), original-bit-depth (integer; 8, 16, or 32 are valid values), power-spectrum-mean (double).\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json\nDeveloper information Data type IDimagej-imgplus-fftStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rFile A path to a file\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPath\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nFolder\rJIPipe output\r\rThis type can be also converted from following types:\nData\rFolder\rJIPipe output\rPath\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file. The JSON data has following structure: { \u0026ldquo;jipipe:data-type\u0026rdquo;: \u0026ldquo;[Data type ID]\u0026rdquo;, \u0026ldquo;path\u0026rdquo;: \u0026ldquo;[The path]\u0026rdquo; }\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/path-data.schema.json\nDeveloper information Data type IDfileStorage schema URLhttps://jipipe.org/schemas/datatypes/path-data.schema.jsonPlugin nameFilesystem types and algorithmsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rFolder A path to a directory\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPath\r\rThis type can be trivially converted from following types:\nJIPipe output\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nFile\rJIPipe output\r\rThis type can be also converted from following types:\nData\rFile\rPath\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file. The JSON data has following structure: { \u0026ldquo;jipipe:data-type\u0026rdquo;: \u0026ldquo;[Data type ID]\u0026rdquo;, \u0026ldquo;path\u0026rdquo;: \u0026ldquo;[The path]\u0026rdquo; }\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/path-data.schema.json\nDeveloper information Data type IDfolderStorage schema URLhttps://jipipe.org/schemas/datatypes/path-data.schema.jsonPlugin nameFilesystem types and algorithmsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rForm Data that describes a user input element.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nBoolean input form\rGroup header form\rInteger input form\rNumber input form\rPath input form\rSelection input form\rText input form\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDformStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rGPU image Image data stored on the GPU utilized by CLIJ\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpeg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDclij2-imageStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameCLIJ2 integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRobert Haase, Loic Alain Royer, Peter Steinbach, Deborah Schmidt, Alexandr Dibrov, Uwe Schmidt, Martin Weigert, Nicola Maghelli, Pavel Tomancak, Florian Jug, Eugene W Myers. CLIJ: GPU-accelerated image processing for everyone. Nat Methods 17, 5-6 (2020)\rGroup header form Generates a group header element that allows to structure forms.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDgroup-header-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rHistogram plot Bar chart that displays the number of items for each bin. Please note that this plot requires raw values as input. A pre-defined histogram table should be rendered with an XY bar plot.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-histogramStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rImage An ImageJ image\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rFFT Image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D pie plot\r3D pie plot\rBar category plot\rBox plot\rData\rGPU image\rHistogram plot\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplusStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (16 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (greyscale)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-greyscale-16uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (8 bit) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (greyscale)\r\rThis type can be trivially converted from following types:\nImage (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-greyscale-8uStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (Color) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\nImage (HSB)\rImage (LAB)\rImage (RGB)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-colorStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (HSB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (Color)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-color-hsbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (LAB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (Color)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (HSB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-color-labStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (RGB) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (Color)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (HSB)\rImage (LAB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-color-rgbStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (float) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (greyscale)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-greyscale-32fStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (greyscale) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\r\rThis type can be trivially converted from following types:\nImage (16 bit)\rImage (8 bit)\rImage (float)\rImage (mask)\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-greyscaleStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rImage (mask) Trivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rImage\rImage (8 bit)\rImage (greyscale)\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage (16 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rJson\rLUT\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one image file with one of following extensions: *.tif, *.tiff, *.png, *.jpeg, *.jpg, *.png. We recommend the usage of TIFF.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json\nDeveloper information Data type IDimagej-imgplus-greyscale-maskStorage schema URLhttps://jipipe.org/schemas/datatypes/imageplus-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rInteger input form A form element that allows the user to input an integer number\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDinteger-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rJIPipe output Output of a JIPipe run\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rFolder\rPath\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nFile\r\rThis type can be also converted from following types:\nData\rFile\rFolder\rPath\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file. The JSON data has following structure: { \u0026ldquo;jipipe:data-type\u0026rdquo;: \u0026ldquo;[Data type ID]\u0026rdquo;, \u0026ldquo;path\u0026rdquo;: \u0026ldquo;[The path]\u0026rdquo; }\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/path-data.schema.json\nDeveloper information Data type IDjipipe-run-outputStorage schema URLhttps://jipipe.org/schemas/datatypes/path-data.schema.jsonPlugin nameUtilitiesPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rJson Text in JSON format\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rString\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString\rXML\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the current data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-json-data.schema.json\nDeveloper information Data type IDjsonStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-json-data.schema.jsonPlugin nameStringsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rLUT A function that converts an intensity to a RGB color value\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rOME Image\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one file in *.json format that describes the LUT gradient stops.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/lut-data.schema.json\nDeveloper information Data type IDimagej-lutStorage schema URLhttps://jipipe.org/schemas/datatypes/lut-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rLine category plot Line chart that displays categories in its X axis and colors the lines according to the group.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-category-lineStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rNumber input form A form element that allows the user to input a real number\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDnumber-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rNumeric table column A table column that contains numbers (64bit floating point)\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rTable column\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nAnnotation table\rResults table\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.csv file that contains the table data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/results-table.schema.json\nDeveloper information Data type IDtable-column-numericStorage schema URLhttps://jipipe.org/schemas/datatypes/results-table.schema.jsonPlugin nameStandard table operationsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675\rOME Image Image that contains additional OME-XML metadata. It can be converted into an image, a ROI list, or an XML text.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rROI list\rString\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one or multiple files in *.tif or *.ome.tif format. If OME TIFF is used, multiple tiff files can be present (due to the ability of OME TIFF to link them together). Although, we do recommend having multiple files, as sometimes OME TIFF can store absolute paths. If only standard TIFF files are present, only one will be loaded.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/ome-image-data.schema.json\nDeveloper information Data type IDimagej-omeStorage schema URLhttps://jipipe.org/schemas/datatypes/ome-image-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rOMERO Dataset An OMERO dataset ID\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the dataset-id in a JSON object.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/omero-dataset-reference-data.schema.json\nDeveloper information Data type IDomero-dataset-idStorage schema URLhttps://jipipe.org/schemas/datatypes/omero-dataset-reference-data.schema.jsonPlugin nameOMERO IntegrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rOMERO Group An OMERO group ID\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the group-id in a JSON object.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/omero-group-data.schema.json\nDeveloper information Data type IDomero-group-idStorage schema URLhttps://jipipe.org/schemas/datatypes/omero-group-data.schema.jsonPlugin nameOMERO IntegrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rOMERO Image An OMERO image ID\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the image-id in a JSON object.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/omero-image-reference-data.schema.json\nDeveloper information Data type IDomero-image-idStorage schema URLhttps://jipipe.org/schemas/datatypes/omero-image-reference-data.schema.jsonPlugin nameOMERO IntegrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rOMERO Project An OMERO project ID\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the project-id in a JSON object.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/omero-project-reference-data.schema.json\nDeveloper information Data type IDomero-project-idStorage schema URLhttps://jipipe.org/schemas/datatypes/omero-project-reference-data.schema.jsonPlugin nameOMERO IntegrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rOutput data Output of a compartment\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThis is a structural data type. The storage folder is empty.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDjipipe:compartment-outputStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameCompartment managementPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rParameters Contains algorithm parameters\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file that stores the parameters. The JSON data is an object with keys being the parameter keys. The value is an object with two items value and type-id. value contains the serialized parameter value. type-id contains the standardized parameter type ID.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/parameters-data.schema.json\nDeveloper information Data type IDparametersStorage schema URLhttps://jipipe.org/schemas/datatypes/parameters-data.schema.jsonPlugin nameMulti parameters data typesPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rPath A file or folder\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nFile\rFolder\rJIPipe output\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nFile\rFolder\rJIPipe output\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.json file. The JSON data has following structure: { \u0026ldquo;jipipe:data-type\u0026rdquo;: \u0026ldquo;[Data type ID]\u0026rdquo;, \u0026ldquo;path\u0026rdquo;: \u0026ldquo;[The path]\u0026rdquo; }\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/path-data.schema.json\nDeveloper information Data type IDpathStorage schema URLhttps://jipipe.org/schemas/datatypes/path-data.schema.jsonPlugin nameFilesystem types and algorithmsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rPath input form A form element that allows the user to input a path to a file or folder\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDpath-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rPlot A plot\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\n2D pie plot\r3D pie plot\rBar category plot\rBox plot\rHistogram plot\rLine category plot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplotStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rROI list Collection of ROI\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains one file in *.roi or *.zip format. *.roi is a single ImageJ ROI. *.zip contains multiple ImageJ ROI. Please note that if multiple .roi/.zip are present, only one will be loaded.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/roi-list-data.schema.json\nDeveloper information Data type IDimagej-roiStorage schema URLhttps://jipipe.org/schemas/datatypes/roi-list-data.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rResults table An ImageJ table\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nAnnotation table\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nAnnotation table\r\rThis type can be also converted from following types:\n2D pie plot\r3D pie plot\rBar category plot\rBox plot\rData\rHistogram plot\rLine category plot\rNumeric table column\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString table column\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.csv file that contains the table data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/results-table.schema.json\nDeveloper information Data type IDimagej-results-tableStorage schema URLhttps://jipipe.org/schemas/datatypes/results-table.schema.jsonPlugin nameImageJ integrationPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675Additional citationMelissa Linkert, Curtis T. Rueden, Chris Allan, Jean-Marie Burel, Will Moore, Andrew Patterson, Brian Loranger, Josh Moore, Carlos Neves, Donald MacDonald, Aleksandra Tarkowska, Caitlin Sticco, Emma Hill, Mike Rossner, Kevin W. Eliceiri, and Jason R. Swedlow (2010) Metadata matters: access to image data in the real world. The Journal of Cell Biology 189(5), 777-782\rRow index table column A table column that generates each row based on the current row index\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rTable column\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThis is a structural data type. The storage folder is empty.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDtable-column-row-indexStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameStandard table operationsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675\rSelection input form A form element that allows the user to select one of multiple options\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDenum-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rStacked bar category plot Bar chart that displays categories in its X axis and colors the bars according to the group. Bars within the same group are stacked.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-category-bar-stackedStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rStatistical bar category plot Bar chart that displays categories in its X axis and colors the bars according to the group. The bar height is the mean of each condition\u0026rsquo;s values. Shows an error bar.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-category-statistical-barStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rStatistical line category plot Line chart that displays categories in its X axis and colors the lines according to the group. The line Y value is the mean of each condition\u0026rsquo;s values. Shows an error bar.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-category-statistical-lineStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rString A text\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nJson\rXML\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nJson\rXML\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.txt file that stores the current string.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/string-data.schema.json\nDeveloper information Data type IDstringStorage schema URLhttps://jipipe.org/schemas/datatypes/string-data.schema.jsonPlugin nameStringsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rString table column A table column that contains text values\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rTable column\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nAnnotation table\rResults table\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.csv file that contains the table data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/results-table.schema.json\nDeveloper information Data type IDtable-column-stringStorage schema URLhttps://jipipe.org/schemas/datatypes/results-table.schema.jsonPlugin nameStandard table operationsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675\rTable column A table column\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\r\rThis type can be trivially converted from following types:\nNumeric table column\rRow index table column\rString table column\rZero table column\r\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThis is a generic data type. The storage folder is empty.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDtable-columnStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameStandard table operationsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675\rText input form A form element that allows the user to input text\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rForm\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a file forms.json that stores all metadata of the current form type in JSON format.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/form-data.schema.json\nDeveloper information Data type IDstring-formStorage schema URLhttps://jipipe.org/schemas/datatypes/form-data.schema.jsonPlugin nameFormsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rXML Text in extended markup language (XML)\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rString\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nJson\r\rThis type can be also converted from following types:\n2D FFT Image\r2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r2D pie plot\r3D FFT Image\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r3D pie plot\r4D FFT Image\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D FFT Image\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rBar category plot\rBox plot\rData\rFFT Image\rGPU image\rHistogram plot\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rLine category plot\rOME Image\rPlot\rStacked bar category plot\rStatistical bar category plot\rStatistical line category plot\rString\rXY line plot\rXY scatter plot\r\rData storage Following information was provided about the standardized storage of this data type:\nContains a single *.xml file that stores the current data.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/xml-data.schema.json\nDeveloper information Data type IDxmlStorage schema URLhttps://jipipe.org/schemas/datatypes/xml-data.schema.jsonPlugin nameStringsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rXY line plot Plot that displays the Y values against the X values.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-xy-lineStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rXY scatter plot Plot that displays the Y values against the X values.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rPlot\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\n2D Image (Color)\r2D image\r2D image (16 bit)\r2D image (8 bit)\r2D image (HSB)\r2D image (LAB)\r2D image (RGB)\r2D image (float)\r2D image (greyscale)\r2D image (mask)\r3D Image (Color)\r3D image\r3D image (16 bit)\r3D image (8 bit)\r3D image (HSB)\r3D image (LAB)\r3D image (RGB)\r3D image (float)\r3D image (greyscale)\r3D image (mask)\r4D Image (Color)\r4D image\r4D image (16 bit)\r4D image (8 bit)\r4D image (HSB)\r4D image (LAB)\r4D image (RGB)\r4D image (float)\r4D image (greyscale)\r4D image (mask)\r5D Image (Color)\r5D image\r5D image (16 bit)\r5D image (8 bit)\r5D image (HSB)\r5D image (LAB)\r5D image (RGB)\r5D image (float)\r5D image (greyscale)\r5D image (mask)\rAnnotation table\rGPU image\rImage\rImage (16 bit)\rImage (8 bit)\rImage (Color)\rImage (HSB)\rImage (LAB)\rImage (RGB)\rImage (float)\rImage (greyscale)\rImage (mask)\rJson\rLUT\rOME Image\rROI list\rResults table\rString\rXML\r\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThe folder contains following files:plot-metadata.json contains the serialized information about the plot.series[Index].csv contains the data of series [Index].The plot metadata JSON contains entries title, export-width,export-height, background-color, grid-color, with-legend, title-font-size, legend-font-size, color-map, and plot-series.plot-series is mandatory and is a list of objects with each object having an object metadata, and a string element file-name. The file name must point at the corresponding series[Index].csv file of the series. Additional metadata in the root object and series metadata depend on the exact plot type.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/plot-data.schema.json\nDeveloper information Data type IDplot-xy-scatterStorage schema URLhttps://jipipe.org/schemas/datatypes/plot-data.schema.jsonPlugin nameStandard plotsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-Clause\rZero table column A table column that generates zeros for each row.\nTrivial conversions A trivial conversion involves no potentially expensive conversion operation. The data will directly match to input slots of the converted type. The edge has a dark-gray color.\nThis type can be trivially converted into following types:\nData\rTable column\r\rThis type can be trivially converted from following types:\nNone\rNon-trivial conversions A non-trivial conversion is defined by the developer and might involve some more complex conversion operations. They are indicated as blue edge.\nThis type can be also converted into following types:\nNone\rThis type can be also converted from following types:\nData\r\rData storage Following information was provided about the standardized storage of this data type:\nThis is a structural data type. The storage folder is empty.\nPlease visit following link for a JSON schema that describes the data storage: https://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.json\nDeveloper information Data type IDtable-column-zeroStorage schema URLhttps://jipipe.org/schemas/datatypes/jipipe-empty-data.schema.jsonPlugin nameStandard table operationsPlugin authorZoltán Cseresnyés*Plugin authorRuman Gerst*Plugin authorMarc Thilo Figge#Plugin websitehttps://www.jipipe.org/Plugin citationPlugin licenseBSD 2-ClauseAdditional citationRueden, C. T.; Schindelin, J. \u0026amp; Hiner, M. C. et al. (2017), \u0026quot;ImageJ2: ImageJ for the next generation of scientific image data\u0026quot;, BMC Bioinformatics 18:529Additional citationSchneider, C. A.; Rasband, W. S. \u0026amp; Eliceiri, K. W. (2012), \u0026quot;NIH Image to ImageJ: 25 years of image analysis\u0026quot;, Nature methods 9(7): 671-675\r"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/dependency/",
	"title": "Dependency",
	"tags": [],
	"description": "Project or extension dependency. Refers to an JIPipe extension.",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: dependency.schema.json\n\rProject or extension dependency. Refers to a JIPipe extension.\r\r\rmetadata:\r\rSee metadata\r\r\r\r\r\r\r\r\rid:\r\rstring\r\r\r\r\r\r\rUnique ID of this dependency should have format\r\r.\r\r:\r\r\r\r\r\r\rversion:\r\rstring\r\r\r\r\r\r\rVersion of this dependency\r\r\r\r\r\rExample { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Filesystem types and algorithms\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Data types and algorithms for interacting with files and folders\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Zoltán Cseresnyés, Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:filesystem\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "JIPipe is a visual programming language for ImageJ that allows you to create macros without any programming  by just creating a flowchart. In this documentation, you will find information about the basic concepts behind JIPipe, how to create an image analysis pipeline with the JIPipe graphical user interface (GUI), and run your pipeline and review results. You will also find guides how to connect JIPipe with ImageJ and other software.\nIf you are not familiar with the idea behind JIPipe, we recommend to watch following video:\n\rHere you can find the topics of this documentation:\n Basic concepts\nThis section explains some basic concepts that are helpful to understand if you want to use JIPipe. Visual programming Explains the basics of visual programming. Batch processing Explains basic concepts about how data is processed within JIPipe. We really recommend to take a look at this documentation. \r Creating pipelines\nThis section explains the JIPipe user interface, how to create an analysis pipeline, and some concepts behind how analysis pipelines work. Pipeline editor Explains the graph editor user interface, how to create a pipeline, and additional features like the algorithm finder tool. Parameters Explains advanced parameter features. Mathematical expressions Explains the expression parameter type language that is often used for filtering or generating numbers. Graph compartments\n\r Running pipelines\nThis section contains documentation that explains how to run a pipeline and review the results. For example, you can run the whole workflow or make use of the cache feature to run single nodes. Running the whole pipeline Explains the Quick Run feature that allows to test and compare different algorithm parameters without recalculating the whole pipeline. Review results Explains how to review results. Use results in external software\n\r ImageJ integration\nExplains functionality that allows ImageJ to run JIPipe algorithms or pipelines.\n\r Managing plugins\nExplains how to install and manage plugins.\n\r Standard library\nContains some explanations about the algorithms that are included in the JIPipe standard distribution.\n\r Extension builder\nExplains the extension builder tool\n\r Command Line Interface\nExplains basic concepts about how data is processed within JIPipe. We really recommend to take a look at this documentation.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/filesystem/",
	"title": "Filesystem algorithms",
	"tags": [],
	"description": "This library provides data types for that wrap filesystem objects, as well as algorithms to navigate the filesystem and extract information.",
	"content": "The JIPipe standard library contains data types and algorithms to apply file system operations. The common use case is to extract the list of input files for the following algorithms.\nThe filesystem library has two basic data types:\n A  File contains a path to a file A  Folder contains a path to a folder A Path contains a path to a file or folder  In the Add data menu you can define one file/folder or a list of files/folders.\nWe recommend to create a list of files/folders. This makes it easier to scale your workflow up.\n\rDrag any set of files or folders into the graph editor to create corresponding file/folder data source algorithms.\n\rFile/folder manipulation algorithms The standard library comes with various algorithms that apply common operations to input filesystem data. This includes listing the files in a folder, filtering files/folders, or navigating to a subfolder. They are placed in the Filesystem category.\nAutomated relativization File and folder data source algorithms by default store absolute paths. If you save your project in a parent folder where the data is stored, the paths are automatically converted into relative paths that make data transfer between devices easier.\nAnnotation It is helpful to add data annotations to the file data at some point. This allows algorithms and users to assign data rows to an unique data set. See the annotation standard library documentation for more information.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/compartments/",
	"title": "Graph compartments",
	"tags": [],
	"description": "Explains the concept of graph compartments that allow easy organization of the analysis pipeline into functional units.",
	"content": "A common issue with graphical programming languages is that large graphs are hard to navigate. JIPipe solves this issue by separating the pipeline graph into sub-graphs. Each sub-graph has a predetermined output node that is visible to other compartments. Other nodes on the other hand are not visible to other compartments.\nThe difference between compartments and simple node groups is that compartments only communicate with each other via the compartment output node. JIPipe also only allows you to edit a specific compartment, instead of the whole graph. By default, JIPipe creates three compartments: Preprocessing, Analysis, and Postprocessing.\nBy default a compartment\u0026rsquo;s output node is not visible in any other compartment. The have to be connected in a similar manner on how algorithms are connected. To do this, use the compartment editor that is described in the following section.\n\rYou can ignore the compartment feature if you want. You can delete the default compartments without any issue. Just leave one graph compartment and edit the remaining one.\n\rCompartments behave similar to algorithms. This means you can create a directed acyclic graph of compartments.\n\rCreating and connecting compartments JIPipe comes with an editor that allows to control the graph compartments. This editor is similar to the pipeline editor and allows you to create new compartments, connect them, as well as import or export compartments. Instead of containing algorithms, the editor contains graph compartment nodes that can be connected similar to how algorithms are connected.\nYou can one or multiple compartments in the editor. Click the  Edit button to open the compartment in the pipeline editor.\nYou can also double-click a compartment node to open the editor.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/compartments3/",
	"title": "Graph compartments: Reviewing results",
	"tags": [],
	"description": "",
	"content": "Designing exercises around the generation of compartment outputs simplifies the process of reviewing the results of an exercise.\nAs JIPipe compartment outputs can be directly run from within the Compartments tab, one can quickly test if the expected results are produced.\nFor example, if the pipeline within the Preprocessing compartment (red box 1) contains a file loading and Gaussian blurring process, the generated results can be directly generated (red arrow 2) and reviewed (red arrow 3) directly within the Compartments tab.\n"
},
{
	"uri": "https://www.jipipe.org/examples/how-to-import-node-templates/",
	"title": "How to import node templates",
	"tags": [],
	"description": "Explains how to load node templates (Templates.json)",
	"content": "\rThis tutorial assumes that you have installed JIPipe. If you want information on how to setup our software, please visit the installation guide.\nLearn how to install JIPipe \n\r1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r 👉 Node templates are a feature that allows to store the settings and connections of one or multiple nodes into a dedicated list. This can greatly speed up the creation of new pipelines. If you want to learn more about node templates and groups, please follow our tutorial.\n"
},
{
	"uri": "https://www.jipipe.org/installation/extensions/",
	"title": "JIPipe extensions",
	"tags": [],
	"description": "",
	"content": "Table Of Contents\r Installing new extensions Activating extensions  \r Installing new extensions JIPipe extensions are ImageJ plugins and thus can be installed just as any plugin.\nAvailable options are:\n Installation via the Fiji updater Manual installation by copying the files into the plugins or jars directory  Older JIPipe versions (1.73.x or older) will automatically load all extensions during the startup. This behavior was changed in JIPipe 1.74.0 where the extensions needs to be manually activated after the installation.\n\rActivating extensions 1.74.x\u0026#43;\r\rExtensions only need to be activated in JIPipe version 1.74.0 or newer\r\r \rDetected extensions\rOn starting JIPipe, you will be warned about newly detected extensions. Click \"Open extension manager\" if you want to enable them.\rYou can always open the extension manager by navigating to Plugins \u0026gt; Manage JIPipe plugins.\r\rThe extension manager needs to run various tasks in the background. We do not recommend to install extensions while JIPipe is running a pipeline.\r\r\r\r\rActivating extensions\rBy default, JIPipe will automatically display any newly detected extension. Click \"Activate\" to activate any extension that want to utilize.\r\r\r\rExtension dependencies\rSome extensions have additional dependencies in form of other extensions or ImageJ update sites. Click \"Continue\" to install/activate all selected dependencies.\rAfterwards you will be prompted to restart ImageJ or JIPipe (depending on the type of activated extension(s) and dependencies).\r\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/multi-parameter/",
	"title": "Multi-parameter algorithms",
	"tags": [],
	"description": "This library provides the ability to manage algorithm parameter sets, generate parameters iteratively, and apply algorithms to multiple parameters at once.",
	"content": "This page was moved here\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-open/",
	"title": "Opening a saved project",
	"tags": [],
	"description": "Guides through the process of loading a saved project.",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/parameters/",
	"title": "Parameters",
	"tags": [],
	"description": "",
	"content": "You can add parameters to your algorithm by creating a property with a getter and setter. Then you annotate the getter and setter with the same @JIPipeParameter keys. Also add an @JIPipeDocumentation annotation to either the getter or setter.\nParameters are automatically serialized and deserialized.\nPlease make sure to send an event when the parameter is set, so the UI can update.\n// ... see previous tutorials public class MyAlgorithm extends JIPipeIteratingAlgorithm { private float roundness = 0.5f; // ... see previous tutorials  @JIPipeParameter(\u0026#34;roundness\u0026#34;) @JIPipeDocumentation(name = \u0026#34;Roundness\u0026#34;, description = \u0026#34;Value within [0, 1]\u0026#34;) public float getRoundness() { return roundness; } @JIPipeParameter(\u0026#34;roundness\u0026#34;) public boolean setRoundness(float roundness) { if(roundness \u0026lt; 0 || roundness \u0026gt; 1) return false; // Reject this value  this.roundness = roundness; // Send the change out to listeners  getEventBus().post(new ParameterChangedEvent(this, \u0026#34;roundness\u0026#34;)); } } \rYour setter can return a boolean. If the output is true, JIPipe considers the value as valid. If false, the JIPipe UI re-loads a valid value via the getter.\n\rPlease make sure that your parameter key is unique. Only one getter and one setter should have the same key.\n\rNot all data types are supported. Data types are registered into JIPipe and available via JIPipeUIParametertypeRegistry.getInstance(). In a later tutorial we show how to register custom data types. JIPipe supports common primitives like boolean, int, float, double, String, and all enum data types.\n\rAccessing parameters from within code When a user sets a parameter within the UI, it goes through an instance of JIPipeParameterAccess. This object is responsible for triggering the required events to notify the UI.\nIf you set a parameter setter via code, you will notice that any open parameter UI does not respond to this change - due to the absence of the JIPipeParameterAccess.ParameterChangedEvent.\nUse the provided triggerParameterChange(key) function to trigger the appropriate parameter change event for a parameter. Alternatively, you can use the setParameter(key, value) method to set parameters.\nMyAlgorithm algorithm = new MyAlgorithm(...); // This will NOT update the UI algorithm.setRoundness(1.0f); // Either trigger the event manually algorithm.setRoundness(1.0f); algorithm.triggerParameterChange(\u0026#34;roundness\u0026#34;); // Or just use the setParameter() function algorithm.setParameter(\u0026#34;roundness\u0026#34;, 1.0f); // DO NOT DO THIS EVER: algorithm.setRoundness(1.0f); algorithm.isParameterUIVisible(); // DON\u0026#39;T DO THIS!!! THIS WILL UPDATE THE UI, BUT NOT INFORM DEPENDENT PARAMETERS You can also read parameters via their key using getParameter()\nMyAlgorithm algorithm = new MyAlgorithm(...); algorithm.getParameter(\u0026#34;roundness\u0026#34;, Float.class) // Returns 1.0 Accessing the whole parameter tree The mentioned functions getParameter and setParameter are utilities around JIPipeParameterTree, which manages the whole set of parameters and sub-parameters of a JIPipeParameterCollection. We recommend to create such an object directly, if you want to access many parameters at once or want to read parameter metadata like names, documentation, annotations, and more. It also gives you more control on how parameters are accessed (for example it can force using reflection parameters), which can be helpful in more special cases.\nMyAlgorithm algorithm = new MyAlgorithm(...); JIPipeParameterTree tree = new JIPipeParameterTree(algorithm); // The access object contains the metadata JIPipeParameterAccess access = tree.getParameters().get(\u0026#34;roundness\u0026#34;); access.set(1.0f); // You can also access sub-parameters (by key or by object) JIPipeParameterTree.Node subParameterNode = tree.getSourceNode(algorithm.getSubParameter()); subParameterNode.getDescription(); // Access to various settings Parameter settings Some parameter types have different styles or other settings that can change the behavior of the parameter editor UI. An example is StringParameterSettings that allows to change between single-line and multi-line editors.\nSub-parameters JIPipeAlgorithm, like any JIPipeParameterCollection allows sub-parameters.\nTo create a sub-parameter create a getter to an JIPipeParameterCollection and annotate it with @JIPipeParameter. The key provided with the annotation should be an unique parameter key. The parameters in the sub-parameter instance are automatically displayed as new group in the parameter editor.\n@JIPipeDocumentation(name = \u0026#34;Gaussian filter\u0026#34;) @JIPipeParameter(value = \u0026#34;gaussian-algorithm\u0026#34;) public GaussianBlur2DAlgorithm getGaussianAlgorithm() { return gaussianAlgorithm; } The @JIPipeParameter annotation allows you to determine various properties, like if the sub-parameter should be collapsed or hidden by default.\nPlease do not forget to listen for the ParameterStructureChangedEvent and pass it to the algorithm\u0026rsquo;s event bus. Otherwise there can be issues with the extension builder. You can use the registerSubParameter() method in the constructor and copy constructor as a shortcut.\n\rConditional parameters Each parameter collection (including nodes) allow the conditional display of parameters or sub-parameters. To setup this display, override the isParameterUIVisible method. There are two overloads, one for displaying or hiding single parameters, and one for controlling the display of sub-parameters.\n// Example for conditional showing/hidding of single parameters  @Override public boolean isParameterUIVisible(JIPipeParameterTree tree, JIPipeParameterAccess access) { if (access.getKey().equals(\u0026#34;mode\u0026#34;)) return true; if (mode == Mode.Automatic) { return !access.getKey().equals(\u0026#34;custom-name\u0026#34;); } else { if (access.getKey().equals(\u0026#34;ignore-missing-metadata\u0026#34;)) return true; if (access.getKey().equals(\u0026#34;missing-string\u0026#34;)) return true; return access.getKey().equals(\u0026#34;custom-name\u0026#34;); } } // Example for sub-parameters @Override public boolean isParameterUIVisible(JIPipeParameterTree tree, JIPipeParameterCollection subParameter) { if(!scaleToModelSize \u0026amp;\u0026amp; subParameter == getScale2DAlgorithm()) { return false; } return super.isParameterUIVisible(tree, subParameter); } \rUse triggerParameterUIChange() to trigger an update of the UI in the setter function if you have dependencies between parameters. This will work for parameters and parameter groups.\n\rUser-defined parameters If you want to make it possible for users to create custom parameters, create an JIPipeDynamicParameterCollection as sub-parameter. You can control the list of allowed parameter types and other settings.\n// Field that initializes the dynamic parameter collection with all supported parameter types private JIPipeDynamicParameterCollection scriptParameters = new JIPipeDynamicParameterCollection(true, JIPipe.getParameterTypes().getRegisteredParameters().values()); public MyClass() { registerSubParameter(scriptParameters); } public MyClass(MyClass other) { this.scriptParameters = new JIPipeDynamicParameterCollection(other.scriptParameters); registerSubParameter(scriptParameters); } @JIPipeDocumentation(name = \u0026#34;Script parameters\u0026#34;) @JIPipeParameter(value = \u0026#34;script-parameters\u0026#34;, persistence = JIPipeParameterPersistence.Object) // Important: Set persistence public JIPipeDynamicParameterCollection getScriptParameters() { return scriptParameters; } \rDo not forget to deep-copy the JIPipeDynamicParameterCollection. The class has a copy constructor for such an operation.\n\rPlease do not forget to listen for the ParameterStructureChangedEvent and pass it to the algorithm\u0026rsquo;s event bus. Otherwise there can be issues with the extension builder. JIPipeAlgorithm comes with a pre-made function registerSubParameters() that should be called in the constructors.\n\rWe recommend setting the persistence of the getter to JIPipeParameterPersistence.Object. Otherwise, JIPipe will have issues with de-serializing the parameter and lose all settings.\n\rFull control You can inherit from JIPipeCustomParameterCollection to define all parameters manually without the need for an JIPipeDynamicParameterCollection or annotations.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/connect-external-software/",
	"title": "Use results in external software",
	"tags": [],
	"description": "",
	"content": "JIPipe stores outputs in a standardized format that can be easily read with third-party software. The output folder of always contains a file project.jip, which is the project that generated the output.\nThis folder contains sub-folders named according to the graph compartment. The ID is the unique ID of the graph compartment and can be looked up in the project.jip file or the compartment graph editor.\nEach of these compartment folders contains a set of additional sub-folders based on unique ID of the node (also visible in the graph editor).\nA node folder contains a set of folders, one for each output slot. This folder may be empty if JIPipe is instructed to not save the output slot.\nEach slot folder contains a metadata file data-table.json that contains information about all stored outputs, including the data type and annotations. The metadata is also usually available as data-table.csv file that can be read more easily. The folder contains sub-folders with numeric names that correspond to the table rows. The contents of each of these folders is determined by the standardized storage format of the data type (true-data-type in the data table).\nYou can open existing project folders in JIPipe. Just go to Project \u0026gt; Open analysis output and select the folder that contains the project.jip file.\n\rWe recommend to always copy the whole project folder. This will ensure the highest reproducibility.\n\rSlot output folders are used beyond result analysis for importing/exporting cache states and to communicate with external applications like Python or R. Only the JSON file carries the metadata.\n\rA description of the contents of a table row folder can be viewed in the data type compendium (help menu).\n\r"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/parallelization/",
	"title": "Parallelization",
	"tags": [],
	"description": "",
	"content": "The current version of JIPipe supports parallelization via a fixed thread pool. Parallelization is done on an per-algorithm-level, meaning that the algorithms are responsible for providing parallelization capabilities.\nThe included base algorithms JIPipeIteratingAlgorithm, JIPipeSimpleIteratingAlgorithm, and JIPipeMergingAlgorithm already come with support for parallelization that has to be manually enabled via code. The inherit from JIPipeParallelizedAlgorithm and completely apply parallelization automatically.\nAutomated parallelization (JIPipeParallelizedAlgorithm) The automated parallelization is controlled by three factors:\n If the user enabled parallelization via a parameter If parallelization is supported In how many batches the data is separated  To enable parallelization, let supportsParallelization() return true (defaults to false). This will parallelize the processing of data interfaces (see previous chapters). As sometimes third-party algorithms apply their own parallelization, you can restrict how many threads are allocated by JIPipe by setting getParallelizationBatchSize.\nFor example, there are many image analysis algorithm implementations that use Runtime.getRuntime().availableProcessors() for their own parallelization. To ensure that only as many threads as the user selected are allocated, return Runtime.getRuntime().availableProcessors() from getParallelizationBatchSize(). The implementation then will adapt to this value.\npublic class MyAlgorithm extends JIPipeIteratingAlgorithm { /* Enable parallelization. By default false. */ @Override isParallelizationEnabled() { return true; } /* Assume that each runIteration() executes a third-party algorithm with its own parallelization based on Runtime.getRuntime().availableProcessors() threads. Tell this to the JIPipe implementation to limit the number of threads. */ @Override getParallelizationBatchSize() { return Runtime.getRuntime().availableProcessors(); } } Manual parallelization You can choose to do your own parallelization (leave isParallelizationEnabled() to return false). Each JIPipeAlgorithm object has a method getThreadPool() that returns the thread pool assigned to the current run. Please note that this thread pool can be null.\nThe thread pool provides methods to schedule workloads. If the number of threads is set to 1, the thread pool will schedule the workload into the current thread. You also have raw access to the ExecutorService behind the thread pool - just do not forget that the service can be null.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/adding-nodes-saving/",
	"title": "Adding and running nodes",
	"tags": [],
	"description": "Explains how to add new nodes into a project and use them to load an image file. Afterwards, the project is saved.",
	"content": " Tutorial: Adding and running nodes\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Adding and running nodes'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/custom-info/",
	"title": "Custom algorithm info",
	"tags": [],
	"description": "",
	"content": "In the previous tutorials we used the standard way of creating algorithms. This might not be sufficient if you want to generate algorithms, for example by importing ImageJ algorithms, loading algorithms from JSON or generate algorithms for an unknown list of data types.\nHow algorithms are registered Algorithm instances are created by an JIPipeNodeInfo. This info is the object that is actually registered into JIPipe. It is able to create new instances of the declared algorithm, or copy it. It also carries basic metadata such as a name, description, or annotation preferences.\nDeclarations should be unique and have a unique ID within the JIPipe algorithm registry.\nOn registering an algorithm like in previous tutorials, following code is run:\npublic void registerNodeType(String id, Class\u0026lt;? extends JIPipeAlgorithm\u0026gt; algorithmClass) { registerNodeType(new JIPipeJavaAlgorithmRegistrationTask(id, algorithmClass, this)); } The code generates a task that just checks if all algorithm dependencies are loaded. If all dependencies are available, the task runs:\nJIPipeAlgorithmRegistry.getInstance().register(new JIPipeNodeInfo(id, algorithmClass), source); The important bit is JIPipeNodeInfo. In the end an algorithm info is created that extract algorithm information from the class annotations.\nCreating a custom info To create a custom info, inherit from JIPipeNodeInfo. The most important functions are clone() and newInstance().\nRegister the info either via a direct call to registerNodeType(JIPipeNodeInfo) or (recommended) via a task that inherits from JIPipeNodeRegistrationTask. You can inherit from the default implementation JIPipeDefaultNodeRegistrationTask that comes with pre-made functionality to check for common dependencies. The reason behind using a task is that some algorithm-internal classes might require that data types or annotation types are already registered.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/graph-edge/",
	"title": "Graph Edge",
	"tags": [],
	"description": "Edge in a graph",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: graph-edge.schema.json\n\rEdge in a graph\r\r\rsource-node:\r\rstring\r\r\r\r\r\r\rAlgorithm ID of the edge source\r\r\rtarget-node:\r\rstring\r\r\r\r\r\r\rAlgorithm ID of the edge target\r\r\rsource-slot:\r\rstring\r\r\r\r\r\r\rSlot name within the edge source algorithm\r\r\rtarget-slot:\r\rstring\r\r\r\r\r\r\rSlot name within the edge target algorithm\r\r\r\r\r\rExample { \u0026#34;source-node\u0026#34; : \u0026#34;default-preprocessing-list-files\u0026#34;, \u0026#34;target-node\u0026#34; : \u0026#34;default-preprocessing-filter-files\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Files\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/",
	"title": "Java API documentation",
	"tags": [],
	"description": "",
	"content": "This section is about the JIPipe Java API that allows you to create SciJava plugins to extend JIPipe. The Java API is very powerful and allows you to add algorithms, annotation types and new data types. It also allows you to create UI-only components such as parameter editors, plots, and table processing operations.\nYou can refer to the JIPipe JavaDocs for more information about the API specifics. The following tutorials will show you to implement your own Java extensions via small examples.\n JavaDocs\nProvides a link to the JavaDocs\n\r Creating an extension project\nExplains how to setup a SciJava plugin project to extend JIPipe\n\r Creating an algorithm\nExplains how to create a custom algorithm\n\r Creating a data type\nExplains how to create custom data types\n\r Creating a parameter type\nExplains how to create an UI for a parameter\n\r Usage in Java\nExplains how to use the JIPipe API to run graphs, algorithms, or projects within pure java code\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/projectoverview1/",
	"title": "Project overview",
	"tags": [],
	"description": "",
	"content": "Each JIPipe project comes with a customizable Project overview tab that can be accessed via the Help \u0026gt; Project overview menu (red box 1).\nIt contains the following elements:\n A customizable title with authors, website, contact info and more (red box 2) A customizable rich text description with text and images (red box 3) Quick access to bookmarked nodes and selected parameters (both fully customizable; red box 4)  👉 Save the project while the Project overview is open. JIPipe will then show the tab when a student opens the project. Alternatively, you can enforce via the project settings that the overview should be always opened first.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/project-backups/",
	"title": "Project backups",
	"tags": [],
	"description": "Focuses on the integrated project backup function.",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/context-actions/",
	"title": "Context actions",
	"tags": [],
	"description": "",
	"content": "Context actions allow you to add custom buttons into an algorithm\u0026rsquo;s parameter group that by default will also appear within a node\u0026rsquo;s context menu. They can be used for multiple purposes such as loading example data, applying an auto-configuration, opening websites, or displaying documentation or data in a new tab.\n1.74.x\u0026#43;\r\rWe do no anymore recommend the creation of context actions to implement examples. Instead, register node examples within the extension.\r\r To create one, annotate a public function with @JIPipeDocumentation and @JIPipeContextAction. The function should have one parameter: an instance of JIPipeWorkbench.\n@JIPipeDocumentation(name = \u0026#34;Load example\u0026#34;, description = \u0026#34;Loads example parameters that showcase how to use this algorithm.\u0026#34;) @JIPipeContextAction(iconURL = ResourceUtils.RESOURCE_BASE_PATH + \u0026#34;/icons/actions/graduation-cap.png\u0026#34;) public void setToExample(JIPipeWorkbench parent) { // Insert code here } "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/data-type/",
	"title": "Creating a data type",
	"tags": [],
	"description": "Explains how to create custom data types",
	"content": "Data class Custom JIPipe data types must inherit from JIPipeData. Please implement all required functions as suggested by the interface if it is a non-abstract or interface data type.\nRequired annotations  @JIPipeDocumentation provides a name and description @JIPipeStorageDocumentation explains the structure of the storage folder. This documentation must include a human-readable description of the items contained in the storage directory, as well as a URL to a JSON Schema that describes the structure of the directory, including any nested JSON data (if possible)  Examples for storage documentations  Single text file (*.txt): https://jipipe.org/schemas/datatypes/string-data.schema.json One of multiple image files: https://jipipe.org/schemas/datatypes/imageplus-data.schema.json Single JSON file with known structure: https://jipipe.org/schemas/datatypes/path-data.schema.json Multiple image files plus JSON metadata with known structure: https://jipipe.org/schemas/datatypes/imageplus-fft-data.schema.json Multiple CSV files plus JSON metadata with known structure: https://jipipe.org/schemas/datatypes/plot-data.schema.json  Feel free to re-use schemata for different types if the structure matches.\n\rConstructor A data type has no suggested constrains for constructors.\nReading data JIPipe reads the data type by calling a static function importData(JIPipeReadDataStorage, JIPipeProgressInfo), which must be always present in any data type class.\nTo allow future abstraction of data storage, JIPipe provides a JIPipeReadDataStorage instance that contains methods for storing data into arbitrary locations. The current only implementation is JIPipeFileSystemReadDataStorage that encapsulates an empty and unique directory where data can be written.\nYou can use the getFileSystemPath() function to get the absolute path to this directory. As a file system mapping is already present, this has no additional cost.\nWe recommend to not make use of this function, as non-filesystem backends might create a full copy of all data in a temporary file cache for reading, slowing down the data transfer. We recommend to utilize the provided methods of the interface:\n resolve for navigating to sub directories list for listing items isFile / isDirectory findFilesByExtension to find files of interest readJSON / readText / readBytes to read data open to create an InputStream for reading the data  Writing data On implementing JIPipeData interface, you will implement a method exportData(JIPipeWriteDataStorage, String name, boolean forceName, JIPipeProgressInfo)\nAs with reading data, the storage is encapsulated into a dedicated interface, here JIPipeWriteDataStorage. Here, you can again access the file system path via getFileSystemPath().\nWe again recommend to utilize non-filesystem functions to improve the performance of other backends:\n resolve for navigating to sub directories list for listing items writeJSON / writeText / writeBytes to write data write to create an Output for writing the data  Additionally, a name parameter is present and contains information about possible file names. It can be ignored unless forceName is true. The reason behind this is that then the name is pre-generated in a unique way for saving the data at a non-standard location (e.g. exporting the data). In such cases all file or folder names within the storage path should contain the name in some way, even if the import function cannot load the exported data anymore.\nAdditional methods There are two optional functions that you can override:\n display() shows the data in ImageJ, JIPipe, or any other GUI preview() generates a GUI component that acts as thumbnail/preview of the contained data  Registering the data type To register the data type and provide it with an id, and icon, use JIPipeJavaExtension:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register() { // The two null parameters will be handled in the next tutorials  // You can leave them null if you want. This is valid.  registerDataType(\u0026#34;my-data\u0026#34;, MyData.class, ResourceUtils.getPluginResource(\u0026#34;/icons/data-types/data-type.png\u0026#34;)); } } Example // Documentation for this data type (for the GUI) @JIPipeDocumentation(name = \u0026#34;My data\u0026#34;, description = \u0026#34;This is some data\u0026#34;) // Human-readable description plus a JSON Schema that describe the structure of a storage folder @JIPipeStorageDocumentation(humanReadableDescription = \u0026#34;Contains exactly one *.json file that stores the string value.\u0026#34;, jsonSchemaURL = \u0026#34;https://jipipe.org/schemas/datatypes/jipipe-json-data.schema.json\u0026#34;) // You can use @JIPipeHidden to hide this data from data type list UIs public class MyData implements JIPipeData { String value; public MyData() { } // Constructor that initializes the data  public MyData(String value) { this.value = value; } @JsonGetter(\u0026#34;value\u0026#34;) public String getValue() { return value; } @JsonSetter(\u0026#34;value\u0026#34;) public String setValue(String value) { this.value = value; } // This should return a deep copy  @Override public JIPipeData duplicate() { return new MyData(value); } // The display method is optional, but recommended  @Override public void display(String displayName, JIPipeWorkbench workbench) { JIPipeTextEditor editor = JIPipeTextEditor.openInNewTab(workbench, displayName); editor.setMimeType(getMimeType()); editor.setText(data); } // The preview method is optional, but recommended for many cases  // The width and height are guidelines you should adhere to (especially the height)  @Override public Component preview(int width, int height) { // This example would overlap with toString()  return new JLabel(value); } // Do not forget to override this  @Override public String toString() { return StringUtils.orElse(value, \u0026#34;\u0026#34;); } @Override public void exportData(JIPipeWriteDataStorage storage, String name, boolean forceName, JIPipeProgressInfo progress) { // This uses the helper function of JIPipeWriteDataStorage  storage.writeJSON(name + \u0026#34;.json\u0026#34;, this); // Alternative 1: If you require an OutputStream  try(OutputStream stream = storage.write(name + \u0026#34;.json\u0026#34;)) { // Write to OutputStream [...]  } // Alternative 2: You can generate an absolute file path that can be used if no stream-based writing is available:  Path outputPath = storage.getFileSystemPath().resolve(name + \u0026#34;.json\u0026#34;); // write to output path [...]  // The storage backend will automatically ensure that the file is included  } // Do not forget to add this method or JIPipe will refuse to start  public static MyData importData(JIPipeReadDataStorage storage, JIPipeProgressInfo progress) { Path path = storage.findFileByExtension(\u0026#34;.json\u0026#34;).get(); return storage.readJSON(path, MyData.class); // Alternative options are equivalent to exportData()  } } \rYou can use JIPipe\u0026rsquo;s JsonUtils class to get access to a Jackson JSON ObjectMapper.\n\rDo not forget to override toString(), as the string representation will be displayed in the cache browser.\n\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/annotations/",
	"title": "Data annotation algorithms",
	"tags": [],
	"description": "This library provides basic functionality to add annotations to data slot rows.",
	"content": "Data annotations allow JIPipe algorithms and users to assign an unique data set to the data located in a data slot. The standard library contains various algorithms that allow to generate, manipulate, and utilize those annotations.\nWe recommend to use the algorithms in Annotation \u0026gt; Generate while setting up filesystem operations or any other import step to prevent issues in following algorithm steps.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/graph/",
	"title": "Graph",
	"tags": [],
	"description": "A graph",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: graph.schema.json\n\rA graph\r\r\radditional-metadata:\r\robject\r\r\r[object Object]\r\r\r\r\rDict of additional metadata\rSee additional-metadata\r\r\r\r\r\r\r\rnodes:\r\robject\r\r\r[object Object]\r\r\r\r\r\rThe nodes. Keys are the UUIDs.\rSee graph-node\r\r\r\r\r\r\r\redges:\r\robject[]\r\r\r\r\r\r\rThe edges. IDs in the edge definition must be consistent to the UUIDs in the 'nodes' entry\rSee graph-edge\r\r\r\r\r\r\r\r\r\r\rExample { \u0026#34;nodes\u0026#34; : { \u0026#34;default-preprocessing-filter-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Filtered files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Filtered files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 250 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;file-filter\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;Filter *.tif\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;filters\u0026#34; : [ { \u0026#34;mode\u0026#34; : \u0026#34;Glob\u0026#34;, \u0026#34;filterString\u0026#34; : \u0026#34;*.tif\u0026#34; } ], \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } }, \u0026#34;default-preprocessing-list-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Folders\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;folder\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Folders\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 50 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;folder-list-files\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;List files\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } } }, \u0026#34;edges\u0026#34; : [ { \u0026#34;source-algorithm\u0026#34; : \u0026#34;default-preprocessing-list-files\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;default-preprocessing-filter-files\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Files\u0026#34; } ] } "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-1/",
	"title": "Importing an image I",
	"tags": [],
	"description": "Explains how to add new nodes via the algorithm finder into a project and use them to import an image file.",
	"content": "👉 Related tutorial: Adding and running nodes\rThis guide is a followup of another tutorial\r\r\rRelated tutorial: Alternative option 1\rFinding and adding nodes using the search bar\r\r\rRelated tutorial: Alternative option 2\rFinding and adding nodes using the node list panel\r\r\r  Tutorial: Importing an image I/II/III\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial series 'Importing an image'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/",
	"title": "JSON API documentation",
	"tags": [],
	"description": "",
	"content": "This section is about the JIPipe JSON API that includes the API for creating JSON extensions, but also other data types like a project.\n\r Project file specification \r JSON extension file specification \r\rJSON objects The JSON API is object-oriented and re-uses different object types in multiple occasions. You will be referred to the specified documentation.\n Graph node\nNode in a graph\n\r Algorithm type\nDefines a new algorithm\n\r Dependency\nProject or extension dependency. Refers to an JIPipe extension.\n\r Graph Edge\nEdge in a graph\n\r Graph\nA graph\n\r Extension\nAn extension that can be put into the ImageJ plugin folder\n\r Metadata\nCommonly used metadata type in JIPipe.\n\r Point\nA point\n\r Project\nAn analysis project\n\r Slot definition\nDefines a data slot\n\r Data table\nDefines a data table\n\r Data table row\nDefines a data table row\n\r Annotation\nDefines an annotation\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-data-api/pipeline-output/",
	"title": "Pipeline output",
	"tags": [],
	"description": "",
	"content": "A pipeline output folder is generated on running a pipeline using the Run function or via other means of running the pipeline and saving the results to the hard drive.\nThe generated folder follows a hierarchical structure that is based on the location of data within graph compartments, nodes, and slots. It also contains a copy of the project that generated the data in a file project.jip.\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rRoot[\"/\"] -- DataTable[\"project.jip\"];\rRoot -- Compartment[\"[Compartment ID]/\"];\rCompartment -- Node[\"[Node ID]/\"];\rNode -- Slot[\"[Slot ID]/\"];\rSlot -- DT[\"Data table\"];\r  Compartment ID: The human-readable unique ID of the graph compartment the node is located in. This ID can change if the compartment is renamed. Node ID: The human-readable unique ID of the generating node. The ID can change if the node is renamed. Slot ID: The name of the slot the stores the data Data table: An instance of a data table. Stores all the data.  The data table contains a property internal-path that can be used to recover the node and compartment the data was generated in.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/projectoverview2/",
	"title": "Project overview: Editing the metadata",
	"tags": [],
	"description": "",
	"content": "The custom titles, authors, and descriptions can be edited via the Project settings that can be accessed in two ways:\n While the Project overview tab is open, click Edit metadata in the top right panel Navigate to Project \u0026gt; Project settings  The General category includes the following settings:\n The project name/title The description editor Fields where other metadata like a citation, license, and website can be given The list of authors Acknowledgements  "
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/quick-run/",
	"title": "Running a single node",
	"tags": [],
	"description": "Explains the Quick Run feature that allows to test and compare different algorithm parameters without recalculating the whole pipeline.",
	"content": "As an additional option to running the whole pipeline, JIPipe also allows you to run the workflow only up to the selected node. The most convenient way to run a single node can be accessed by clicking the green play button that is located inside each node.\nHere you will find following options:\n Update cache: Runs the pipeline up until the selected node. The result of the selected node will be stored inside a memory cache, which can be reviewed in the Cache browser tab (see below) Cache intermediate results: Runs the pipeline up until the selected node. The result of the node and the ones of intermediate steps are stored inside the cache. Run \u0026amp; show results: Runs the pipeline up until the selected node. The result of the node is stored on the hard drive. We recommend this option if you have limited memory. Show intermediate results: Runs the pipeline up until the selected node. The result of the node *and the ones of intermediate steps are stored on the hard drive.  These operations can also be accessed by selecting the  Quick Run tab in the properties panel:\nHere you can also create a custom quick run that comes with additional settings, including the number of threads, the output folder, and how the cache is utilized.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/",
	"title": "UI",
	"tags": [],
	"description": "Guides that explain specific features of the JIPipe user interface.",
	"content": "1.74.x\u0026#43;\r\rThe guides were written for JIPipe version 1.74.0 or newer\r\r Here you can find a list of tutorials that explain the JIPipe user interface, ranging from basic to advanced functions.\n Starting a new project I\nGuides through the process of creating a new project. The pipeline contains a single compartment and is thus easier for beginners.\n\r Starting a new project II\nGuides through the process of creating a new project. The pipeline contains multiple compartments and is thus a good starting point if a specific structure is expected.\n\r Opening a saved project\nGuides through the process of loading a saved project.\n\r Project backups\nFocuses on the integrated project backup function.\n\r Loading node examples\nExplains a feature that allows to load example parameters for specific nodes.\n\r Image viewer I\nBriefly explains the basic features of the JIPipe image viewer, its ROI manager component, and how to interactively draw ROIs\n\r Changing the temporary directory\nShows how to change the temporary directory used for various operations\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-2/",
	"title": "Importing an image II",
	"tags": [],
	"description": "Explains how to add new nodes via the search bar into a project and use them to import an image file.",
	"content": "👉 Related tutorial: Adding and running nodes\rThis guide is a followup of another tutorial\r\r\rRelated tutorial: Alternative option 1\rFinding and adding nodes using the algorithm finder\r\r\rRelated tutorial: Alternative option 2\rFinding and adding nodes using the node list panel\r\r\r  Tutorial: Importing an image I/II/III\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial series 'Importing an image'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/finding-connecting-nodes-3/",
	"title": "Importing an image III",
	"tags": [],
	"description": "Explains how to add new nodes via the node list into a project and use them to import an image file.",
	"content": "👉 Related tutorial: Adding and running nodes\rThis guide is a followup of another tutorial\r\r\rRelated tutorial: Alternative option 1\rFinding and adding nodes using the algorithm finder\r\r\rRelated tutorial: Alternative option 2\rFinding and adding nodes using search bar\r\r\r  Tutorial: Importing an image I/II/III\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial series 'Importing an image'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation/run-pipelines/cache/",
	"title": "Data caching",
	"tags": [],
	"description": "Explains the how JIPipe caches intermediate results and how to access them.",
	"content": "JIPipe has a project-wide cache for generated results. This cache can be accessed by algorithms to prevent repeating previous calculation steps.\nLoad data into the cache To cache data, right click a node and click  Update cache. This will execute a Quick run and store all results into the cache.\nAccessing the cache Cache items are assigned a unique identifier ( Snapshot) that is based on relevant algorithm parameters and the processing pipeline behind the data generation. You have multiple ways to manage and access the cache. First, in the top tool bar, there is a summary on how many items are currently cached. If items are stored in the cache, you have multiple options to clear the cache.\nIf you select an algorithm, you have access to its  Cache browser that lists all  Snapshots and all stored data, including a string representation, and annotations if available. By selecting a row in the data table below, you can  Show the item\u0026rsquo;s data. The operation depends on the exact data type. ImageJ images for example are opened in ImageJ.\nIf an algorithm data slot has cached data, icons appear next to the slot. Hover the items with your mouse to show a summary. Clicking the items allows you to manage the cache or display the results in a full-window cache browser.\nManaging the cache The cache consumes large amounts of memory, depending on the pipeline. Use the button at the top (menu bar) to clean all cached data or remove cached items that are invalid (e.g., because the node parameters were changed).\nYou can also enable the \u0026ldquo;Reduce memory\u0026rdquo; mode (bottom) to store unused data on the hard drive, or explicitly move cached items to the hard disk.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/node-parameters/",
	"title": "Changing node parameters",
	"tags": [],
	"description": "Provides instructions on how to change the parameters of an algorithm.",
	"content": "👉 Related tutorial: Importing an image I/II/III\rThis guide is a followup of other tutorials.\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/parameter-type/",
	"title": "Creating a parameter type",
	"tags": [],
	"description": "Explains how to create an UI for a parameter",
	"content": "JIPipe requires you to register custom parameter types, where they are assigned an unique identifier. This is done to allow future refactoring without breaking a user\u0026rsquo;s project.\nIf you just want custom lists of compound parameters, consider the usage of ParameterCollectionList (since JIPipe 1.73.0)\n\rA custom parameter type must be JSON-serializable via the Jackson library. It is associated to an editor UI that is responsible for updating the parameter value from the GUI.\nA parameter type cannot be a generic class. This is due to restrictions in the JVM. We recommend to create a sub-class for a list of a parameter if you require a list of it down the line. The list parameter inherits from the ListParameter class.\n\rCreating an editor To create an editor UI, you have to inherit from JIPipeParameterEditorUI.\nThe UI class provides access to the JIPipeParameterCollection object and the JIPipeParameterAccess object that encapsulates the getter and setters, as well as additional annotations.\nThere is also access to the SciJava context object.\nPlease be careful to avoid infinite loops between reloading and setting parameters from UI elements.\n\rRegistering a parameter Register the parameter type and its UI in JIPipeJavaExtension:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ... See previous tutorial for other methods  @Override public void register() { // You have to provide an unique ID, the parameter class, a method to create a new instance, a method to create a deep copy, and an UI class  registerParameterType(\u0026#34;my-parameter\u0026#34;, MyParameter.class, MyParameter::new, p -\u0026gt; p.clone(), \u0026#34;My parameter\u0026#34;, \u0026#34;A custom parameter type\u0026#34;, MyParameterParameterEditorUI.class); // If you have a hierarchy of parameters, you can register the editor for the whole hierarchy:  registerParameterEditor(MyCollectionBase.class, MyCollectionParameterEditorUI.class); // There is a predefined method to register enum values:  registerEnumParameterType(\u0026#34;my-enum\u0026#34;, MyEnum.class, \u0026#34;My Enum\u0026#34;, \u0026#34;Enum of values\u0026#34;); } } \rDo not forget to register all algorithm parameter types. JIPipe will throw an error if it detects a missing parameter registration.\n\rThere is an overload of registerParameterType that takes the matching list directly and automatically generates the ID, name, and description.\n\rYou can set the instance creation function to null if the parameter is default-constructable. You can set the clone function to null if the parameter type can be copied via a copy constructor.\n\rYou can review your parameter UI via Tools \u0026gt; Development \u0026gt; Show all parameter types.\n\rMaking use of the parameter registration You can use the parameter type registry to get a parameter type info. The info provides access to all metadata from the registry.\nJIPipe comes preinstalled with some common Java types (String, numerics, file and folder paths). You can take a look at the Parameters Extension package for all default parameters that are provided by JIPipe.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-data-api/",
	"title": "Data API documentation",
	"tags": [],
	"description": "",
	"content": "JIPipe communicates data with external applications via a standardized file system hierarchy. The specifications of this format are explained in this page / sub-pages.\nThe specification is used in following circumstances:\n Pipeline output Exported cache results Communication with external script languages (R, Python)  The data API is modular due to the different uses. It incorporates following elements:\n Data table row Data table Pipeline output Exported cache  Additionally, the data API incorporates elements from the JSON API to store metadata.\nThe following graph gives an overview how these relate to tech other:\nmermaid.initialize({startOnLoad:true});\rgraph LR;\rDataTable[\"Data table\"] -- DataTableRow[\"Data table row\"];\rPipelineOutput[\"Pipeline output\"] -- DataTable;\rExportedCache[\"Exported cache\"] -- DataTable;\r The smallest unit is the data table row. It stores the files of a data type in its own standardized way. Please use the\nDetailed descriptions You will find detailed descriptions on the other pages.\n Data table\nOrganizes data into an annotated table\n\r Row folder\nData storage of a JIPipe data type in the file system\n\r Data types\nCurrent list of data types available in JIPipe\n\r Pipeline output\nA pipeline output folder is generated on running a pipeline using the Run function or via other means of running the pipeline and saving the results to the hard drive. The generated folder follows a hierarchical structure that is based on the location of data within graph compartments, nodes, and slots. It also contains a copy of the project that generated the data in a file project.jip. mermaid.initialize({startOnLoad:true});\rgraph LR;\rRoot[\"\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/json-extension/",
	"title": "Extension",
	"tags": [],
	"description": "An extension that can be put into the ImageJ plugin folder",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: json-extension.schema.json\n\rAn extension that can be put into the ImageJ plugin folder\r\r\rid:\r\rstring\r\r\r\r\r\r\rUnique ID of this extension. Should have format\r\r.\r\r:\r\r\r\r\r\r\rversion:\r\rstring\r\r\r\r\r\r\rVersion of this extension\r\r\rmetadata:\r\rSee metadata\r\r\r\r\r\r\r\rGeneral metadata about the extension\r\r\ralgorithms:\r\robject[]\r\r\r\r\r\r\rList of added algorithms\rSee algorithm\r\r\r\r\r\r\r\r\r\r\rExample { \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:example-list-tiff\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Example extension\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;An example extension\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;algorithms\u0026#34; : [ { \u0026#34;id\u0026#34; : \u0026#34;folder-list-tif\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;List TIFF files\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Lists all TIFF files in a folder\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;category\u0026#34; : \u0026#34;Converter\u0026#34;, \u0026#34;graph\u0026#34; : { \u0026#34;nodes\u0026#34; : { \u0026#34;default-preprocessing-filter-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Filtered files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Filtered files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 250 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;file-filter\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;Filter *.tif\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;filters\u0026#34; : [ { \u0026#34;mode\u0026#34; : \u0026#34;Glob\u0026#34;, \u0026#34;filterString\u0026#34; : \u0026#34;*.tif\u0026#34; } ], \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } }, \u0026#34;default-preprocessing-list-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;Folders\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;folder\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Folders\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Files\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;file\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;{Vertical}\u0026#34; : { \u0026#34;x\u0026#34; : 25, \u0026#34;y\u0026#34; : 50 } }, \u0026#34;jipipe:algorithm-type\u0026#34; : \u0026#34;folder-list-files\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;name\u0026#34; : \u0026#34;List files\u0026#34;, \u0026#34;description\u0026#34; : null, \u0026#34;jipipe:trait-generation\u0026#34; : { \u0026#34;modification\u0026#34; : { \u0026#34;per-slot\u0026#34; : { }, \u0026#34;global\u0026#34; : { } }, \u0026#34;transfer\u0026#34; : { \u0026#34;transfers\u0026#34; : [ ], \u0026#34;transfer-all-to-all\u0026#34; : true } }, \u0026#34;jipipe:dynamic-parameters\u0026#34; : { } } }, \u0026#34;edges\u0026#34; : [ { \u0026#34;source-algorithm\u0026#34; : \u0026#34;default-preprocessing-list-files\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;default-preprocessing-filter-files\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Files\u0026#34; } ] }, \u0026#34;menu-path\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:project-type\u0026#34; : \u0026#34;graph-wrapper-algorithm\u0026#34;, \u0026#34;preferred-traits\u0026#34; : [ ], \u0026#34;unwanted-traits\u0026#34; : [ ], \u0026#34;added-traits\u0026#34; : [ ], \u0026#34;removed-traits\u0026#34; : [ ] } ], \u0026#34;dependencies\u0026#34; : [ { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Filesystem types and algorithms\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Data types and algorithms for interacting with files and folders\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Zoltán Cseresnyés, Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:filesystem\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; } ], \u0026#34;jipipe:project-type\u0026#34; : \u0026#34;json-extension\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/documentation/imagej-integration/",
	"title": "ImageJ integration",
	"tags": [],
	"description": "Explains functionality that allows ImageJ to run JIPipe algorithms or pipelines.",
	"content": "ImageJ to JIPipe JIPipe integrates commonly used data types and popular algorithms from ImageJ. If an algorithm is not available for JIPipe, you can still run them via the Macro node. There is also a Python script node available that behaves similar to the macro node.\nJIPipe to ImageJ JIPipe algorithms and pipelines can be executed from within an ImageJ environment. There are two ways JIPipe integrates back into ImageJ:\n You can run a pipeline project from a macro/command You can run JIPipe algorithms from a macro/command if the slot data types are supported by ImageJ  Running a pipeline You can run an JIPipe pipeline via the command Plugins \u0026gt; JIPipe \u0026gt; Run JIPipe project. It will ask you the project file and the output directory.\nTo run the command via a macro, run:\nrun(\u0026quot;Run JIPipe project\u0026quot;, \u0026quot;projectFile=\u0026lt;Project\u0026gt;, outputDirectory=\u0026lt;Directory\u0026gt;, threads=\u0026lt;Threads\u0026gt;\u0026quot;)\r\rThere can be issues using the macro recorder depending on which ImageJ algorithms are used. This issue is especially prevalent in ImageJ macro algorithm nodes.\n\rYou can also run JIPipe in headless-mode just like any ImageJ2 algorithm:\n./ImageJ-linux64 --headless --ij2 --run \u0026#34;Run JIPipe project\u0026#34; \u0026#39;projectFile=\u0026#34;\u0026lt;Project\u0026gt;\u0026#34;, outputDirectory=\u0026#34;\u0026lt;Directory\u0026gt;\u0026#34;, threads=\u0026lt;Threads\u0026gt;\u0026#39; \rWhile JIPipe works in Headless-mode, some ImageJ algorithms don\u0026rsquo;t. You will get an error message if an algorithm requires a graphical environment.\n\rRunning a single node JIPipe algorithms can be run from ImageJ macros/commands if the slot data types are compatible with ImageJ. By default, this includes any image data type, result tables, and regions of interest (via ROIManager). On running the command Plugins \u0026gt; JIPipe \u0026gt; Run JIPipe algorithm, a dialog will open that will let you select a JIPipe node and run it within ImageJ.\nProviding inputs The JIPipe node is provided with inputs via an importer that transforms non-JIPipe data into items that can be handled by JIPipe. We advise to review the settings by selecting the Data inputs/outputs tab and switching to the Inputs view. The editor will display a preview of the JIPipe node and a list of inputs and related settings.\nYou can change the importer by clicking the edit (pen) button at the top right corner of each input. Based on the selected importer, the settings within the box change to, for example, allow to select an image window.\nIf you want to specify more advanced data with text and data annotations, choose the \u0026ldquo;Data table import\u0026rdquo; option. You have to provide a path to a valid data table directory in the \u0026ldquo;Name\u0026rdquo; field.\n\rOutput data is created according to the slot name. For example if the output slot name is Output, the created image window will also be named Output.\nExporting outputs Any JIPipe output is exported back into ImageJ. Outputs are managed in a similar manner to inputs by switching to the Outputs tab. Here, you can select the type of exporter and change various export parameters.\nIf you want to export data as JIPipe data table, select the \u0026ldquo;Data table export\u0026rdquo; exporter item. If the name contains an absolute path, the data table will be written into it. Otherwise, JIPipe will create a temporary directory where outputs are written. The temporary directory is changeable in the JIPipe settings.\n\rAdding/removing slots Some nodes allow the modification of their slots. To add new slots, click the + button in the node preview at the bottom view. To edit or delete a slot, click the arrow button next to the slot and select the appropriate operation.\nImageJ macro support To run the command via a macro, run:\nrun(\u0026quot;Run JIPipe algorithm\u0026quot;, \u0026quot;nodeId=\u0026lt;Algorithm\u0026gt;, parameters=\u0026lt;Parameters\u0026gt;, inputs=\u0026lt;Inputs\u0026gt;, outputs=\u0026lt;Outputs\u0026gt;\u0026quot;)\rThe algorithm ID can be looked up via the plugin manager. are provided as string in JSON format. The JSON data should have following structure:\nThe parameters, inputs, and outputs are provided in JSON format:\n parameters contains the node parameters. These can be obtained by copying a node into the clipboard. You can leave out unused parameters to let JIPipe fill in the default value inputs assigns to each input slot the importer parameters outputs assigns to each output the output parameters  Use the \u0026ldquo;Copy command\u0026rdquo; button in the \u0026ldquo;Run JIPipe algorithm\u0026rdquo; GUI command to quickly create a valid macro for your parameters.\n\rCreating an ImageJ menu entry for a node If you are a developer of a JIPipe node (Java only) and want to provide your node as separate entry in the ImageJ menu, you can use our Java API to create custom SciJava commands that provide a similar UI to the single algorithm run. You just have to inherit from JIPipeRunCustomAlgorithmCommand and provide the constructor with the node ID. Then add the Plugin annotation just as with any SciJava command.\nCurrently known issues There may be issues if multiple ROI or result table outputs are generated. JIPipe will merge multiple ROI List data items into one Results Table.\n\rThere can be issues using the macro recorder depending on which ImageJ algorithm is executed. This issue is especially prevalent in ImageJ macro algorithm nodes.\n\r"
},
{
	"uri": "https://www.jipipe.org/documentation/plugins/",
	"title": "Managing plugins",
	"tags": [],
	"description": "Explains how to install and manage plugins.",
	"content": "JIPipe has its own plugin (extension) system that is independent of the one provided by ImageJ/SciJava. You can find a list of plugins in Plugins \u0026gt; Manage plugins.\nJIPipe by default supports two types of extensions:\n Java extensions are similar to ImageJ plugins (*.jar) and are the most powerful plugin type. Just like ImageJ plugins, they are located in the plugins directory. JSON plugins are similar to ImageJ macros or scripts, as they are pure text files. Such extensions can be created without programming via the JSON Extension Builder  Some plugins require that dependencies are installed and will notify you if something is wrong. To check if all plugins are in working condition, check if the top right button displays  All plugins valid. Otherwise click the button to show what went wrong and how to solve the issue.\n"
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/algorithm/node-examples/",
	"title": "Node examples",
	"tags": [],
	"description": "",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r To teach users about the settings of more complex nodes or to improve the convenience, you can annotate nodes with node examples. These will appear in a dedicated tab \u0026ldquo;Examples\u0026rdquo; on selecting a node within the pipeline editor.\nThe standardized example API is based around the \u0026ldquo;Node templates\u0026rdquo; functionality. To create an example, follow these steps:\n Select a single node in the expected configuration and create a node template via Right click \u0026gt; Create node template Provide an appropriate name and description. Deselect all nodes and navigate to the Node templates tab on the right-hand panel Select the newly created template and click Manage \u0026gt; Export selection to file Save the *.json file into a directory within your extension\u0026rsquo;s resources (e.g. into /path/to/my/resources/examples)  The DefaultJavaExtension class that is the basis for Java extensions comes with a method to automatically register all examples within a specified resources folder.\nInsert the following code into your extension:\n@Plugin(type = JIPipeJavaExtension.class) public class MyExtension extends JIPipeDefaultJavaExtension { // ...  // If you have custom icons, thumbnails etc., create a JIPipeResourceManager instance that points towards the root directory of your resources  // Please read the documentation of JIPipeResourceManager for more information on how to structure the resources directory  public static final JIPipeResourceManager RESOURCES = new JIPipeResourceManager(MyExtension.class, \u0026#34;resource/directory/of/my/extension\u0026#34;); // ...  @Override public void register(JIPipe jiPipe, Context context, JIPipeProgressInfo progressInfo) { // ...  registerNodeExamplesFromResources(RESOURCES, \u0026#34;examples\u0026#34;); // Will automatically search for *.json files in the subdirectory \u0026#34;examples\u0026#34;  // ...  } // ...  \rNode examples are loaded after all extensions have been initialized.\n\rIf an example fails to load, the JIPipe loading process will continue without an error message. The errors are only logged in the JIPipe initialization log.\n\rIf a node template contains multiple nodes, JIPipe will refuse to load it as example.\n\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/plots-tables/",
	"title": "Plots and tables",
	"tags": [],
	"description": "This library provides operations to generate and modify tables, as well as creating plots.",
	"content": "The standard library contains algorithms and data types that allows to manipulate tables, and create plots. The table data type is the JIPipe wrapper for the ImageJ results table (see ImageJ integration).\nManipulating tables Table manipulation operations are located in Process \u0026gt; Tables and allow you to add, remove, or replace columns.\nCreating plots Plots can be created via the Analyze \u0026gt; Plot \u0026gt; Plot tables algorithm that processes each incoming result table and produces an automatically generated plot. You can decide which plot type is generated, and how to assign the columns of the input tables to the data series as expected by the plot. Plots are exported automatically as PNG and SVG in the size set up within the algorithm node settings.\nYou can later import the plot back into the JIPipe plot editor that has more options available.\nPlot editor JIPipe comes with a plot editor GUI that allows more refined control over plots than by the standard Plot tables algorithm (for example multiple series). You can either open a plot from results, or create a new plot from scratch via Project \u0026gt; New plot.\nThe settings panel of the plot editor is split into three tabs:\n  Settings contains all general parameters of the plot. It also allows you to change the plot type.  Series contains all data series. A series is a collection of string or number arrays that is used as input for the plot. Depending on the plot type, there can be multiple series (e.g. the line XY plot can display multiple lines)  Data contains a list of data columns that can be assembled to series. You can open the columns in the table editor or import columns from a CSV file. JIPipe also supports generating columns that do not carry any data, but instead generate the requested number of rows.  Table editor While JIPipe prefers opening tables in ImageJ\u0026rsquo;s table view, it contains a table editor that allows you to do basic operations directly from within JIPipe.\nYou can find the operations on the right-hand side. They include some basic operations like modifying rows and columns, and specialized operations for scientific data, such as splitting values by category, quickly integrating the table, and combining columns into a single condition column.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/projectoverview3/",
	"title": "Project overview: Bookmarking nodes",
	"tags": [],
	"description": "",
	"content": "Bookmarks are not edited within the Project settings tab, but by marking a node directly as bookmarked.\nTo do this, select your node of interest (red arrow 1) and check the Bookmark this node parameter within the Parameters tab.\n👉 Bookmarked nodes are highlighted by a green shadow\n👉 Bookmarked nodes automatically appear within the Bookmarks panel of the Project overview, as well as in a second Bookmarks tab that appears if no node is selected\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/comments1/",
	"title": "Comment nodes",
	"tags": [],
	"description": "",
	"content": "Comment nodes are a great way to highlight a specific area or node of interest within the pipeline. For example, students can be pointed towards a node where the parameters should be adjusted to generate the expected results.\nTo add a Comment node, use the Miscellaneous menu and select Comment (red arrow 1). The node will appear within the current pipeline (red arrow 2).\n👉 Related tutorial: Importing an image I/II/III\rLearn how to find and add nodes.\r\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/jython/",
	"title": "Jython integration",
	"tags": [],
	"description": "This library provides nodes that allow to run Python scripts via the Jython library",
	"content": "The standard library contains nodes that allow to run Python scripts using the Jython library. Python scripts have access to all JIPipe and ImageJ APIs that are available at runtime.\n\rDue to restrictions in the Jython library, Python libraries that are built on a native backend (such as Numpy) will not work.\n\rAs JIPipe builds on the functionality provided by ImageJ. Please refer to the ImageJ documentation to find information on how to expand Jython with additional libraries.\n\rYou can find the nodes in the Miscellaneous menu. You can find algorithms equivalent to each of the Java standard algorithms:\n   Node Based on Purpose     Jython script JIPipeParameterSlotAlgorithm This algorithm allows users to run multiple parameter sets by optionally enabling an additional slot Parameters.   Jython script (simple iterating) JIPipeSimpleIteratingAlgorithm A JIPipeParameterSlotAlgorithm that has one input slot and iterates over the input rows.   Jython script (iterating) JIPipeIteratingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches.   Jython script (merging) JIPipeMergingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches. The difference to JIPipeIteratingAlgorithm is that a batch can have duplicate items per slot.    Common functions All Python script nodes share a set of variables that are available in the code:\n   Variable Purpose     input_slots A list of all effective input slots. This means, slots like the \u0026lsquo;Parameters\u0026rsquo; slot are not listed here. Each slot is using the Jython API to access the native Java data type. Refer to the JIPipeDataSlot documentation for further information.   output_slots A list of all output slots. Each slot is using the Jython API to access the native Java data type. Refer to the JIPipeDataSlot documentation for further information.   input_slot_map A dictionary from input slot name to input slot instance.   output_slot_map A dictionary from output slot name to output slot instance.    Data batch access Python nodes based on JIPipeSimpleIteratingAlgorithm, JIPipeIteratingAlgorithm, and JIPipeMergingAlgorithm repeat the script for each data batch (or at least once if there is none). Data batches organize the data of various input slots into one bundle that should be processed. Access to this data batch is provided via a variable data_batch.\nThis variable points to an instance of JIPipeDataBatch (or JIPipeMergingDataBatch for the merging algorithm).\nScript parameters Each node provides means to define Python variables inside the JIPipe environment via custom parameters. Each parameter value is passed as variable into Python - the name of the variable being determined by the unique ID of the parameter.\nAll Python nodes are multi-parameter capable (including iterating and merging nodes). \u0026ldquo;Jython script (multi-parameter capable)\u0026rdquo; provides a unique variable parameter_annotations that contains any annotations of the current parameter set.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/node-examples/",
	"title": "Loading node examples",
	"tags": [],
	"description": "Explains a feature that allows to load example parameters for specific nodes.",
	"content": "👉 Related tutorial: Changing node parameters\rThis guide is a followup of another tutorial.\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r Please note that not all nodes come with prepackaged example configurations.\n\r"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/metadata/",
	"title": "Metadata",
	"tags": [],
	"description": "Commonly used metadata type in JIPipe.",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: metadata.schema.json\n\rCommonly used metadata type in JIPipe.\r\r\rname:\r\rstring\r\r\r\r\r\r\rA name\r\r\rdescription:\r\rstring\r\r\r\r\r\r\rA description\r\r\rauthors:\r\rstring\r\r\r\r\r\r\rComma-separated list of authors\r\r\rwebsite:\r\rstring\r\r\r\r\r\r\rWebsite of the project\r\r\rlicense:\r\rstring\r\r\r\r\r\r\rName of the license\r\r\rcitation:\r\rstring\r\r\r\r\r\r\rCitation for the publication\r\r\r\r\r\rExample { \u0026#34;name\u0026#34; : \u0026#34;Image property annotations\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Commonly used annotations for describing image properties\u0026#34;, \u0026#34;authors\u0026#34; : \u0026#34;Zoltán Cseresnyés, Ruman Gerst\u0026#34;, \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD-2\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/documentation-java-api/usage-in-java/",
	"title": "Usage in Java",
	"tags": [],
	"description": "Explains how to use the JIPipe API to run graphs, algorithms, or projects within pure java code",
	"content": "The JIPipe API allows you to run algorithms, graphs, and projects in a pure Java environment without the need for a GUI or through ImageJ1 or ImageJ2 scripts.\nPrerequisites To use the JIPipe API JIPipe must be initialized first. This requires an ImageJ instance or any other way to load SciJava plugins. The following example shows how to initialize JIPipe manually from a main function.\npublic static void main(String[] args) { // Just call this function before all others. It will create a new ImageJ instance and passes the context to JIPipe  // If JIPipe is already initialized, the function has no effect  JIPipe.ensureInstance(); // If you already have a Context object: JIPipe.ensureInstance(context)  // JIPipe is now ready to use } Loading and running a project You can load a project via a static method. Running the project either involves enqueuing a run into the global queue or running it on the current thread. The run has a multitude of settings that control how/if output is written or how many threads are used.\npublic static void main(String[] args) { // First initialize JIPipe before this line!  // Load the project  // JIPipe will put any non-exception errors or warnings into the report  JIPipeValidityReport report = new JIPipeValidityReport(); JIPipeProject project = JIPipeProject.loadProject(Paths.get(\u0026#34;my-project.jip\u0026#34;), report); // Create a run that generates a deep-copy of the project\u0026#39;s graph  // The run is controlled by the JIPipeRunSettings instance that allows you to  // have runs without caching or writing outputs if needed  JIPipeRunSettings settings = new JIPipeRunSettings(); settings.setOutputPath(Paths.get(\u0026#34;/data/my-project-output\u0026#34;)); JIPipeRun run = new JIPipeRun(project, settings); // Option 1: Run in separate thread (Async)  JIPipeRunnerQueue.getInstance().enqueue(run); // Option 2: Run it on the current thread  // The run itself has a property getProgressInfo() that allows access to the progress \u0026amp; log  run.run(); } Loading a result To load an existing result folder, the run is imported back into JIPipe. The run itself contains a graph instance with nodes that are aware of the data storage location. The storage location contains a data-table.json file that can be imported into an exported data table. This table contains all metadata and the relative storage location of each row.\nRow data is always stored in folders that correspond to the row index. For example, the first row\u0026rsquo;s data is stored in a folder 0.\npublic static void main(String[] args) { // First initialize JIPipe before this line!  // Load the run  // It will load the project as well  Path path = Paths.get(\u0026#34;/data/my-project-output\u0026#34;); JIPipeRun run = JIPipeRun.loadFromFolder(path, report); run.getProject().setWorkDirectory(path); // You can now access the run\u0026#39;s graph and access the data slots  JIPipeDataSlot slot = run.getGraph().getNodes().get(\u0026#34;some-node\u0026#34;).getOutputSlot(\u0026#34;Output\u0026#34;); // Load the slot\u0026#39;s data table  JIPipeExportedDataTable table = slot.getStorageDataTable(); // Example: Get the folder where the first row stores its data  Path firstRowStorage = slot.getRowStoragePath(0); } Building and running a graph JIPipe allows to create and run graphs without involving a project. A simple graph runner is available to execute a graph.\npublic static void main(String[] args) { // First initialize JIPipe before this line!  JIPipeGraph graph = new JIPipeGraph(); // There are multiple ways to instantiate a new node:  // Option 1: Utility function  JIPipeGraphNode first = JIPipe.createNode(\u0026#34;import-file\u0026#34;, JIPipeGraphNode.class); // Option 2: Using the registry  JIPipeGraphNode second = JIPipeNodeRegistry.getInstance().getInfoById(\u0026#34;import-imagej-imgplus-from-file\u0026#34;).newInstance(); // Add the nodes into the graph and connect them  graph.insertNode(first, JIPipeGraph.COMPARTMENT_DEFAULT); graph.insertNode(second, JIPipeGraph.COMPARTMENT_DEFAULT); graph.connect(first, second); // Use the graph runner  // We always recommend to make a copy of the graph if it is used somehere else  JIPipeGraphRunner run = new JIPipeGraphRunner(new JIPipeGraph(graph)); // Option 1: Run in separate thread (Async)  JIPipeRunnerQueue.getInstance().enqueue(run); // Option 2: Run it on the current thread  // The run itself has a property getProgressInfo() that allows access to the progress \u0026amp; log  run.run(); } Running a single node You can run single algorithm nodes without involving a project or a graph:\npublic static void main(String[] args) { // First initialize JIPipe before this line!  JIPipeSimpleIteratingAlgorithm node = JIPipe.createNode(\u0026#34;import-imagej-imgplus-from-file\u0026#34;, JIPipeSimpleIteratingAlgorithm.class); // The node requires a progress info  JIPipeProgressInfo progress = new JIPipeProgressInfo(); // Always clear the node first (allows you to re-use it)  node.clearSlotData(); // Add inputs  node.getFirstInputSlot().addData(new FileData(Paths.get(\u0026#34;/data/image.tif\u0026#34;)), progress); // Run the node  node.run(progress); // Extract the output  ImagePlusData image = node.getFirstOutputSlot().getData(0, ImagePlusData.class, progress); } "
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/python/",
	"title": "Python integration",
	"tags": [],
	"description": "This library provides nodes that allow to run Python scripts.",
	"content": "The standard library contains nodes that allow to run Python scripts using an existing installation of Python. This means you will need to download Python, Anaconda, or Miniconda.\nSetting up Python You have the option to either select an existing Python environment, or let JIPipe install a new Conda environment into a folder.\nTo setup Python, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Python integration. There you will find a setting Python environment that, by default, is not set up.\nIf you want to select an existing Python environment or let JIPipe handle the installation for you, choose the Select/Install button and select the appropriate operation. Follow the instructions provided in the newly opened window.\nYou can also edit existing Python environments by selecting the Edit button to, for example, setup environment variables or change command line parameters.\nIncluded nodes You can find the nodes in the Miscellaneous menu. You can find algorithms equivalent to each of the Java standard algorithms:\n   Node Based on Purpose     Python script JIPipeParameterSlotAlgorithm This algorithm allows users to run multiple parameter sets by optionally enabling an additional slot Parameters.   Python script (simple iterating) JIPipeSimpleIteratingAlgorithm A JIPipeParameterSlotAlgorithm that has one input slot and iterates over the input rows.   Python script (iterating) JIPipeIteratingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches.   Python script (merging) JIPipeMergingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches. The difference to JIPipeIteratingAlgorithm is that a batch can have duplicate items per slot.    Common functions All Python script nodes share a set of variables that are available in the code:\n   Variable Purpose     jipipe_inputs A dict of slot name to an instance of DataSlot. Each item represents the input data of the current data batch/current input.   jipipe_outputs A dict of slot name to an instance of DataSlot. Each item represents the output data of the current data batch/current output.    Data I/O Python nodes based on JIPipeSimpleIteratingAlgorithm, JIPipeIteratingAlgorithm, and JIPipeMergingAlgorithm repeat the script for each data batch (or at least once if there is none). Data batches organize the data of various input slots into one bundle that should be processed.\nData access is handled through temporary folders that contain input/output data in JIPipe standardized format. The nodes are supplied with a Python API that allows to read/write data and metadata in this format.\nYou can choose to not use the reading/writing functions provided by this package and access the input/output folders directly.\nEach JIPipe data type provides information about the structure of the data folder. You can find it in [?] \u0026gt; Data type compendium.\n\rScript parameters Each node provides means to define Python variables inside the JIPipe environment via custom parameters. Each parameter value is passed as variable into Python - the name of the variable being determined by the unique ID of the parameter.\nAll Python nodes are multi-parameter capable (including iterating and merging nodes). \u0026ldquo;Python script (multi-parameter capable)\u0026rdquo; provides a unique variable parameter_annotations that contains any annotations of the current parameter set.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/comments2/",
	"title": "Comment nodes: Customization",
	"tags": [],
	"description": "",
	"content": "Comment nodes can be customized in the Parameters tab via a custom background color, custom icon, and custom text color (red box 1).\nAs with any JIPipe node, you an change the name displayed within the pipeline and provide a rich text description with text and images (red box 2).\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/image-viewer-1/",
	"title": "Image viewer I",
	"tags": [],
	"description": "Briefly explains the basic features of the JIPipe image viewer, its ROI manager component, and how to interactively draw ROIs",
	"content": "👉 Related tutorial: Importing an image I/II/III\rThis guide is a followup of another tutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/point/",
	"title": "Point",
	"tags": [],
	"description": "A point",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: point.schema.json\n\rA point\r\r\rx:\r\rinteger\r\r\r\r\r\r\rX coordinate\r\r\ry:\r\rinteger\r\r\r\r\r\r\rY coordinate\r\r\r\r\r\rExample { \u0026#34;x\u0026#34; : 2900, \u0026#34;y\u0026#34; : 100 } "
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/r-integration/",
	"title": "R integration",
	"tags": [],
	"description": "This library provides nodes that allow to run R scripts.",
	"content": "The standard library contains nodes that allow to run R scripts. This means that you will need to install a distribution of R.\nYou will need to install R (https://www.r-project.org/) and setup JIPipe to find this installation.\n\rSetting up R You have the option to either select an existing R environment, or let JIPipe install a new R environment into a folder (only available on Windows).\nTo setup Python, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; R integration. There you will find a setting R environment that, by default, is not set up.\nIf you want to select an existing R environment or let JIPipe handle the installation for you, choose the Select/Install button and select the appropriate operation. Follow the instructions provided in the newly opened window.\nYou can also edit existing R environments by selecting the Edit button to, for example, setup environment variables or change command line parameters.\nIncluded nodes You can find the R scripting nodes in the Miscellaneous menu. You can find algorithms equivalent to following Java standard algorithms:\n   Node Based on Purpose     R script (iterating) JIPipeIteratingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches.   R script (merging) JIPipeMergingAlgorithm A JIPipeParameterSlotAlgorithm that can have multiple input slots and match annotations of the input data to create data batches. The difference to JIPipeIteratingAlgorithm is that a batch can have duplicate items per slot.    Both nodes share a similar R API to communicate with JIPipe - the difference being how many data items can be processed in each iteration. All nodes repeat the script for each data batch (or at least once if there is none). Data batches organize the data of various input slots into one bundle that should be processed.\nData I/O As R is run in a separate environment, the data is communicated by writing it to the hard drive from one process and reading it back inside the other process. Currently, the nodes are designed for following data types:\n   Data type As input As output     Results table Provided as CSV file or data frame Saved as single CSV file. JIPipe will load this CSV file.   Colored Image (RGB) Not supported Saved as single PNG/TIFF/JPG. JIPipe will load the image.    Other data types are supported, although there are no predefined utility functions to load/save them for now.\nLoading results tables Result tables can be loaded via the JIPipe.GetInputAsDataFrame(slot, row=0) function. The slot parameter must be identical to the name of the input slot. The row parameter indicates which item of the current data batch should be returned. Please note that row can only be zero if you are using R script (iterating).\nIf you have multiple rows, you can find their count in JIPipe.InputSlotRowCounts\nfor( i in 1:JIPipe.InputSlotRowCounts$Tables) { # Note that the row has zero-based indices table \u0026lt;- JIPipe.GetInputAsDataFrame(slot=\u0026#34;Tables\u0026#34;, row=i-1) } Writing result tables Result tables can be written via a function JIPipe.AddOutputDataFrame(data, slot, annotations=list()). This will add a new result table to the specified output. Please note, that you can add multiple outputs.\nThe provided data must be of a type compatible with write.csv, like data.frame.\nOptionally, you can provide a list of annotations that should be added to the specified output data as list of named strings.\nlibrary(datasets) JIPipe.AddOutputDataFrame(iris, \u0026#34;Tables\u0026#34;, annotations=list(\u0026#34;data set\u0026#34;=\u0026#34;Iris\u0026#34;)) Writing plots or other images As R does not have a dedicated data type for images, the JIPipe API will only provide means to generate a valid output file name. For this, two methods JIPipe.AddOutputPNGImagePath(data, slot, annotations=list()) and JIPipe.AddOutputTIFFImagePath(data, slot, annotations=list()) are available that produce a path for PNG or TIFF files respectively.\nWe recommend to use the \u0026lsquo;Image (RGB)\u0026rsquo; or any other RGB output type. This is due to the R behavior of generating images with indexed colors that are detected as greyscale images by JIPipe.\n\rlibrary(datasets) # Generate the output file name png.file.name \u0026lt;- JIPipe.AddOutputPNGImagePath(slot=\u0026#34;Plot\u0026#34;) # Use standard R functions. Write into this file. png(png.file.name, width = 800, height = 600) plot(iris$Petal.Length, iris$Petal.Width, pch=21, bg=c(\u0026#34;red\u0026#34;,\u0026#34;green3\u0026#34;,\u0026#34;blue\u0026#34;)[unclass(iris$Species)], main=\u0026#34;Edgar Anderson\u0026#39;s Iris Data\u0026#34;) dev.off() # JIPipe will automatically load the data Reading and writing other data types Currently, only reading and writing of tables, as well as writing of image data is supported via convience functions. The node supports all other JIPipe data types, although import and export must be written via custom functions.\nJIPipe provides the input of each data item via a dedicated folder that contains all files related to this data. Use JIPipe.GetInputFolder(slot, row=0) get obtain the path to this folder.\nOutputs are also expected to be provided in standardized JIPipe format. Use JIPipe.AddOutputFolder(slot, annotations=list()) to obtain a valid path to such a folder and register the output.\nEach JIPipe data type provides information about the structure of the data folder. You can find it in [?] \u0026gt; Data type compendium.\n\rScript parameters Each node provides means to define R variables inside the JIPipe environment via custom parameters. Each parameter value is passed as variable into R - the name of the variable being determined by the unique ID of the parameter.\nIndependent of the compatibility of a parameter\u0026rsquo;s unique key, all variables are also provided as named list entries in JIPipe.Variables.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/",
	"title": "Standard library",
	"tags": [],
	"description": "Contains some explanations about the algorithms that are included in the JIPipe standard distribution.",
	"content": "JIPipe comes with a standard library of data types, algorithms, and other functionality that makes it ready to use for most common image analysis projects. The library of course can be extended with plugins.\nPlease take a look at the following standard library components:\n ImageJ integration\nThis library provides integration of ImageJ data types, as well as common ImageJ algorithms.\n\r Macro node\nThe macro node allows to run ImageJ macros.\n\r Filesystem algorithms\nThis library provides data types for that wrap filesystem objects, as well as algorithms to navigate the filesystem and extract information.\n\r Data annotation algorithms\nThis library provides basic functionality to add annotations to data slot rows.\n\r Plots and tables\nThis library provides operations to generate and modify tables, as well as creating plots.\n\r Jython integration\nThis library provides nodes that allow to run Python scripts via the Jython library\n\r Python integration\nThis library provides nodes that allow to run Python scripts.\n\r R integration\nThis library provides nodes that allow to run R scripts.\n\r Cellpose integration\nIntegrates the Cellpose tool into JIPipe.\n\r Deep Learning\nIntegrates Deep Learning capabilities (Tensorflow, Keras).\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/cellpose/",
	"title": "Cellpose integration",
	"tags": [],
	"description": "Integrates the Cellpose tool into JIPipe.",
	"content": "JIPipe provides an integration of Cellpose that both can apply segmentation, and training from within JIPipe.\nSetting up Cellpose Cellpose is a Python library and is integrated via the Python library. This means that you will need to setup a Python environment with Cellpose installed (follow the documentation here: https://github.com/MouseLand/cellpose) and provide the appropriate settings to JIPipe.\nAlternatively, JIPipe provides automated installers (tested on Linux and Windows) that will download and setup Cellpose automatically.\nTo setup Cellpose, navigate to Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Cellpose. Here you can find a setting Cellpose Python environment that is enabled by default, meaning that Cellpose is executed in a different Python environment than the one setup in the Python library (recommended). You can disable the setting if you want.\nTo install Cellpose or select an existing Python environment, click the Select/Install button. Here you can select an existing Conda environment, or let JIPipe install the CPU or GPU version of Cellpose.\nGPU processing requires large amounts of VRAM. You can always disable GPU processing on a per-node basis if your hardware is not sufficient. Cellpose also will fall back to CPU processing if GPU processing cannot applied.\n\rEspecially on Windows, the installation of the GPU version takes a considerable time (30 min +). Due to buffered text output, you might not always receive progress info from the Conda installation process. We cannot fix this on our end.\n\rOnly Nvidia GPUs:\rIf you want to make use of GPU processing, you will need to install the CUDA Toolkit.\rOn Ubuntu Linux, install the package nvidia-cuda-toolkit (please review the output of APT carefully, as nvidia-cuda-toolkit only works with specific driver versions).\rOn Windows, download the CUDA toolkit from the Nvidia homepage. Please restart JIPipe or Windows after installing the toolkit - otherwise the installed files will not be found by Tensorflow.\r\rSegmentation with Cellpose Segmenting images with Cellpose is handled by the Cellpose node (Images \u0026gt; Deep learning \u0026gt; Cellpose). It receives 2D or 3D images and, by default, outputs the ROI in ImageJ/JIPipe format (ROI Lists).\nThe node has a multitude of parameters that allow to customize its behavior and how Cellpose is executed:\n You can enable additional outputs, for example the probability map or the cell flows You can change the model to one of the pretrained ones (Cyto or Nuclei), or a custom pre-trained model (received via an input slot) The model and performance parameters Various thresholds used internally by Cellpose Enable augmentation or other tweaks  Training with Cellpose JIPipe supports training a Cellpose model and size model via the Cellpose training node. It can train from scratch, or continue training a predefined model (custom or Cyto/Nuclei).\nJIPipe automatically saves all inputs in appropriate folders and runs the training CLI according to the Cellpose documentation.\nCellpose requires input images annotated with their respective mask labels. To annotate masks to the image, use the Annotate with data node.\nThe output of this node are Cellpose model data that can be either saved to a file or further processed in JIPipe.\nTest data is optional (that\u0026rsquo;s why the triangle is grey if disconnected). We still recommend to provide both training and test data sets. You can use the \u0026lsquo;Split data randomly (percentage)\u0026rsquo; node to split data into two sets.\n\rTroubleshooting The most common issue is insufficient VRAM with GPU processing enabled. Please always ensure that issues are not caused by GPU problems (disable GPU processing to be sure!).\nJIPipe automatically exports all relevant data and scripts into a temporary folder that, by default, is automatically deleted on successful execution of the node. You can always disable this behavior by disabling the Clean up data after processing setting. The folder is always logged and can be accessed via Tools \u0026gt; Logs.\nThe logs also provide information about the exact Python commands that are executed. You can use this information to find out why there is a problem.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/comments3/",
	"title": "Comment nodes: Connecting to nodes",
	"tags": [],
	"description": "",
	"content": "You can freely connect Comment nodes to the inputs or outputs of other nodes (red box 1).\n👉 Comments are automatically excluded from pipeline runs, as they do not contain any workloads. You can freely connect them to anywhere you like without changing the behaviour of the pipeline.\nBookmark comments with tasks or other instructions, so that students can find them easily via the Bookmarks panel.\nBookmarks also render the description, so you can also use comments to ask for answers, e.g.,:\n Name Run the pipeline and find out how many objects were detected Description Your answer (How many objects?): [insert your answer here]\n \r"
},
{
	"uri": "https://www.jipipe.org/documentation/create-json-extensions/",
	"title": "Extension builder",
	"tags": [],
	"description": "Explains the extension builder tool",
	"content": "JIPipe allows the creation of extensions that contain additional algorithms without the need for writing Java code. We recommend starting from a functional pipeline project and export the whole pipeline or a part of it into a JSON Extension. Alternatively, you can create custom algorithms from scratch within the extension builder.\nIf you want a step-by-step guideline on how to create a custom algorithm, please check out our tutorial.\nExporting from an existing pipeline Within the JIPipe interface, you can find contextual menu items and buttons that allow to generate an exported algorithm.\n To export the whole pipeline as algorithm, select Project \u0026gt; Export as custom algorithm To export a graph compartment, select it and click the Export button at the top-right corner. Then select  As custom algorithm To export a selection of nodes, click the Export button at the top-right corner. JIPipe ensures that connections within the selected nodes are exported as well. To export a single algorithm, click the Export button at the top-right corner. Please note that if the algorithm is a  Group algorithm, the group contents are exported instead of the group iself.  This will open a tab showing a preview of the pipeline. Select Export to extension to copy the custom algorithm into a new or existing extension.\n\rTo open a new extension builder or load a JSON extension, you can use Plugins \u0026gt; New JSON extension ...\r\rThe extension builder The extension builder opens three tabs:\n A short introduction A tab that allows you to change the extension settings and metadata A tab that lists all algorithms that are part of the extension  Extension settings All extension metadata can be changed from within this tab. There are only three fields that are mandatory and one where you have to put special care in deciding about the value:\n Unique extension ID is the most important field. It contains a unique identifier that is utilized by JIPipe to figure out project and algorithm dependencies. It must have following format: [Author]:[Id] where [Author] contains information about the author (ideally in Maven-compatible format) and [Id] is the identifier if this extension within the author\u0026rsquo;s group. Version is not used by JIPipe but can be helpful for users to find issues Name is displayed in the plugin manager  You can write anything you want into the other metadata fields or leave them out.\nExtension contents This interface allows you to manage the list of algorithms that are contained within the extension. If you want, you can also create algorithms from scratch (although we do not recommend this as you cannot test pipelines within the extension builder). On selecting an algorithm, you can edit its metadata.\n Algorithm ID is the most important field. It uniquely identifies the algorithm within JIPipe. The ID is not namespaced (meaning that it is independent of the extension ID). We recommend to choose a meaningful name that can be easily expanded for specialized algorithms. Category determines in which menu the algorithm is shown. Please note that if you select DataSource, the algorithm will be placed in a menu based on the output data type. Choosing Internal is not allowed.  You can edit the graph that defines the algorithm\u0026rsquo;s workload by clicking  Edit algorithm. Use this to modify the pipeline to your needs and change parameters. Please note that you cannot test the pipeline.\n\rWe recommend to check if you have some parameters that are invalid or dangerous (e.g. file paths that were copied when exportiong from a project). You algorithms should always\rhave sane defaults.\r\rExporting parameters By default (this excludes exporting from a  Group algorithm) your algorithm will not have any parameters aside of the default ones (name, description, pass-though, and enabled). The extension builder comes with a powerful editor to reference parameters within the algorithm\u0026rsquo;s graph.\nExported parameters are organized in Groups with each group having a title and optional description. Each group holds a collection of parameter references that can be assigned a custom name and description. Click  Add group to create a new empty group or use the  Auto add algorithm button to import parameters from a node and automatically create groups.\nIn a group, you can use the  Add parameter button to create a reference.\n\rHover over the blue  wrench icon to display information about the referenced parameter.\r\r\rEach parameter can only be referenced once. You will get a warning if you have duplicate references. If you ignore the warning, JIPipe will just skip them when creating the parameter UI.\r\r\rThe parameter editor UI implements a sub-set of the parameter reference standard to prevent overloading the UI. You always can change the JSON file to control additional properties like\ra manual order of the parameter items.\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-1/",
	"title": "Importing a directory of images I",
	"tags": [],
	"description": "Explains how to use filesystem nodes to automatically detect and load all images in a directory.",
	"content": "👉 Related tutorial: Changing node parameters\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Importing a directory of images I\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Importing a directory of images I'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/project/",
	"title": "Project",
	"tags": [],
	"description": "An analysis project",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: project.schema.json\n\rAn analysis project\r\r\rjipipe:project-type:\r\rstring\r\r, x ∈ {\rproject\r\r(default)\r}\r\r\r\r\r\r\rUsed to identify this JSON as JIPipe project\r\r\rmetadata:\r\rSee metadata\r\r\r\r[object Object]\r\r\r\r\r\rGeneral information about the project\r\r\rdependencies:\r\robject[]\r\r\r\r\r\r\rDependencies of this project\rSee dependency\r\r\r\r\r\r\r\rgraph:\r\rSee graph\r\r\r\r[object Object]\r\r\r\r\r\rContains the pipeline nodes\r\r\rcompartments:\r\robject\r\r\r[object Object]\r\r\r\r\r\rFor organization of compartments\r\rcompartment-graph:\r\rSee graph\r\r\r\r[object Object]\r\r\r\r\r\rStructural graph of compartments\r\r\r\r\r\r\r\r\r\rExample { \u0026#34;jipipe:project-type\u0026#34; : \u0026#34;project\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Empty (3 compartments)\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;This template contains three compartments \u0026#39;Preprocessing\u0026#39;, \u0026#39;Analysis\u0026#39;, and \u0026#39;Postprocessing\u0026#39; that are connected to each other.\u0026#34;, \u0026#34;authors\u0026#34; : [ ], \u0026#34;website\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;dependencies\u0026#34; : [ { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Standard plots\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Commonly used plot types\u0026#34;, \u0026#34;authors\u0026#34; : [ { \u0026#34;first-name\u0026#34; : \u0026#34;Zoltán\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Cseresnyés\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\u0026#34; }, { \u0026#34;first-name\u0026#34; : \u0026#34;Ruman\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Gerst\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\\nFaculty of Biological Sciences, Friedrich-Schiller-University Jena, Germany\u0026#34; } ], \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD 2-Clause\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:plots\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; }, { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;ImageJ algorithms\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Integrates ImageJ algorithms into JIPipe\u0026#34;, \u0026#34;authors\u0026#34; : [ { \u0026#34;first-name\u0026#34; : \u0026#34;Zoltán\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Cseresnyés\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\u0026#34; }, { \u0026#34;first-name\u0026#34; : \u0026#34;Ruman\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Gerst\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\\nFaculty of Biological Sciences, Friedrich-Schiller-University Jena, Germany\u0026#34; } ], \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD 2-Clause\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:imagej-algorithms\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; }, { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Filesystem types and algorithms\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Data types and algorithms for interacting with files and folders\u0026#34;, \u0026#34;authors\u0026#34; : [ { \u0026#34;first-name\u0026#34; : \u0026#34;Zoltán\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Cseresnyés\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\u0026#34; }, { \u0026#34;first-name\u0026#34; : \u0026#34;Ruman\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Gerst\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\\nFaculty of Biological Sciences, Friedrich-Schiller-University Jena, Germany\u0026#34; } ], \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD 2-Clause\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:filesystem\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; }, { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Compartment management\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Data types required for graph compartment management\u0026#34;, \u0026#34;authors\u0026#34; : [ { \u0026#34;first-name\u0026#34; : \u0026#34;Zoltán\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Cseresnyés\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\u0026#34; }, { \u0026#34;first-name\u0026#34; : \u0026#34;Ruman\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Gerst\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\\nFaculty of Biological Sciences, Friedrich-Schiller-University Jena, Germany\u0026#34; } ], \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD 2-Clause\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:compartments\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; }, { \u0026#34;metadata\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;ImageJ integration\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Adds support for commonly used ImageJ data types\u0026#34;, \u0026#34;authors\u0026#34; : [ { \u0026#34;first-name\u0026#34; : \u0026#34;Zoltán\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Cseresnyés\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\u0026#34; }, { \u0026#34;first-name\u0026#34; : \u0026#34;Ruman\u0026#34;, \u0026#34;last-name\u0026#34; : \u0026#34;Gerst\u0026#34;, \u0026#34;affiliations\u0026#34; : \u0026#34;Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans-Knöll-Institute, Jena, Germany\\nFaculty of Biological Sciences, Friedrich-Schiller-University Jena, Germany\u0026#34; } ], \u0026#34;website\u0026#34; : \u0026#34;https://jipipe.org/\u0026#34;, \u0026#34;license\u0026#34; : \u0026#34;BSD 2-Clause\u0026#34;, \u0026#34;citation\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;id\u0026#34; : \u0026#34;org.hkijena.jipipe:imagej-integration\u0026#34;, \u0026#34;version\u0026#34; : \u0026#34;1.0.0\u0026#34; } ], \u0026#34;additional-metadata\u0026#34; : { \u0026#34;pipeline-parameters\u0026#34; : { \u0026#34;jipipe:type\u0026#34; : \u0026#34;org.hkijena.jipipe.ui.settings.JIPipeProjectInfoParameters\u0026#34;, \u0026#34;exported-parameters\u0026#34; : { \u0026#34;parameter-reference-groups\u0026#34; : [ ] } }, \u0026#34;org.hkijena.jipipe:pipeline-parameters\u0026#34; : { \u0026#34;jipipe:type\u0026#34; : \u0026#34;org.hkijena.jipipe.ui.settings.JIPipeProjectInfoParameters\u0026#34;, \u0026#34;exported-parameters\u0026#34; : { \u0026#34;parameter-reference-groups\u0026#34; : [ ] } }, \u0026#34;org.hkijena.jipipe.ui:project-tabs\u0026#34; : { \u0026#34;jipipe:type\u0026#34; : \u0026#34;org.hkijena.jipipe.ui.project.JIPipeProjectTabMetadata\u0026#34;, \u0026#34;data\u0026#34; : { \u0026#34;open-tabs\u0026#34; : [ \u0026#34;singleton:INTRODUCTION\u0026#34;, \u0026#34;singleton:COMPARTMENT_EDITOR\u0026#34;, \u0026#34;graph-compartment:preprocessing\u0026#34;, \u0026#34;graph-compartment:analysis\u0026#34;, \u0026#34;graph-compartment:postprocessing\u0026#34; ], \u0026#34;selected-tab\u0026#34; : null } } }, \u0026#34;graph\u0026#34; : { \u0026#34;nodes\u0026#34; : { \u0026#34;preprocessing-folder-list\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 400, \u0026#34;y\u0026#34; : 300 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;import-folder-list\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;folder-paths\u0026#34; : [ \u0026#34;ATTC_IµL_3rdReplicate-Experiment-5516\u0026#34;, \u0026#34;ATTC_IµL_3rdReplicate-Experiment-5517\u0026#34;, \u0026#34;ATTC_IµL_3rdReplicate-Experiment-5518\u0026#34; ], \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Folder list\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null }, \u0026#34;preprocessing-path-to-annotation\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 400, \u0026#34;y\u0026#34; : 500 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;path-to-annotation-simple\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;annotation-merge-strategy\u0026#34; : \u0026#34;OverwriteExisting\u0026#34;, \u0026#34;remove-extensions\u0026#34; : true, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;generated-annotation\u0026#34; : \u0026#34;Dataset\u0026#34;, \u0026#34;full-path\u0026#34; : false, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Path to annotation\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;preprocessing-list-files\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 425, \u0026#34;y\u0026#34; : 700 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;folder-list-files\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;subfolder\u0026#34; : \u0026#34;in\u0026#34;, \u0026#34;recursive-follows-links\u0026#34; : true, \u0026#34;filters\u0026#34; : [ { \u0026#34;mode\u0026#34; : \u0026#34;Glob\u0026#34;, \u0026#34;filter-string\u0026#34; : \u0026#34;*.tif\u0026#34;, \u0026#34;invert\u0026#34; : false } ], \u0026#34;only-filenames\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;recursive\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;List files\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;preprocessing-import-image\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 425, \u0026#34;y\u0026#34; : 900 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;import-imagej-imgplus-from-file\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;generated-image-type\u0026#34; : \u0026#34;imagej-imgplus\u0026#34;, \u0026#34;title-annotation\u0026#34; : { \u0026#34;content\u0026#34; : \u0026#34;Image title\u0026#34;, \u0026#34;enabled\u0026#34; : false }, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Import image\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;preprocessing-preprocessing-output\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { \u0026#34;Data\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-imgplus-2d-greyscale\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Data\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;output\u0026#34; : { \u0026#34;Data\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-imgplus-2d-greyscale\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Data\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 425, \u0026#34;y\u0026#34; : 1100 } }, \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 50 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:compartment-output\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Preprocessing output\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null }, \u0026#34;analysis-gaussian-blur-2d\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 250 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;ij1-blur-gaussian2d\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;sigma-y\u0026#34; : -1.0, \u0026#34;sigma-x\u0026#34; : 1.0, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Gaussian blur 2D\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;analysis-auto-threshold-2d\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 450 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;ij1-threshold-auto2d\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;method\u0026#34; : \u0026#34;Default\u0026#34;, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;dark-background\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Auto threshold 2D\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;analysis-distance-transform-watershed-2d\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 650 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;ij1-binary-dtwatershed2d\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Distance transform watershed 2D\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;analysis-find-particles-2d\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 850 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;ij1-analyze-find-particles2d\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;min-particle-circularity\u0026#34; : 0.0, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:parallelization:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Find particles 2D\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;min-particle-size\u0026#34; : 0.0, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;annotation-type\u0026#34; : { \u0026#34;content\u0026#34; : \u0026#34;Image index\u0026#34;, \u0026#34;enabled\u0026#34; : false }, \u0026#34;max-particle-circularity\u0026#34; : 1.0, \u0026#34;split-slices\u0026#34; : true, \u0026#34;exclude-edges\u0026#34; : false, \u0026#34;measurements\u0026#34; : { \u0026#34;values\u0026#34; : [ \u0026#34;Centroid\u0026#34;, \u0026#34;PixelValueMinMax\u0026#34;, \u0026#34;Area\u0026#34; ] }, \u0026#34;max-particle-size\u0026#34; : \u0026#34;Infinity\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/has-parameter-slot\u0026#34; : false, \u0026#34;jipipe:parameter-slot-algorithm/attach-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/attach-only-non-default-parameter-annotations\u0026#34; : true, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-prefix\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;jipipe:parameter-slot-algorithm/parameter-annotations-use-internal-names\u0026#34; : false }, \u0026#34;analysis-analysis-output\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { \u0026#34;Spore Mask\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-imgplus-2d-greyscale-mask\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore Mask\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Spore ROI\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-roi\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore ROI\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Spore measurements\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-results-table\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore measurements\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } }, \u0026#34;output\u0026#34; : { \u0026#34;Spore Mask\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-imgplus-2d-greyscale-mask\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore Mask\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Spore ROI\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-roi\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore ROI\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } }, \u0026#34;Spore measurements\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-results-table\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Spore measurements\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;postprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 100, \u0026#34;y\u0026#34; : 50 } }, \u0026#34;analysis\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 50, \u0026#34;y\u0026#34; : 1050 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:compartment-output\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Analysis output\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null }, \u0026#34;postprocessing-plot-tables\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;postprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 550, \u0026#34;y\u0026#34; : 250 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;plot-from-table\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;postprocessing\u0026#34;, \u0026#34;plot-type\u0026#34; : \u0026#34;plot-histogram\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Plot tables\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null, \u0026#34;plot-parameters/export-height\u0026#34; : 768, \u0026#34;plot-parameters/value-axis-label\u0026#34; : \u0026#34;Value\u0026#34;, \u0026#34;plot-parameters/bins\u0026#34; : 10, \u0026#34;plot-parameters/export-width\u0026#34; : 1024, \u0026#34;plot-parameters/bin-axis-label\u0026#34; : \u0026#34;Bin\u0026#34;, \u0026#34;plot-parameters/histogram-type\u0026#34; : \u0026#34;Frequency\u0026#34;, \u0026#34;plot-parameters/title\u0026#34; : \u0026#34;Histogram plot\u0026#34;, \u0026#34;column-assignments\u0026#34; : { \u0026#34;parameters\u0026#34; : { \u0026#34;Value\u0026#34; : { \u0026#34;name\u0026#34; : \u0026#34;Value\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;Values to generate a histogram from. (Numeric column)\u0026#34;, \u0026#34;visibility\u0026#34; : \u0026#34;TransitiveVisible\u0026#34;, \u0026#34;field-class\u0026#34; : \u0026#34;org.hkijena.jipipe.extensions.tables.parameters.TableColumnSourceParameter\u0026#34;, \u0026#34;value\u0026#34; : { \u0026#34;mode\u0026#34; : \u0026#34;PickColumn\u0026#34;, \u0026#34;column-source\u0026#34; : { \u0026#34;mode\u0026#34; : \u0026#34;Equals\u0026#34;, \u0026#34;filter-string\u0026#34; : \u0026#34;Area\u0026#34;, \u0026#34;invert\u0026#34; : false }, \u0026#34;generator-source\u0026#34; : { \u0026#34;generator-type\u0026#34; : null, \u0026#34;generated-type\u0026#34; : \u0026#34;NumericColumn\u0026#34; } }, \u0026#34;short-key\u0026#34; : \u0026#34;Value\u0026#34;, \u0026#34;ui-order\u0026#34; : 0, \u0026#34;field-class-id\u0026#34; : \u0026#34;table-column-source\u0026#34; } } } }, \u0026#34;postprocessing-postprocessing-output\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { }, \u0026#34;output\u0026#34; : { } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;postprocessing\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 1100, \u0026#34;y\u0026#34; : 50 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:compartment-output\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;postprocessing\u0026#34;, \u0026#34;jipipe:algorithm:save-outputs\u0026#34; : true, \u0026#34;jipipe:algorithm:enabled\u0026#34; : true, \u0026#34;jipipe:algorithm:pass-through\u0026#34; : false, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Postprocessing output\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null } }, \u0026#34;edges\u0026#34; : [ { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-analysis-output\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;postprocessing-plot-tables\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Spore measurements\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing-import-image\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;preprocessing-preprocessing-output\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Image\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Data\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-gaussian-blur-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-auto-threshold-2d\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-distance-transform-watershed-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-analysis-output\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Spore Mask\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : true } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing-list-files\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;preprocessing-import-image\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Files\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing-preprocessing-output\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-gaussian-blur-2d\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Data\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-distance-transform-watershed-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-find-particles-2d\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Mask\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-auto-threshold-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-distance-transform-watershed-2d\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing-path-to-annotation\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;preprocessing-list-files\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Annotated paths\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Folders\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-find-particles-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-analysis-output\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Measurements\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Spore measurements\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing-folder-list\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;preprocessing-path-to-annotation\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Folder paths\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Paths\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis-find-particles-2d\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis-analysis-output\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;ROI\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Spore ROI\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } } ] }, \u0026#34;compartments\u0026#34; : { \u0026#34;compartment-graph\u0026#34; : { \u0026#34;nodes\u0026#34; : { \u0026#34;preprocessing\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;DEFAULT\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 50, \u0026#34;y\u0026#34; : 50 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:project-compartment\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Preprocessing\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null }, \u0026#34;analysis\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { \u0026#34;Preprocessing\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;jipipe:compartment-output\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Preprocessing\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;DEFAULT\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 50, \u0026#34;y\u0026#34; : 250 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:project-compartment\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Analysis\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null }, \u0026#34;postprocessing\u0026#34; : { \u0026#34;jipipe:slot-configuration\u0026#34; : { \u0026#34;input\u0026#34; : { \u0026#34;Analysis\u0026#34; : { \u0026#34;slot-data-type\u0026#34; : \u0026#34;jipipe:compartment-output\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inherited-slot\u0026#34; : null, \u0026#34;name\u0026#34; : \u0026#34;Analysis\u0026#34;, \u0026#34;custom-name\u0026#34; : null, \u0026#34;inheritance-conversions\u0026#34; : { } } } }, \u0026#34;jipipe:algorithm-ui-location\u0026#34; : { \u0026#34;DEFAULT\u0026#34; : { \u0026#34;Vertical\u0026#34; : { \u0026#34;x\u0026#34; : 188, \u0026#34;y\u0026#34; : 450 } } }, \u0026#34;jipipe:node-info-id\u0026#34; : \u0026#34;jipipe:project-compartment\u0026#34;, \u0026#34;jipipe:algorithm-compartment\u0026#34; : \u0026#34;DEFAULT\u0026#34;, \u0026#34;jipipe:node:name\u0026#34; : \u0026#34;Postprocessing\u0026#34;, \u0026#34;jipipe:node:description\u0026#34; : null } }, \u0026#34;edges\u0026#34; : [ { \u0026#34;source-algorithm\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;postprocessing\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Analysis\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } }, { \u0026#34;source-algorithm\u0026#34; : \u0026#34;preprocessing\u0026#34;, \u0026#34;target-algorithm\u0026#34; : \u0026#34;analysis\u0026#34;, \u0026#34;source-slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;target-slot\u0026#34; : \u0026#34;Preprocessing\u0026#34;, \u0026#34;metadata\u0026#34; : { \u0026#34;ui-hidden\u0026#34; : false } } ] } } } "
},
{
	"uri": "https://www.jipipe.org/citation/",
	"title": "Citation",
	"tags": [],
	"description": "",
	"content": "Please cite following publication if you use our framework:\nGerst, R., Cseresnyés, Z. \u0026amp; Figge, M.T. JIPipe: visual batch processing for ImageJ. Nat Methods (2023). https://doi.org/10.1038/s41592-022-01744-4\n\rThanks!\nJIPipe was developed by Research Group Applied Systems Biology - Head: Prof. Dr. Marc Thilo Figge\nHKI-Center for Systems Biology of Infection\nLeibniz Institute for Natural Product Research and Infection Biology - Hans Knöll Insitute (HKI)\nAdolf-Reichwein-Straße 23, 07745 Jena, Germany\n   \n\r"
},
{
	"uri": "https://www.jipipe.org/documentation/cli/",
	"title": "Command Line Interface",
	"tags": [],
	"description": "Explains basic concepts about how data is processed within JIPipe. We really recommend to take a look at this documentation.",
	"content": "You can run JIPipe pipelines without a graphical interface via the command line.\nJust run following command:\n./ImageJ --pass-classpath --full-classpath --main-class org.hkijena.jipipe.JIPipeCLI run --project \u0026lt;project file\u0026gt; --output-folder \u0026lt;output folder\u0026gt; Command line options ./ImageJ --pass-classpath --full-classpath --main-class org.hkijena.jipipe.JIPipeCLI run \u0026lt;options\u0026gt;  --project \u0026lt;Project file\u0026gt; provides the project file to be executed --output-folder \u0026lt;folder\u0026gt; defines where outputs will be written. Outputs are in standard JIPipe format. Optional: --num-threads \u0026lt;N=1,2,3,...\u0026gt; lets you enable multi-threading Optional: --overwrite-parameters \u0026lt;JSON file\u0026gt; allows you to overwrite specific parameters without the need for changing the project file Optional: --P\u0026lt;Node ID\u0026gt;/\u0026lt;Parameter ID\u0026gt; \u0026lt;Parameter value JSON\u0026gt; overwrites a specific parameter with the specified value  Overwriting parameters The JIPipe project file contains all parameters of a project. Still, it may be useful to overwrite specific parameters without the need for editing the file. A use case for this is automated parallel execution of a pipeline within a script (e.g., using GNU Parallel).\nYou can overwrite parameters by providing a JSON file and by setting CLI options. The CLI options are parsed in the provided order, meaning that a --P override will replace values set in a previously provided --overwrite-parameters and vice versa. It is also possible to provide multiple --overwrite-parameters if desired.\nParameter overwrite file format The --overwrite-parameters file must have following JSON format:\n{ \u0026#34;\u0026lt;Node ID\u0026gt;/\u0026lt;Parameter ID\u0026gt;\u0026#34;: \u0026#34;\u0026lt;appropriate value\u0026gt;\u0026#34; } for example:\n{ \u0026#34;gaussian-blur/sigma-x\u0026#34;: 5, \u0026#34;gaussian-blur/sigma-y\u0026#34;: 1 } Node ID The node ID can either bei the node UUID (a long and unique string of letters and numbers) or the node\u0026rsquo;s alias ID (human-readable name). If you want to be sure, then use the UUID, as it will never change, while the alias ID will be updated if the node is renamed by the user.\nYou can find both the node UUID and alias ID inside the JIPipe GUI by selecting a node and reviewing the node description/documentation.\nParameter ID The parameter ID can be found by selecting a node and moving the mouse over a parameter. Its ID then will be displayed in the documentation below.\nAlternatively, you can open the parameter explorer by right-clicking a node and selecting Parameter explorer. This tool displays the more technical info about each parameter.\nAppropriate parameter values If you do not provide a valid JSON value for the parameter, the CLI tool will crash. To find out which value is appropriate, use the Parameter explorer (see above), which will display the raw JSON values for you. The tool also allows you to \u0026ldquo;test\u0026rdquo; parameter values in a editor and copy its JSON representation.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/standard-library/deep-learning/",
	"title": "Deep Learning",
	"tags": [],
	"description": "Integrates Deep Learning capabilities (Tensorflow, Keras).",
	"content": "JIPipe provides Deep Learning support via a standardized Python interface that allows to train/segment with different networks.\nSetting up Deep Learning Deep Learning requires a Python installation that comes with Tensorflow 2. To simplify this process, we included automated installers for this environment that can be accessed via Project \u0026gt; Application settings \u0026gt; Extensions \u0026gt; Deep learning. Here, click Select/install at the Tensorflow item.\nThe installer will ask you to review various settings - these should be fine for most system configurations. If you are more experienced, then you can change the settings accordingly. You can also select an existing Conda or virtualenv environment by choosing the Additional compatible installers section inside Select/Install.\nGPU processing requires large amounts of VRAM. You can always disable GPU processing on a per-node basis if your hardware is not sufficient.\n\rEspecially on Windows, the installation of the GPU version takes a considerable time (30 min +). Due to buffered text output, you might not always receive progress info from the Conda installation process. We cannot fix this on our end.\n\rOnly Nvidia GPUs:\rIf you want to make use of GPU processing, you will need to install the CUDA Toolkit.\rOn Ubuntu Linux, install the package nvidia-cuda-toolkit (please review the output of APT carefully, as nvidia-cuda-toolkit only works with specific driver versions).\rOn Windows, download the CUDA toolkit from the Nvidia homepage. Please restart JIPipe or Windows after installing the toolkit - otherwise the installed files will not be found by Tensorflow.\r\rTraining To train a network from scratch, add a Create model node into the pipeline and set it up. It allows you to choose from different architectures and setup the expected image size, the number of classes, and additional factors like the learning rate. Here you also have to decide which kind of model is created: For example you can create segmentation oder classification models.\nDepending on the model choice, you will need to prepare your data in different ways:\nSegmentation models Segmentation models are trained on labeled images, where the label is in most cases a binary mask. The label must be annotated as data annotation to the raw image (for example via the Annotate with data node). The data is supplied to the Train model (labeled images) node, which has three inputs:\n Training data: This contains the labeled images that are used for training the network Test data: This contains labeled images for evaluating the performance of the network The model (created from Create model or a pretrained model)  Please always ensure that there is no data shared between training and test data to prevent overfitting. You can achieve this either manually or by using the Split data randomly (percentage) node.\nClassifier models Classifiers determine which kind of object is shown in the image.\n"
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/groups/",
	"title": "Group nodes",
	"tags": [],
	"description": "Explains the group node feature.",
	"content": "While compartments offer a simple way to structure pipelines into functional units, they are not suitable for creating \u0026ldquo;user-defined\u0026rdquo; nodes that can be re-used. Node groups cover this use case by providing a node that contains a dedicated pipeline inside of it. Data is communicated between the main and the inner pipeline via interface nodes that can be customized by users.\nThe group node can be found in Miscellaneous \u0026gt; Group, or can be created from a set of selected nodes by right-clicking them and selecting the Group option (which will also create inputs and outputs that match the selection).\nDouble-clicking the group (or clicking the Edit graph inside the properties) opens the pipeline that is contained inside the group. It contains two interface nodes (Group input and Group output) that define which data is passed from outside the group or exported to the group outputs. Modifying the slots of these interface nodes changes the slots of the group node itself.\nExporting parameters Users can export parameters from nodes that are inside the group to the group node itself. To do this, click the Edit parameters button in the node group\u0026rsquo;s parameter list. You can either create custom parameter groups and add parameters one-by-one, or add a whole node from the pipeline into the list.\n\rIf you want to hide all other parameters of the group, select the \u0026lsquo;Show limited parameters\u0026rsquo; option.\n\rIf you want to configure multiple nodes with the same parameter, use a \u0026lsquo;Define parameter\u0026rsquo; node to create the parameter value and then either directly make use of it via the multi-parameter slot or generate annotations (via \u0026lsquo;Parameters to annotations\u0026rsquo;) and read the values back in with adaptive parameters.\n\rLooping data JIPipe processes data node-per-node, meaning that a node always processes all available input data before passing the results to the next node. This is easy to understand and makes no assumptions about the structure of the data. The issue is that such a model allocates all memory required to process the data at once.\nTo solve this issue, group nodes can loop through the data batches of its input and repeat the embedded pipeline for each of the batches. Just set the Graph iteration mode parameter to a different value than Pass data through.\nJIPipe provides loop nodes that offer the same functionality as group node looping, but without the need for encapsulating nodes into a group.\n\rWe suggest to prepare file data and paths outside the group and then apply all steps that are working on image data (e.g., loading and processing) inside the group.\n\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/templates1/",
	"title": "Groups and node templates",
	"tags": [],
	"description": "",
	"content": "👉 Related tutorial: Creating node groups I\rLearn how to group a set of nodes into a single compound node.\r\r\r👉 Related tutorial: Creating node templates\rLearn how to store nodes for re-use.\r\r\r Node groups and node templates enable full control over the following aspects:\n How to reduce the complexity of some operations? Which functions/parameters should be accessible to students to avoid confusion and frustration? Which nodes should students use? Which nodes are suitable for which compartment?  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/importing-multiple-images-2/",
	"title": "Importing a directory of images II",
	"tags": [],
	"description": "Explains how to use filesystem nodes to automatically detect and load all images in a hierarchy of directories.",
	"content": "👉 Related tutorial: Importing a directory of images I\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Importing a directory of images II\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Importing a directory of images II'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/slot-definition/",
	"title": "Slot definition",
	"tags": [],
	"description": "Defines a data slot",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: slot-definition.schema.json\n\rDefines a data slot\r\r\rslot-data-type:\r\rstring\r\r\r\r\r\r\rThe data type ID of the data stored in this slot\r\r\rslot-type:\r\rstring\r\r, x ∈ {\rInput\r\r,\rOutput\r\r}\r\r\r\r\r\r\rDetermines if the slot is an input or an output\r\r\rinherited-slot:\r\robject\r\r\r\r\r\rOnly valid for output slot. Defines from which slot to inherit the data type. Can be '*' to select the first available slot.\r\r\rname:\r\rstring\r\r\r\r\r\r\rUnique slot name\r\r\rcustom-name:\r\robject\r\r\r\r\r\rUser-customizable name. Only displayed in UI.\r\r\rinheritance-conversions:\r\robject\r\r\r[object Object]\r\r\r\r\rOnly valid for slot inheritance. Applies conversiuons to the inherited type. Must contain map from input data type ID to output data type ID. Conversion is a finite text replacement system.\r\r\r\r\r\rExample { \u0026#34;slot-data-type\u0026#34; : \u0026#34;imagej-imgplus-2d\u0026#34;, \u0026#34;slot-type\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;inherited-slot\u0026#34; : \u0026#34;Input\u0026#34;, \u0026#34;inheritance-conversions\u0026#34;: { \u0026#34;imagej-imgplus-2d-greyscale-mask\u0026#34;: \u0026#34;imagej-imgplus-2d-greyscale-8u\u0026#34; }, \u0026#34;name\u0026#34; : \u0026#34;Output\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/tutorials/videos/",
	"title": "Videos",
	"tags": [],
	"description": "All video tutorials",
	"content": "\u0026lt;1.73.x\r\rThe video tutorials were designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r You will find text and video tutorials in the following list. All tutorials are also available as playlist on YouTube.\n Basic image analysis pipeline\nThis step-by-step video tutorial explains how to create an image analysis workflow with simple algorithms like Gaussian blur, auto thresholding, and distance transform watershed. The segmented objects are quantified and plots are genereated.\n\r JIPipe for ImageJ users\nThis video explains the basics of creating pipelines in JIPipe - aimed towards users already familiar with ImageJ.\n\r User interface\nThis video explains the basics of the JIPipe user interface.\n\r Data caches\nThis video explains the basics of the caching system.\n\r Graph editor user interface\nThis video explains the basics of the graph editor user interface.\n\r How to do batch processing\nThis video explains how to create a batch processing pipeline.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/data-table/",
	"title": "Data table",
	"tags": [],
	"description": "Defines a data table",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: data-table.schema.json\n\rDefines a data table\r\r\rnode-id:\r\rstring\r\r\r\r\r\rThe node type ID that generated the data. Optional.\r\r\rslot:\r\rstring\r\r\r\r\r\rThe slot name that generated the data. Optional.\r\r\rrows:\r\robject[]\r\r\r\r\r\r\rThe data row items\rSee data-table-row\r\r\r\r\r\r\r\rdata-type:\r\rstring\r\r\r\r\r\r\rThe data type ID behind the row\r\r\r\r\r\rExample { \u0026#34;node-id\u0026#34; : \u0026#34;ij1-fft-forward2d\u0026#34;, \u0026#34;slot\u0026#34; : \u0026#34;Output\u0026#34;, \u0026#34;internal-path\u0026#34; : \u0026#34;/fastdata/projects/JIPipe/Output\u0026#34;, \u0026#34;rows\u0026#34; : [ { \u0026#34;index\u0026#34; : 0, \u0026#34;annotations\u0026#34; : [ ], \u0026#34;true-data-type\u0026#34; : \u0026#34;imagej-imgplus-fft-2d\u0026#34; } ], \u0026#34;data-type\u0026#34; : \u0026#34;imagej-imgplus-fft-2d\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/templates2/",
	"title": "Groups and node templates: Compound nodes",
	"tags": [],
	"description": "",
	"content": "JIPipe node groups can be used to contain a set of multiple operations (red box 2) into a single node (red box 1). This is for example useful if advanced visualization or file loading processes should be provided to students without establishing all implementation details behind the operation.\n👉 Related tutorial: Creating node groups I\rLearn how to group a set of nodes into a single compound node.\r\r\r 👉 Node groups contents can be easily viewed by double-clicking them. This allows students who are interested in the operations behind the group to explore their functionality.\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/multi-channel-images-1/",
	"title": "Handling multi-channel images I",
	"tags": [],
	"description": "Explains the process of splitting channels, RGB conversion, channel coloring, and adding comments with image information.",
	"content": "👉 Related tutorial: Importing a directory of images II\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Handling multi-channel images I\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Handling multi-channel images I'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation/create-pipelines/loops/",
	"title": "Loop nodes",
	"tags": [],
	"description": "Explains the loop node feature.",
	"content": "JIPipe processes data node-per-node, meaning that a node always processes all available input data before passing the results to the next node. This is easy to understand and makes no assumptions about the structure of the data. The issue is that such a model allocates all memory required to process the data at once.\nGroup nodes provide a feature that allows to loop the contained pipeline for each input data batch, reducing the memory allocated during the processing (if the groups are set up so that memory-intensive tasks are split). The nodes on the other hand have no access to the project-wide data cache, as groups contain separate pipelines. Loop nodes solve this issue by providing the looping ability of group nodes within the main pipeline.\nTo make a section of nodes loop, just insert a Loop start node. Optionally, you add Loop end nodes to indicate where the loop should end.\nThe Loop start node can be switched to following iteration modes:\n Per iterating data batch: Finds data batches where only one data item per slot is found. Iterates through all data batches. Per merging data batch: Finds data batches where multiple data items per slot are found. Iterates through all data batches. Pass data through: Disables looping  You can also enable the Pass through parameter of loop starts and ends to disable their functionality. In the case of loop starts, the pipeline will be run as if there is no loop. In case of loop ends, more nodes will be inside the loop.\n\rAlways ensure that there are no multiple loop starts per node. Your pipeline will not run in such cases.\n\rWe consider loop nodes still as experimental, as complex processing is applied while the pipeline is running to achieve loops.\n\r"
},
{
	"uri": "https://www.jipipe.org/supplementary-information/",
	"title": "Supplementary information",
	"tags": [],
	"description": "",
	"content": "On this page, you can find the supplementary information of the JIPipe publication.\nNo online PDF viewer installed\r\r Download the supplementary information  Other supplementary material  Current source code: https://www.github.com/applied-systems-biology/JIPipe/ Source code (DOI): https://doi.org/10.5281/zenodo.6532719 Current example projects: https://www.jipipe.org/examples/ Example projects (DOI): https://doi.org/10.6084/m9.figshare.19733320.v1  "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/comment-nodes/",
	"title": "Comment nodes",
	"tags": [],
	"description": "Explains how to add comments with additional information into a pipeline",
	"content": "👉 Related tutorial: Handling multi-channel images I\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Handling multi-channel images I\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Handling multi-channel images I'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-1/",
	"title": "Creating node groups I",
	"tags": [],
	"description": "Explains how to group a set of nodes into a single group node",
	"content": "👉 Related tutorial: Adding and running nodes\rThis guide is a followup of another tutorial\r\r\rFollowup: Creating node groups II\rWe recommend to look at this tutorial after the current one\r\r\rFollowup: Creating node templates I\rWe recommend to look at this tutorial after the current one\r\r\r  Tutorial: Creating node groups\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Creating node groups I/II'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-groups-2/",
	"title": "Creating node groups II",
	"tags": [],
	"description": "Explains how to group a set of nodes into a single group node",
	"content": "👉 Related tutorial: Creating node groups I\rThis guide is a followup of another tutorial\r\r\rFollowup: Creating node templates I\rWe recommend to look at this tutorial after the current one\r\r\r  Tutorial: Creating node groups\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Creating node groups I/II'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/data-table-row/",
	"title": "Data table row",
	"tags": [],
	"description": "Defines a data table row",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: data-table-row.schema.json\n\rDefines a data table row\r\r\rid:\r\rnumber\r\r\r\r\r\rRow index within the data table\r\r\rannotations:\r\robject[]\r\r\r\r\r\r\rAnnotations attached to the data row\rSee annotation\r\r\r\r\r\r\r\rtrue-data-type:\r\rstring\r\r\r\r\r\r\rThe true (not the slot) data type ID behind the row\r\r\r\r\r\rExample { \u0026#34;index\u0026#34; : 0, \u0026#34;annotations\u0026#34; : [ ], \u0026#34;true-data-type\u0026#34; : \u0026#34;imagej-imgplus-fft-2d\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/templates3/",
	"title": "Groups and node templates: Exporting parameters from groups",
	"tags": [],
	"description": "",
	"content": "Groups by themselves are a an excellent mode of reducing the complexity of various operations. To still provide users of the group with means to customize the behaviour of the nodes contained within the group, Group nodes support the referencing/export of group-internal parameters (red box 1) to the group itself (red arrow 2).\n👉 Related tutorial: Creating node groups II\rLearn how to export group parameters.\r\r\r 👉 For example, teachers can provide a group responsible for segmenting and filtering objects with settings where students can input custom object size constraints:\n Task: Glomeruli have a radius of 15 µm to 65 µm. Please setup the Glomeruli segmentation area and circularity constraints that only objects with the appropriate size are segmented.\n "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/create-node-templates-1/",
	"title": "Creating node templates",
	"tags": [],
	"description": "Explains how to save one or multiple nodes into a custom node template, as well as how to import/export templates.",
	"content": "👉 Related tutorial: Creating node groups I\rThis guide is a followup of another tutorial\r\r\r  Tutorial: Creating node templates\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Creating node templates'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/documentation-json-api/annotation/",
	"title": "Annotation",
	"tags": [],
	"description": "Defines an annotation",
	"content": "This document describes the properties of the JSON API object. You also can access the document in JSON Schema format: annotation.schema.json\n\rAn annotation\r\r\rname:\r\rstring\r\r\r\r\r\r\rName of the annotation\r\r\rvalue:\r\rstring\r\r\r\r\r\r\rValue of the annotation\r\r\r\r\r\rExample { \u0026#34;name\u0026#34; : \u0026#34;#Dataset\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Experiment 1\u0026#34; } "
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/templates4/",
	"title": "Groups and node templates: Providing nodes with the project",
	"tags": [],
	"description": "",
	"content": "The node template system allows projects to carry a list of user-defined nodes. These node templates can be created for pre-configured nodes or a group with exported parameters.\n👉 Create project-associated node templates for nodes that should be used by the students\n👉 Related tutorial: Creating node templates\rLearn how to create node templates and store them inside the project.\r\r\r Node templates appear both in the Node templates tab (red box 1), as well as in the Templates menu (red box 2).\n👉 You can assign a menu path to node templates during their creation. Use this feature to sort nodes by their intended compartment (red arrow 3)\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-1/",
	"title": "Annotations I: Filtering",
	"tags": [],
	"description": "Explains the processes of annotating with image properties, and filtering based on annotations",
	"content": "👉 Related tutorial: Handling multi-channel images I\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Annotations I (Filtering)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations I: Filtering'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/features/teaching/permissions1/",
	"title": "Project permissions",
	"tags": [],
	"description": "",
	"content": "Project permissions can be accessed via Project \u0026gt; Project settings \u0026gt; Permissions. In the current iteration of this feature, you can prevent users from creating or deleting nodes, as well as adding/deleting/modifying slots.\n👉 These settings are suitable for projects where students are provided with an existing set of unconnected nodes and are tasked to connect them into a pipeline\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-2/",
	"title": "Annotations II: Branching",
	"tags": [],
	"description": "Explains further detail about filtering by annotations, including adding and editing slots, and implementing branching processing pathways",
	"content": "👉 Related tutorial: Annotations I (Filtering)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Annotations II (Branching)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations II: Branching'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotations-3/",
	"title": "Annotations III: Modifying and merging",
	"tags": [],
	"description": "Explains how to modify the set of annotations",
	"content": "👉 Related tutorial: Annotations II (Branching)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Annotations III (Modifying and merging)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotations III: Modifying and merging'.\rProject\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-1/",
	"title": "Compartments I: Creating and connecting",
	"tags": [],
	"description": "Explains how to segment pipelines into compartments and transfer data between them",
	"content": "👉 Related tutorial: Annotations II (Branching)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Compartments I (Creating and connecting)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Compartments I: Creating and connecting'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/compartments-2/",
	"title": "Compartments II: Basic image segmentation",
	"tags": [],
	"description": "Explains how to apply basic image segmentation on a compartmentalized pipeline",
	"content": "👉 Related tutorial: Compartments I (Creating and connecting)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Compartments I (Creating and connecting)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Compartments I: Creating and connecting'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/quantification-plotting/",
	"title": "Quantification and plotting",
	"tags": [],
	"description": "Explains the particle finder, functions for measuring particles, handling of result tables, and simple data plotting",
	"content": "👉 Related tutorial: Compartments II (Basic image segmentation)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Quantification and plotting\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Quantification and plotting'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-1/",
	"title": "Cache I: Generating and viewing",
	"tags": [],
	"description": "Illustrates how to cache node results to the memory and how to browse through the generated data",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Cache I (Generating and viewing)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cache I: Generating and viewing'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/cache-2/",
	"title": "Cache II: Managing and exporting",
	"tags": [],
	"description": "Explains how to manage the cache and export cached data into the standard JIPipe format. ",
	"content": "👉 Related tutorial: Cache I (Generating and viewing)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Cache I (Generating and viewing)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Cache I: Generating and viewing'.\rProject \u0026#43; Data\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/ui/change-temp-directory/",
	"title": "Changing the temporary directory",
	"tags": [],
	"description": "Shows how to change the temporary directory used for various operations",
	"content": "1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r 👉 JIPipe uses a temporary directory to store various data, including downloads, and results generated by the Run \u0026amp; show results function\n👉 Depending on the system configuration, the predefined directory might have insufficient space.\n👉 This guide will show how to change the temporary directory to a folder of your own choice\n"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-physical-dimensions/",
	"title": "Image properties and LUT",
	"tags": [],
	"description": "Explains how to read and modify physical image dimensions. Additionally, this tutorial explains how to apply look-up tables",
	"content": "👉 Related tutorial: Importing a directory of images II\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: ROI processing\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'ROI processing'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/old/",
	"title": "Old tutorials",
	"tags": [],
	"description": "Tutorials that will be updated/replaced",
	"content": "\u0026lt;1.73.x\r\rThe tutorials were designed for older versions of JIPipe. Please be aware that some GUI components have changed.\r\r  Image analysis pipeline\nThis step-by-step tutorial explains how to create an image analysis workflow with simple algorithms like Gaussian blur, auto thresholding, and distance transform watershed. The segmented objects are quantified and plots are genereated.\n\r Creating an extension\nThis step-by-step tutorial explains how to create an JIPipe extension from parts of an existing pipeline without the need for programming.\n\r\r"
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/image-roi-processing/",
	"title": "ROI processing",
	"tags": [],
	"description": "Explains the basics of ROI processing in JIPipe.",
	"content": "👉 Related tutorial: Compartments II (Basic image segmentation)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Image properties and LUT\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Image properties and LUT'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/table-processing/",
	"title": "Table processing",
	"tags": [],
	"description": "Illustrates how to use some table processing capabilities included in JIPipe",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Table processing\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Table processing'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/annotating-data-with-measurements/",
	"title": "Annotating data with measurements",
	"tags": [],
	"description": "Explains how to annotate data with measurements for the usage in more advanced pipelines with filters and adaptive pipelines",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of other tutorials.\r\r\r👉 Related tutorial: ROI processing\rThis guide is a followup of other tutorials.\r\r\r👉 Related tutorial: Table processing\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Annotating data with measurements\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Annotating data with measurements'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-1/",
	"title": "Exporting data I: Machine-readable",
	"tags": [],
	"description": "Explains how to export data into a machine-readable formats",
	"content": "👉 Related tutorial: Cache II (Managing and exporting)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Exporting data I (Machine-readable)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Exporting data I: Machine-readable'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Exports\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/basic/exporting-data-2/",
	"title": "Exporting data II: Human-readable",
	"tags": [],
	"description": "Explains how to export data into a human-readable formats",
	"content": "👉 Related tutorial: Cache II (Managing and exporting)\rThis guide is a followup of other tutorials.\r\r\r  Tutorial: Exporting data II (Human-readable)\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Exporting data II: Human-readable'.\rProject \u0026#43; Data \u0026#43; Node templates \u0026#43; Exports\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/intermediate/multi-parameters/",
	"title": "Multiple parameter sets",
	"tags": [],
	"description": "Explains how to apply multiple parameter sets per node",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of another tutorial\r\r\r  Tutorial: Multiple parameter sets\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Multiple parameter sets'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/imagej-macros/",
	"title": "Integrating ImageJ macros",
	"tags": [],
	"description": "Explains how to integrate ImageJ macros.",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of another tutorial\r\r\r  Tutorial: ImageJ macros\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'ImageJ macros'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/loops/",
	"title": "Loops",
	"tags": [],
	"description": "Explains how to use loops.",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of another tutorial\r\r\r  Tutorial: Loops\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Loops'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/tutorials/advanced/python/",
	"title": "Python",
	"tags": [],
	"description": "Explains how to setup a Python node.",
	"content": "👉 Related tutorial: Quantification and plotting\rThis guide is a followup of another tutorial\r\r\r  Tutorial: Python\rsmall size\rsimple\rtutorial\r\rAccompanying data and project for the tutorial 'Python'.\rProject \u0026#43; Data \u0026#43; Node templates\rTutorial\r\r\r 1.74.x\u0026#43;\r\rThis guide was written for JIPipe version 1.74.0 or newer\r\r "
},
{
	"uri": "https://www.jipipe.org/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "By Applied Systems Biology, Leibniz Institute for Natural Product Research and Infection Biology – Hans Knöll Institute (HKI), Jena, Germany\n"
},
{
	"uri": "https://www.jipipe.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://www.jipipe.org/",
	"title": "JIPipe",
	"tags": [],
	"description": "",
	"content": "Macro programming for everyone!\r\rJIPipe is a visual programming language for ImageJ that\rallows you to create macros without any programming  by just creating a flowchart!\r\rRead the publication  \rSupplementary information \r\r Download now \r Learn how to use it \r Show examples \r\r\r --\r\rIntuitive programming\rJIPipe includes a visual programming language into ImageJ that was designed as full replacement for writing macros or Python scripts. Just arrange the operations of your workflow into a flow chart and let JIPipe automatically handle data and metadata management, parallelization, type conversions, error validation, and export of results.\r\r\r\rFind and manage nodes\rJIPipe helps you to learn about the over 1000 available nodes by organizing them into searchable menus and by integrating the Algorithm finder that guides you in creating a pipeline by offering compatible processing steps for your current data. All documentation, including relevant papers are accessible within JIPipe. \r\r \rOrganize and document your pipelines\rJIPipe allows you to organize your pipelines into compartments and groups to help you to keep track of your analysis. Keep track of important nodes via an integrated bookmark system. Furthermore, you can document your pipeline by adding comment nodes, and set custom labels, names, and descriptions.\r\r\r\rBuilt on ImageJ\rJIPipe is built on the established ImageJ software and comes with commonly used ImageJ functions and plugins, just as CLIJ2 and MorphoLibJ.\rYou can re-use your existing macros and ImageJ2 scripts and create easy-to-use graphical interfaces for them, which will also be available directly within ImageJ via JIPipe's two-way integration.\r\r\r\rPlugin support\rJIPipe allows you to export your pipelines as custom nodes that can be installed just like any other ImageJ plugin. Programmers can make use of the powerful Java API to enhance the feature set even more and publish extensions just as any ImageJ plugin.\r\r\r\rReview results\rYou can either analyze results directly after processing or load existing results\rdirectly into JIPipe. The powerful result analysis tool lets you import data back\rinto ImageJ, or summarize and plot them directly within JIPipe.\r\r\r\rAdvanced table processing\rJIPipe comes with functions to modify and process tables. These includes table processing nodes and a graphical tool for editing tables interactively.\r\r\r\rAdvanced plotting features\rJIPipe includes both plotting nodes and an interactive plot builder based on JFreeChart that supports a multitude of different plot types,\rincluding XY plots, bar charts, histograms, and box plots.\r\r\r\r\rDo you want to try it?\r\rYou can try JIPipe right now in three simple steps!\r\r\rDownload ImageJ or open your existing ImageJ installation\rActivate the JIPipe update site (Help \u0026gt; Update ...)\rRun the JIPipe GUI from within the plugin menu\r\r\rAfter starting JIPipe, we recommend you to follow our tutorial series or load an example pipeline.\r\r --\rDo you have a question or require some help?\r\rPlease do not hesitate to contact us! You can always contact the JIPipe developers via the community, or via E-Mail.\rIf you find a bug, you can also report it directly on GitHub.\r\r Community \r Send us an E-Mail \r Report a bug \r\r\rJIPipe was developed by Research Group Applied Systems BiologyHead: Prof. Dr. Marc Thilo Figge\rHKI-Center for Systems Biology of Infection\rLeibniz Institute for Natural Product Research and Infection Biology - Hans Knöll Insitute (HKI)\rAdolf-Reichwein-Straße 23, 07745 Jena, Germany\r\r\r\r\r\r\r\r\r$(document).ready(function(){\r// Landing page slideshow\r$('.landing-features').slick({\rinfinite: true,\rdots: true,\rslidesToShow: 3,\rslidesToScroll: 3,\rautoplay: true,\rautoplaySpeed: 10000,\rcenterMode: true,\rcenterPadding: '5rem',\rinitialSlide: 1,\rresponsive: [\r{\rbreakpoint: 1024,\rsettings: {\rslidesToShow: 1,\rslidesToScroll: 1\r}\r}\r]\r});\r});\r\r"
},
{
	"uri": "https://www.jipipe.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]