<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creating an algorithm on JIPipe for ImageJ</title>
    <link>https://www.jipipe.org/documentation-java-api/algorithm/</link>
    <description>Recent content in Creating an algorithm on JIPipe for ImageJ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.jipipe.org/documentation-java-api/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handling multiple inputs</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/iterating-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/iterating-algorithms/</guid>
      <description>JIPipe data slots store multiple data rows. This means that algorithms have to iterate their workload for each input row and generate equivalent output in the respective output slots.
There can be issues if data from multiple input slots need to be combined (e.g. merge channels into RGB, see user documentation). JIPipeAlgorithm has no capabilities to help with such cases.
A solution can be JIPipeIteratingAlgorithm or JIPipeSimpleIteratingAlgorithm that use the annotation attached during processing to find data rows that belong to the same data set.</description>
    </item>
    
    <item>
      <title>Merging input data</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/merging-algorithms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/merging-algorithms/</guid>
      <description>You might need to develop an algorithm that does not simply iterate through its input(s), but organize it into groups to be merged. JIPipe comes with JIPipeMergingAlgorithm that uses the annotation attached during processing to find data rows that belong to the same data set. The implementation creates JIPipeMergingDataBatch instances that represent multiple data rows merged into one group.
Please access data via the data interface.
The only difference to JIPipeAlgorithm is that you need to override a different function called runIteration.</description>
    </item>
    
    <item>
      <title>Customizing slots</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/slot-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/slot-configuration/</guid>
      <description>In the previous examples, we used the @JIPipeInputSlot and @JIPipeOutputSlot annotations with autoCreate = true to automatically configure the slots.
This is not sufficient for more complicated algorithms that require
 Restricting the number of slots Restricting the allowed data types Users to add more slots or remove existing ones  A custom JIPipeSlotConfiguration can be used to implement such more advanced behaviors.
For many cases, the default implementation JIPipeMutableSlotConfiguration is sufficient.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/parameters/</guid>
      <description>You can add parameters to your algorithm by creating a property with a getter and setter. Then you annotate the getter and setter with the same @JIPipeParameter keys. Also add an @JIPipeDocumentation annotation to either the getter or setter.
Parameters are automatically serialized and deserialized.
Please make sure to send an event when the parameter is set, so the UI can update.
// ... see previous tutorials public class MyAlgorithm extends JIPipeIteratingAlgorithm { private float roundness = 0.</description>
    </item>
    
    <item>
      <title>Parallelization</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/parallelization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/parallelization/</guid>
      <description>The current version of JIPipe supports parallelization via a fixed thread pool. Parallelization is done on an per-algorithm-level, meaning that the algorithms are responsible for providing parallelization capabilities.
The included base algorithms JIPipeIteratingAlgorithm, JIPipeSimpleIteratingAlgorithm, and JIPipeMergingAlgorithm already come with support for parallelization that has to be manually enabled via code. The inherit from JIPipeParallelizedAlgorithm and completely apply parallelization automatically.
Automated parallelization (JIPipeParallelizedAlgorithm) The automated parallelization is controlled by three factors:</description>
    </item>
    
    <item>
      <title>Custom algorithm info</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/custom-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/custom-info/</guid>
      <description>In the previous tutorials we used the standard way of creating algorithms. This might not be sufficient if you want to generate algorithms, for example by importing ImageJ algorithms, loading algorithms from JSON or generate algorithms for an unknown list of data types.
How algorithms are registered Algorithm instances are created by an JIPipeNodeInfo. This info is the object that is actually registered into JIPipe. It is able to create new instances of the declared algorithm, or copy it.</description>
    </item>
    
    <item>
      <title>Context actions</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/context-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/context-actions/</guid>
      <description>Context actions allow you to add custom buttons into an algorithm&amp;rsquo;s parameter group that by default will also appear within a node&amp;rsquo;s context menu. They can be used for multiple purposes such as loading example data, applying an auto-configuration, opening websites, or displaying documentation or data in a new tab.
1.74.x&amp;#43;We do no anymore recommend the creation of context actions to implement examples. Instead, register node examples within the extension.</description>
    </item>
    
    <item>
      <title>Node examples</title>
      <link>https://www.jipipe.org/documentation-java-api/algorithm/node-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.jipipe.org/documentation-java-api/algorithm/node-examples/</guid>
      <description>1.74.x&amp;#43;This guide was written for JIPipe version 1.74.0 or newer To teach users about the settings of more complex nodes or to improve the convenience, you can annotate nodes with node examples. These will appear in a dedicated tab &amp;ldquo;Examples&amp;rdquo; on selecting a node within the pipeline editor.
The standardized example API is based around the &amp;ldquo;Node templates&amp;rdquo; functionality. To create an example, follow these steps:</description>
    </item>
    
  </channel>
</rss>
