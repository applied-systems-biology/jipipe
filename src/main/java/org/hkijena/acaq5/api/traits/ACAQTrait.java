package org.hkijena.acaq5.api.traits;

import com.google.common.reflect.TypeToken;
import org.hkijena.acaq5.api.ACAQDocumentation;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Base interface for an algorithm data trait
 * Traits are generated by data slots and accumulated over algorithm depth.
 * Algorithms can modify output traits by adding or removing them.
 */
public interface ACAQTrait {

    /**
     * Returns the name of given trait
     * @param klass
     * @return
     */
    static String getNameOf(Class<? extends ACAQTrait> klass) {
        ACAQDocumentation[] annotations = klass.getAnnotationsByType(ACAQDocumentation.class);
        if(annotations.length > 0) {
            return annotations[0].name();
        }
        else {
            return klass.getSimpleName();
        }
    }

    /**
     * Returns the description of given trait
     * @param klass
     * @return
     */
    static String getDescriptionOf(Class<? extends ACAQTrait> klass) {
        ACAQDocumentation[] annotations = klass.getAnnotationsByType(ACAQDocumentation.class);
        if(annotations.length > 0) {
            return annotations[0].description();
        }
        else {
            return null;
        }
    }

    /**
     * Returns all inherited traits marked as category
     * @param klass
     * @return
     */
    static Set<Class<? extends ACAQTrait>> getCategoriesOf(Class<? extends ACAQTrait> klass) {
        Set<Class<? extends ACAQTrait>> result = new HashSet<>();
        for(TypeToken<?> type : TypeToken.of(klass).getTypes().interfaces()) {
            if(type.getRawType().getAnnotationsByType(HiddenTrait.class).length > 0) {
                result.add((Class<? extends ACAQTrait>) type.getRawType());
            }
        }
        return result;
    }

    /**
     * Returns all inherited traits as one string for later sorting
     */
    static String getCategoriesStringOf(Class<? extends ACAQTrait> klass) {
        return getCategoriesOf(klass).stream().map(ACAQTrait::getNameOf).collect(Collectors.joining("_"));
    }

    /**
     * Returns true if the trait is hidden from the user
     * @param klass
     * @return
     */
    static boolean isHidden(Class<? extends ACAQTrait> klass) {
        return klass.getAnnotationsByType(HiddenTrait.class).length > 0;
    }

    /**
     * Compare function for two trait classes
     * @param t0
     * @param t1
     * @return
     */
    static int compareByName(Class<? extends ACAQTrait> t0, Class<? extends ACAQTrait> t1) {
        return getNameOf(t0).compareTo(getNameOf(t1));
    }

    /**
     * Compare function for two trait classes
     * @param t0
     * @param t1
     * @return
     */
    static int compareByNameAndCategoriesString(Class<? extends ACAQTrait> t0, Class<? extends ACAQTrait> t1) {
        String n0 = getNameOf(t0) + "_" + getCategoriesStringOf(t0);
        String n1 = getNameOf(t1) + "_" + getCategoriesStringOf(t1);
        return n0.compareTo(n1);
    }

}
