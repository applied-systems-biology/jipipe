package org.hkijena.acaq5.api.traits;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.reflect.TypeToken;
import org.hkijena.acaq5.api.ACAQDocumentation;

import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Base interface for an algorithm data trait
 * Traits are generated by data slots and accumulated over algorithm depth.
 * Algorithms can modify output traits by adding or removing them.
 */
@HiddenTrait
@JsonSerialize(using = ACAQTrait.Serializer.class)
public interface ACAQTrait {

    /**
     * Returns the declaration of this trait
     * @return
     */
    ACAQTraitDeclaration getDeclaration();

    /**
     * Returns the name of given trait
     * @param klass
     * @return
     */
    static String getNameOf(Class<? extends ACAQTrait> klass) {
        ACAQDocumentation[] annotations = klass.getAnnotationsByType(ACAQDocumentation.class);
        if(annotations.length > 0) {
            return annotations[0].name();
        }
        else {
            return klass.getSimpleName();
        }
    }

    /**
     * Returns the description of given trait
     * @param klass
     * @return
     */
    static String getDescriptionOf(Class<? extends ACAQTrait> klass) {
        ACAQDocumentation[] annotations = klass.getAnnotationsByType(ACAQDocumentation.class);
        if(annotations.length > 0) {
            return annotations[0].description();
        }
        else {
            return null;
        }
    }

    /**
     * Faster method to compare traits
     * @param first
     * @param second
     * @return
     */
    static boolean equals(ACAQTrait first, ACAQTrait second) {
        if(first == null && second == null)
            return true;
        else if(first == null)
            return false;
        else if(second == null)
            return false;
        else if(first.getDeclaration() != second.getDeclaration())
            return false;
        else if(first.getDeclaration().isDiscriminator())
            return Objects.equals(((ACAQDiscriminator) first).getValue(), ((ACAQDiscriminator)second).getValue());
        else
            return true;
    }

    class Serializer extends JsonSerializer<ACAQTrait> {
        @Override
        public void serialize(ACAQTrait trait, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException, JsonProcessingException {
            jsonGenerator.writeStartObject();
            jsonGenerator.writeStringField("acaq:trait-type", trait.getDeclaration().getId());
            jsonGenerator.writeStringField("name", trait.getDeclaration().getName());
            jsonGenerator.writeEndObject();
        }
    }
}
