package org.hkijena.jipipe.api.compat;

import org.hkijena.jipipe.api.JIPipeDocumentation;
import org.hkijena.jipipe.api.JIPipeProgressInfo;
import org.hkijena.jipipe.api.data.JIPipeData;
import org.hkijena.jipipe.api.data.JIPipeDataTable;

import java.util.Collections;
import java.util.List;

public interface ImageJDataImporter {
    /**
     * Imports JIPipe data from ImageJ
     *
     * @param objects the ImageJ objects (if available)
     * @param parameters Parameters of the adapter. Depends entirely on the adapter
     * @return Imported JIPipe data as table
     */
    JIPipeDataTable importData(List<Object> objects, ImageJImportParameters parameters);

    /**
     * Imports JIPipe data from ImageJ.
     * Returns the first data, otherwise null.
     *
     * @param object the ImageJ object (if available)
     * @param parameters Parameters of the adapter. Depends entirely on the adapter
     * @return Imported JIPipe data
     */
    default JIPipeData importData(Object object, ImageJImportParameters parameters) {
        JIPipeDataTable dataTable = importData(Collections.singletonList(object), parameters);
        if(dataTable.isEmpty())
            return null;
        return dataTable.getData(0, JIPipeData.class, new JIPipeProgressInfo());
    }

    /**
     * @return the data class that is generated by this importer
     */
    Class<? extends JIPipeData> getImportedJIPipeDataType();

    /**
     * @return the ImageJ data type that is imported from this importer
     */
    Class<?> getImportedImageJDataType();

    /**
     * A documentation name. Utilizes a {@link org.hkijena.jipipe.api.JIPipeDocumentation} by default (if present). Otherwise, returns the class name.
     * @return the name of this operation
     */
    default String getName() {
        JIPipeDocumentation annotation = getClass().getAnnotation(JIPipeDocumentation.class);
        if(annotation != null) {
            return annotation.name();
        }
        else {
            return getClass().getName();
        }
    }

    /**
     * A documentation description. Utilizes a {@link org.hkijena.jipipe.api.JIPipeDocumentation} by default (if present). Otherwise, returns an empty string.
     * @return the description of this operation
     */
    default String getDescription() {
        JIPipeDocumentation annotation = getClass().getAnnotation(JIPipeDocumentation.class);
        if(annotation != null) {
            return annotation.name();
        }
        else {
            return "";
        }
    }
}
